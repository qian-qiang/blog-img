{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/click_show_text.js","path":"js/click_show_text.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/loading.svg","path":"medias/loading.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","path":"libs/codeBlock/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/explosion.min.js","path":"libs/others/explosion.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/fireworks.js","path":"libs/others/fireworks.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/text.js","path":"libs/others/text.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/csdn.ico","path":"medias/avatars/csdn.ico","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/27.jpg","path":"medias/featureimages/27.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/35.jpg","path":"medias/featureimages/35.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/36.jpg","path":"medias/featureimages/36.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/37.jpg","path":"medias/featureimages/37.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/38.jpg","path":"medias/featureimages/38.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/47.jpg","path":"medias/featureimages/47.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/24.jpg","path":"medias/featureimages/24.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/28.jpg","path":"medias/featureimages/28.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/29.jpg","path":"medias/featureimages/29.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/30.jpg","path":"medias/featureimages/30.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/31.jpg","path":"medias/featureimages/31.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/33.jpg","path":"medias/featureimages/33.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/39.jpg","path":"medias/featureimages/39.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/41.jpg","path":"medias/featureimages/41.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/43.jpg","path":"medias/featureimages/43.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/46.jpg","path":"medias/featureimages/46.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/Like Real People Do.jpg","path":"medias/music/avatars/Like Real People Do.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/Shame.jpg","path":"medias/music/avatars/Shame.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/Stay Alive.jpg","path":"medias/music/avatars/Stay Alive.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/se.jpg","path":"medias/music/avatars/se.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.jpg","path":"medias/reward/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/25.jpg","path":"medias/featureimages/25.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/26.jpg","path":"medias/featureimages/26.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/32.jpg","path":"medias/featureimages/32.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/34.jpg","path":"medias/featureimages/34.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/45.jpg","path":"medias/featureimages/45.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/44.jpg","path":"medias/featureimages/44.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/48.jpg","path":"medias/featureimages/48.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","path":"medias/avatars/myzhihu.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/42.jpg","path":"medias/featureimages/42.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/总有一个人要先走.jpg","path":"medias/music/avatars/总有一个人要先走.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/40.jpg","path":"medias/featureimages/40.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/49.jpg","path":"medias/featureimages/49.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/总有一个人要先走.mp3","path":"medias/music/总有一个人要先走.mp3","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"d97f69ff63501de89cfd341c68e4d6ed5c8a5b3a","modified":1680346735632},{"_id":"source/CNAME","hash":"66f7d3fcfd675af188cd2265cc2fbc53614539e0","modified":1680413823073},{"_id":"source/robots.txt","hash":"66078f56462509b9624be31d3e78ae2b62a33b60","modified":1680346735642},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1680346735642},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1680346735642},{"_id":"themes/matery/_config.yml","hash":"dc19e5a82a06a25f405b6d046a306fa2a41c9cca","modified":1680420282405},{"_id":"source/_data/musics.json","hash":"478a883885cf6d3979863dd879be185cb4a91d0a","modified":1680346735642},{"_id":"source/about/index.md","hash":"96d9476c3fe43e256a6905c2207b9f0297a99759","modified":1680346735642},{"_id":"source/archives/index.md","hash":"44f160ecdfe402aa2f95a4ef60a148455546510f","modified":1680346735642},{"_id":"source/categories/index.md","hash":"233719b02b933f94997afb6b8fd923c64628f14a","modified":1680346735642},{"_id":"source/contact/index.md","hash":"fa30c3540f4dfd0cc24e6668295bd1e96cd25273","modified":1680346735642},{"_id":"source/gallery/index.md","hash":"7c4ac1cca330c5c90058ab93eab50a5b8333faed","modified":1680422528359},{"_id":"source/tags/index.md","hash":"43197f904879a562e29b5fc45278b4f23d4e2449","modified":1680346735642},{"_id":"themes/matery/languages/default.yml","hash":"71b8537cb25e733d599f84d5c23374fda5e8b0b3","modified":1680451111974},{"_id":"themes/matery/languages/zh-CN.yml","hash":"ad6cbb7a6be43e2458370f39d36e2c2cc957122e","modified":1680416122401},{"_id":"themes/matery/layout/404.ejs","hash":"f08a0f507b36f3652520a41381f71167488405c7","modified":1680346735642},{"_id":"themes/matery/layout/about.ejs","hash":"e87752e59f021b5139b1155a264da11ab469a9aa","modified":1680346735662},{"_id":"themes/matery/layout/archive.ejs","hash":"1b5023571894404d75caffa28128fc9c49f9095d","modified":1680346735662},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1680416866866},{"_id":"themes/matery/layout/category.ejs","hash":"2d421e10c3b8fd2c4f725e5eaa967c4a1429c707","modified":1680416868607},{"_id":"themes/matery/layout/contact.ejs","hash":"1513c5a40b7cc0b6e5854cf8c3253958bcb486cb","modified":1680346735672},{"_id":"themes/matery/layout/gallery.ejs","hash":"3b84306e561620fd5b46d70fd22e1927f2a87c00","modified":1680447223158},{"_id":"themes/matery/layout/index.ejs","hash":"eeefbe57221a50e048efec133b626067d1453493","modified":1680346735672},{"_id":"themes/matery/layout/layout.ejs","hash":"e0570e96251c219e7d973739b41a8b3accbbfa82","modified":1680346735672},{"_id":"themes/matery/layout/post.ejs","hash":"f1a35f32e5901e167ae9a750e7cb3635549cea2e","modified":1680346735672},{"_id":"themes/matery/layout/tag.ejs","hash":"5cdf3a1d72f54285ee9cb826fd0e4a0449093215","modified":1680416880870},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1680421874869},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1680346735652},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"d6f4bcc03b6c7479302b655dc0f359fd0b5fd166","modified":1680346735652},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1680346735652},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1680346735652},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"4fd2d22639101ca608086f710a18557dce4e8bf4","modified":1680346735652},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"a3a140e6aeeb6f289e4b821a577ef548267f3de1","modified":1680346735652},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1680346735652},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1680346735652},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1680346735652},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"c0f1bb86251e1d1c80fee9bea7b23c35449931ba","modified":1680416192432},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"821e1af65990521c9e0288178d8e5b18c73a9cab","modified":1680346735652},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"d4042e5521ceb5f3255cd4455ac7ccd227fee6df","modified":1680346735652},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1680346735652},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"df566e67777682043d7dcae74db74773edf98b26","modified":1680421214648},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"12de964b0ba9821b2dec881d28716e3c50c92c98","modified":1680416255267},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1680346735652},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"166c0b9753f3f913bd801e82ad5b268004be198d","modified":1680346735652},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"82cb8090cde663fa7ad67418a802997b3057e957","modified":1680346735652},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"3f208f33e4e12becdb8323e6e64e20ad60c3fb2a","modified":1680346735652},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1680346735652},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"4e73f10eacb5d00a0681cb44fe5c039cd8ab03cd","modified":1680346735652},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f85a222ec3f9bc27eb7978015e63a16514b38791","modified":1680346735652},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"73624d9db81e87ff0c12310bb873fbd0b5221021","modified":1680346735662},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"e859fe6e0259e0c123cb7ceda6e4cac836318ffc","modified":1680346735662},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1680346735662},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"a0c1d6a79e085392d8c46db3081a162b4e9b362a","modified":1680346735662},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"be0717a664172ec1e903d654fa6153a8468a7e47","modified":1680346735662},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"b2b22d4fc4e46b051f67216c391f629f4ff552b5","modified":1680346735662},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"5284712d84bbaa4f0d88026ac3ec5a8c13e00056","modified":1680346735662},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"6ae58a57b83a5999d0b6a737ec868f084d208f89","modified":1680346735662},{"_id":"themes/matery/layout/_widget/gallery-wordcloud.ejs","hash":"a421b7ce5a364a8441f4146250657b1b8b26e07f","modified":1680422038799},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"fc50cb4bbc1f4d0e4c9f5941f1c3c74bea742db7","modified":1680346735662},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"9ea672db65f1e5b8fad1ffafb1614f25adc97e63","modified":1680416259406},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"785cb588a31215876f6737213054ba0e8552fff0","modified":1680346735662},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"c6f713316ce75ad08ac5d1587bd8ce42e894e9ae","modified":1680346735662},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"4608af6151f0e32f668c89f09343748340021478","modified":1680346735662},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0aaf0a111b9aa07ff37f6286eeac5506283f47f8","modified":1680346735662},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"d439d86818de179d64965d4f7f5fa56147fd9221","modified":1680346735662},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"a4f13bb4d6e6ded29ded8da4cff3ca444d38d242","modified":1680406376499},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf604fe9c435f0fb9a559cac9c35772579b590e8","modified":1680420864379},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"05f5e2acace5730cdf7bed650375ad88f6b5d1b7","modified":1680346735662},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1680346735672},{"_id":"themes/matery/source/css/matery.css","hash":"8f3296db41c70bf585b81e4c02a01fd7aaec9c43","modified":1680346735672},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1680346735672},{"_id":"themes/matery/source/css/my.css","hash":"9ea83dca2da8263cfc40d683d3ecd7d91009dc1d","modified":1680346735672},{"_id":"themes/matery/source/js/click_show_text.js","hash":"7064ddfbcff292b79a3da070f62077dc484c1cfc","modified":1680346735672},{"_id":"themes/matery/source/js/matery.js","hash":"e688f9cf87aa5ff6655c3140817de3fb4c3a9ae7","modified":1680346735672},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1680346735672},{"_id":"themes/matery/source/medias/loading.svg","hash":"ba1375eb3d08353e70f8349eb586da9601355c9e","modified":1680415311279},{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结.md","hash":"a60ec6d2c9e98fc893328b3eb0148a6422b0bd96","modified":1680449337138},{"_id":"source/_posts/2022/01/linux线程.md","hash":"baa7fe486a1d376c25368b1eef87e4a630453104","modified":1680449337812},{"_id":"source/_posts/2022/01/python使用百度翻译的API.md","hash":"4f07a15eb70c8f5a1e2c4b983643f721b929f04f","modified":1680451856641},{"_id":"source/_posts/2022/01/中华通史-上古史-夏.md","hash":"7ef1db519625d43e826576dad160b33f99e89ea6","modified":1680452485071},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构.md","hash":"b8b83de4d18babe4cb8b05da359f4acac6802943","modified":1680449311745},{"_id":"source/_posts/2022/01/超详细解析python爬取外网图片.md","hash":"6782dbb4489bbd5972a7e171e4c2becc0c80b3d6","modified":1680449313066},{"_id":"source/_posts/2023/04/上海.md","hash":"00526c04fe12b4646f2c2e869260732e4e1a02a6","modified":1680448192896},{"_id":"source/_posts/2023/04/新疆.md","hash":"c77b5e9d638789780c210238a6926b399ce77791","modified":1680452627899},{"_id":"themes/matery/source/favicon.png","hash":"8d9bbc4559b4a7d594474fc59789436dd4c28adc","modified":1680346735672},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1680346735682},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1680346735682},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1680346735682},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1680346735682},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1680346735682},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","hash":"98f626d784a94ebe653b13f3a4c79e483264cae7","modified":1680346735692},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1680346735692},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"d54f6205b35dceba1d66da761c00ff9fad9cf857","modified":1680346735702},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"6ad8984746f0ff4e2fc81f0c04f12874fa752683","modified":1680346735702},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"743114dcd6f3addc973778b1b248f88d42b05278","modified":1680346735702},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1680346735702},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1680346735702},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1680346735722},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1680346735732},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1680346735732},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1680346735732},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1680346735742},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1680346735742},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1680346735752},{"_id":"themes/matery/source/libs/others/explosion.min.js","hash":"5b76fa72a85cfb27d54b00128393ece773d65386","modified":1680346735752},{"_id":"themes/matery/source/libs/others/fireworks.js","hash":"e9c74f2dd3953d4d8dec44e9977574d00702e84d","modified":1680346735752},{"_id":"themes/matery/source/libs/others/snow.js","hash":"b393f069781eef788a0ae66b2681cece8fea2851","modified":1680346735752},{"_id":"themes/matery/source/libs/others/text.js","hash":"fdf18f65977e4bc358dfb5fb0b7c98492ae72efd","modified":1680346735752},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1680346735752},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1680346735762},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1680346735762},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"2e1ac235e6a6d80dbed651f993f319c1ed4b5925","modified":1680346735882},{"_id":"source/_posts/2022/01/Linux-input子系统.md","hash":"58bd9aec2cc6d29ff3610308c1ab565d9f968251","modified":1680448435920},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1680346735702},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1680346735732},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1680346735732},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"f1558f12d96a352e490166d543a8e821dd3bb2bc","modified":1680346735762},{"_id":"themes/matery/source/medias/avatars/csdn.ico","hash":"fff55f10e98084a888ac0b346ccdf0dbaad2ccb1","modified":1680346735762},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"164bda04d4ef6ae75f149c2e822d0d0f0b79e15c","modified":1680346735802},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"9ad4b78782e69f0ace50f76daa7a4bd687738332","modified":1680346735812},{"_id":"themes/matery/source/medias/featureimages/27.jpg","hash":"ea65367dab59059c343cd0a211f41ca4bd0dc2c9","modified":1680346735822},{"_id":"themes/matery/source/medias/featureimages/35.jpg","hash":"2f001a7d045a952ba059eb3575664347ebbf4d1f","modified":1680346735842},{"_id":"themes/matery/source/medias/featureimages/36.jpg","hash":"a71a869c98c68123e94706fa970333235990f0ab","modified":1680346735842},{"_id":"themes/matery/source/medias/featureimages/37.jpg","hash":"515fd43e0acddf316a5753ea1cdc259c9571eec6","modified":1680346735842},{"_id":"themes/matery/source/medias/featureimages/38.jpg","hash":"fc728ac4c69d06e911bbc4d6cba9c9ef1b158b9f","modified":1680346735842},{"_id":"themes/matery/source/medias/featureimages/47.jpg","hash":"ee4de6373759e67d96c0fe7237620ccdd190f188","modified":1680346735862},{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结/2909691-20220928153140065-1807119912.png","hash":"81814544b47e2371c6174d2d78a40c6dc1ec97ee","modified":1680354053268},{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结/2909691-20220928153451220-1274979267.png","hash":"38e44ea1bf27b199f03e40d3fbb31ca92a9560b1","modified":1680354077110},{"_id":"source/_posts/2022/01/Linux-input子系统/2909691-20220819094250974-180404869.webp","hash":"f2c6a92fb8d6c71167d08db4814ac8978264f149","modified":1680354829781},{"_id":"source/_posts/2022/01/Linux-input子系统/2909691-20220819102740731-2036281828.png","hash":"620ca1c5e896674be2123b19c639bc542af82caf","modified":1680354839365},{"_id":"source/_posts/2022/01/linux线程/2909691-20221018201940242-320806714.png","hash":"e303ca7352b7cb92f2f9a6e68a42a53f40f0a5e0","modified":1680354605673},{"_id":"source/_posts/2022/01/linux线程/2909691-20221018202536805-171723429.png","hash":"19ee436b75c2365a5d9b0fe3692a743a6e49c952","modified":1680354611339},{"_id":"source/_posts/2022/01/linux线程/2909691-20221018204634847-2097816257.png","hash":"11e873440e4adc189ebe3f537f9ef2e5e95e30ba","modified":1680354617258},{"_id":"source/_posts/2022/01/python使用百度翻译的API/20200302115943813.png","hash":"d732381420174bf2f792dc34b3f5b3b56bfc2fe8","modified":1680351256766},{"_id":"source/_posts/2022/01/python使用百度翻译的API/20200302120105912.png","hash":"60d73aec104782b1e3626b0ae5b695e6b2f44134","modified":1680351261907},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329193127889.jpg","hash":"7a0511fab61dec9617ff13e3e30955a7b37f0930","modified":1680351711068},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329195920218.jpg","hash":"20699b111e09083edc68e80f86e2238c4c5b703d","modified":1680351718159},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329200632579.png","hash":"cd08c7532ef0acf9b9406d0794195926408d8b0a","modified":1680351753316},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329202358795.png","hash":"cdfc62f3ea8e38679c1a804d2aad822b1bcc1a36","modified":1680351762840},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329202548677.png","hash":"af1c46bdb03c03fa55002639807e158ac3ab6868","modified":1680351757633},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329203335481.png","hash":"d8ae5f3ea833f6f627c8d7006a0a886753a3b908","modified":1680351775877},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1680346735732},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1680346735742},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1680346735742},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1680346735742},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1680346735742},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1680346735742},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1680346735742},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1680346735742},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1680346735742},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"2c27939768606603bee3b5e6c8a722596a667e60","modified":1680346735742},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1680346735742},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1680346735752},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1680346735752},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1680346735752},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1680346735752},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1680346735752},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1680346735752},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1680346735752},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1680346735762},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"4e9f83cbe1575a44fe9315f937e7505ed05b6920","modified":1680346735792},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"aaf5863bed7563a86a6da15cef0b5d44740e449c","modified":1680346735792},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"53f3eb05edab87ee07c889f26fc550e9b5e5cb91","modified":1680346735792},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"4e4ed3d6f8466b3362cbaaa04dc31b8859d3e202","modified":1680346735802},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"867c9882842f84290ba173292d551a626106a45d","modified":1680346735802},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"8567da47271a81b74ca341d170e057bb42f42bf5","modified":1680346735812},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"e854df6ea24c22c999216db611dfd3785b76b834","modified":1680346735812},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"c2f1f9387db7dd99d3c0e4df42a160d482dde5bd","modified":1680346735822},{"_id":"themes/matery/source/medias/featureimages/24.jpg","hash":"33fc0af42186fa2c0e41712d5e45c716dd47bce6","modified":1680346735822},{"_id":"themes/matery/source/medias/featureimages/28.jpg","hash":"565fb296d8e4e2e520d6f15985f1de33d7bd98c8","modified":1680346735832},{"_id":"themes/matery/source/medias/featureimages/29.jpg","hash":"a8ff01c7f29be6d703040fad7889f5afba1eb844","modified":1680346735832},{"_id":"themes/matery/source/medias/featureimages/30.jpg","hash":"6dfe6d277ec3ef36e8c958a71712702a5be3e4d8","modified":1680346735832},{"_id":"themes/matery/source/medias/featureimages/31.jpg","hash":"50eedc29287470f333612e6f71d88c3121357257","modified":1680346735832},{"_id":"themes/matery/source/medias/featureimages/33.jpg","hash":"851fadf999b21c4e42d7a5e4114a10abd21f81cd","modified":1680346735832},{"_id":"themes/matery/source/medias/featureimages/39.jpg","hash":"2b914a3b098aa874f68b4fcda7c85613140c6420","modified":1680346735842},{"_id":"themes/matery/source/medias/featureimages/41.jpg","hash":"51ccac5c36201f1c04f66e5d54babbb21cf5dc5f","modified":1680346735852},{"_id":"themes/matery/source/medias/featureimages/43.jpg","hash":"76bf6095d8e92aa5d6a4e2dff4c2d710c61da07e","modified":1680346735852},{"_id":"themes/matery/source/medias/featureimages/46.jpg","hash":"1e73f8ed0bd91c4443c4f7e57d2ea5cf94d419c6","modified":1680346735862},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"e0eb036bf77aacc91dffea2d75f590f9f1b2b961","modified":1680346735872},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"b04f9b49261b2486260e64e6543da45689e272de","modified":1680346735882},{"_id":"themes/matery/source/medias/logo.png","hash":"8d9bbc4559b4a7d594474fc59789436dd4c28adc","modified":1680346735882},{"_id":"themes/matery/source/medias/music/avatars/Like Real People Do.jpg","hash":"70d026f8ff9df7a5427e75e58c4b8bc6c637d85f","modified":1680346735882},{"_id":"themes/matery/source/medias/music/avatars/Shame.jpg","hash":"08464f06d5400d92431cfc4668cda9b0eccce0be","modified":1680346735882},{"_id":"themes/matery/source/medias/music/avatars/Stay Alive.jpg","hash":"c0611b3db7a0acb91c8d1972e6ffe99545289bc8","modified":1680346735892},{"_id":"themes/matery/source/medias/music/avatars/se.jpg","hash":"2afb8904ae101e2a7dc719226ad4d05032a635c1","modified":1680346735892},{"_id":"themes/matery/source/medias/reward/wechat.jpg","hash":"010a7b4eaf2113af7660fab39f7b7d2dc2fb314e","modified":1680346736062},{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结/2909691-20220928151916481-1456634923.png","hash":"1a6e87f307777f98d725943978c00efb4090c0ba","modified":1680354042541},{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结/2909691-20220928152957065-501054685.png","hash":"02e70dd300ead042177d527aebf566eb8ebec4fc","modified":1680354057824},{"_id":"source/_posts/2022/01/python使用百度翻译的API/20200302113654396.png","hash":"0eb46311fe5eee6803493cec10c082d2acef996b","modified":1680351251222},{"_id":"source/_posts/2022/01/中华通史-上古史-夏/20210703105831609.png","hash":"6f74b0d301ff93d020a051b598c1843023c8a60f","modified":1680352551083},{"_id":"source/_posts/2022/01/中华通史-上古史-夏/20210703105920999.png","hash":"e6a74917abe403a8adca2103d264f2b532765b96","modified":1680352554918},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329201646615.png","hash":"33a6c6a068648814992c82eaeab0d798cd05258e","modified":1680351767004},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329203021908.png","hash":"0648ca9586b7a83463ad4f12efc003231171b681","modified":1680351772031},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329203626594.png","hash":"3e9af02ca14cc9e5098b1b148583dee50e0a28b8","modified":1680351779919},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1680346735682},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1680346735692},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1680346735742},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"1eed284202ae51c4f3051d943b3d97a7602a9fc6","modified":1680346735802},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"87100d52e5077c77f9e74856a1c5330d81708ae3","modified":1680346735802},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"b8108799fbf3eadf0462fba04034a277a462018b","modified":1680346735812},{"_id":"themes/matery/source/medias/featureimages/25.jpg","hash":"97930cf52f9e68ccf24d26b383704ca4724dae34","modified":1680346735822},{"_id":"themes/matery/source/medias/featureimages/26.jpg","hash":"9c2eaf5aff8abdc4e215af96002c8525be9ddd06","modified":1680346735822},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"4cabac02df559a5eb1b9abc8a0359fe6573a738b","modified":1680346735832},{"_id":"themes/matery/source/medias/featureimages/32.jpg","hash":"e440f9bdcdff7c181904b26b2774c48632e4d24a","modified":1680346735832},{"_id":"themes/matery/source/medias/featureimages/34.jpg","hash":"6fca10e13cae2a089909ea266fa6be510e57a2bd","modified":1680346735842},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"d7139f883aad272d619ce181ebcd86672a2a7bdc","modified":1680346735852},{"_id":"themes/matery/source/medias/featureimages/45.jpg","hash":"5c22e8d627f763ebae1d080025aee103383a8460","modified":1680346735862},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"38272cddbb09c70c7785aed877f6c9b45a61262a","modified":1680346735872},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"26833abcdd65e10c48e8d0553cb3543d3e0ca4d8","modified":1680346735882},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"38272cddbb09c70c7785aed877f6c9b45a61262a","modified":1680346735782},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"bf966a223684650a6c5f1bc5df6d571493e922f3","modified":1680346736052},{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结/2909691-20220928152209724-1097250473.png","hash":"05d498f7f30591101a53a8c5c95924ff1a84001d","modified":1680354048065},{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结/2909691-20220928152945955-899676295.png","hash":"9714cee9d41e446e660bc06e1908adad5edd6258","modified":1680354062606},{"_id":"source/_posts/2022/01/python使用百度翻译的API/20200302113313981.png","hash":"a3bc848fc823b39cb9304360dabc4113a61ebb40","modified":1680351246517},{"_id":"source/_posts/2022/01/中华通史-上古史-夏/20210703105815619.png","hash":"ed38e99ca771a664503c1fc241b65609b190a652","modified":1680352546223},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1680346735682},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1680346735692},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"4cbd4926b13132903c465685a127c577b56b2b8b","modified":1680346735812},{"_id":"themes/matery/source/medias/featureimages/44.jpg","hash":"6bca5b340c7e16350e3040da2416f6184ccd64a4","modified":1680346735862},{"_id":"themes/matery/source/medias/featureimages/48.jpg","hash":"13754e6efc8f6db46088d736ed2c290b0d9bfb33","modified":1680346735862},{"_id":"source/_posts/2022/01/Linux-input子系统/2909691-20220819093409715-1604400596.png","hash":"55b9667906c85b6e35a8306dec17b969ece62590","modified":1680354817261},{"_id":"source/_posts/2022/01/中华通史-上古史-夏/20210703111602157.png","hash":"eed4aad178595cbb24f9d33be2b6b893d29ebe07","modified":1680352558589},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1680346735692},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1680346735692},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"2beb56f529f0ce49f36a84d55890b7c0de3d7705","modified":1680346735822},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"cd3fc47d2042a3277e4b375ad084365abdc28f5d","modified":1680346735772},{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结/2909691-20220928153305849-1048335725.png","hash":"aeee98d5b5d62bc471f881b6482100864635f667","modified":1680354071714},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","hash":"4a9aec7e236615e3b698adfd3b36bc34ec05e5c7","modified":1680346735762},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"29f884076a7fbed6900a1a05c41ffd3ce122a123","modified":1680346735802},{"_id":"themes/matery/source/medias/featureimages/42.jpg","hash":"c05648a22e1f083d13f40e76fed535f027fae0b6","modified":1680346735852},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1680346735772},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"4d6f31f86966584360bcdbfecb6f6a2ec94f944d","modified":1680346735782},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"5be9274e63d6ac02607e3d659fd32532291385fa","modified":1680346735792},{"_id":"themes/matery/source/medias/music/avatars/总有一个人要先走.jpg","hash":"2beb56f529f0ce49f36a84d55890b7c0de3d7705","modified":1680346735892},{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结/2909691-20220928152922659-1842915282.png","hash":"3e599491c205ce9c2473c7cb88ae34ffe5ed810c","modified":1680354067158},{"_id":"source/_posts/2022/01/python使用百度翻译的API/20200302112847600.png","hash":"7826ff6dbdf5ff34629750ce22b0e94cccadef69","modified":1680351235719},{"_id":"source/_posts/2022/01/python使用百度翻译的API/20200302112753932.png","hash":"6f7c69b14491228187f0b0d593687015b1751112","modified":1680351221024},{"_id":"source/_posts/2023/04/新疆/MXAF0695.JPG","hash":"4b854a6ecb431a313e93f8d48df7fd0044aa372c","modified":1680413564000},{"_id":"themes/matery/source/medias/featureimages/40.jpg","hash":"7a69b037ce05312d9322fe3f11c4d645b88645aa","modified":1680346735852},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"73bae0e6812c46509b91e3155bd12ce8640b245a","modified":1680346735772},{"_id":"source/_posts/2022/01/超详细解析python爬取外网图片/20200302110709393.png","hash":"2ad2b400e4ac4b25e38c950980367bb6b7276066","modified":1680349700445},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1680346735692},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329201443609.png","hash":"58a7a16ec9b08da3d87fb952be7b90fa42d40b8a","modified":1680351725137},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"1df59d7e5481ac2917c7043b28883393675dcaf9","modified":1680346735732},{"_id":"themes/matery/source/medias/featureimages/49.jpg","hash":"90ad50712c339a89402a363288dcd355e98d0fbb","modified":1680346735872},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1680346735712},{"_id":"source/_posts/2022/01/超详细解析python爬取外网图片/20200302111109517.png","hash":"3c1684024bc31494b116961152500c0109172a72","modified":1680349722977},{"_id":"source/_posts/2023/04/新疆/BBND3773.PNG","hash":"9d51e64746eaf562e333c0c58b1665c87b7e3c94","modified":1680413633000},{"_id":"source/_posts/2023/04/新疆/KNLN1045.PNG","hash":"9b81832789db7ed79eceb15cfd62958fe3c81f1e","modified":1680413632000},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"42a57b512acce7f09f122b6b8c4f85c3803cd438","modified":1680346735782},{"_id":"source/_posts/2023/04/新疆/MOVG5083.JPG","hash":"d735c13bacae84426c35f79b31f0d76e56b5dbcb","modified":1653715862000},{"_id":"source/_posts/2023/04/新疆/YJUM1401.JPG","hash":"2298f67966321b94c232d69b82a5d0c3725c250b","modified":1653636926000},{"_id":"source/_posts/2023/04/新疆/ANKG1449.JPG","hash":"5baaa1ab9105091d0118f76229cef42117d346d3","modified":1653626682000},{"_id":"source/_posts/2023/04/新疆/XRBQ0574.JPG","hash":"0a22babef32c3458bf6d3b132fc86fdb92df4ac1","modified":1653656038000},{"_id":"source/_posts/2023/04/新疆/IGAX1811.JPG","hash":"b28a4910831f07c5d9a24e7a89f1a13a89c4e499","modified":1653546184000},{"_id":"source/_posts/2023/04/新疆/AZQE3071.JPG","hash":"ec500582aece897e57480cf258033db9afa09b4d","modified":1680413602000},{"_id":"source/_posts/2023/04/新疆/AQSR2937.JPG","hash":"803cbcd9795224d0fe0f955a183097d5841e7e4a","modified":1680413587000},{"_id":"source/_posts/2023/04/新疆/OOGA8835.JPG","hash":"e8cdd2e11e7eb09b7a297f4de0cd25e207be075f","modified":1680413591000},{"_id":"source/_posts/2023/04/新疆/MLZW8415.JPG","hash":"ccfbc24851277f2dae1ea805d65e56b625d6cef9","modified":1653527908000},{"_id":"source/_posts/2023/04/新疆/BBOD4958.JPG","hash":"d91a8e27fa87b395cf945e442e26b5afa5958529","modified":1653527916000},{"_id":"themes/matery/source/medias/music/总有一个人要先走.mp3","hash":"a9a64e4e6da5bb508be368267c5c1fbbcd1f5b7f","modified":1680346736052},{"_id":"public/baidu_urls.txt","hash":"d380c78719d82fd082d9859ff9afa0b1fc1ee282","modified":1680452664834},{"_id":"public/baidusitemap.xml","hash":"a02de77cd22ff28e85f8025c1d9ab36034b14e31","modified":1680452664891},{"_id":"public/search.xml","hash":"c172a38bfbea433bf2046a271f36cf093ae4e05b","modified":1680452664895},{"_id":"public/atom.xml","hash":"8a4d556b0dc00b0b22517b7e87908ac753fe8153","modified":1680452665623},{"_id":"public/sitemap.xml","hash":"245d6c330da2ac17aaf4dade73d3fac93b2a9869","modified":1680452665987},{"_id":"public/categories/index.html","hash":"a1c64c0e02a2b4e7a7fe35e450423a5dc15e43a3","modified":1680452666059},{"_id":"public/archives/index.html","hash":"d5b763bc4d03f4d01fb39381dad918d903bf4009","modified":1680452666065},{"_id":"public/about/index.html","hash":"317fbb2390a502b1f09301c0a0a566a46ca02fb7","modified":1680452666065},{"_id":"public/404.html","hash":"191c7c9ea1db97dee19b1e8c763837ebbbc5eb6d","modified":1680452666175},{"_id":"public/contact/index.html","hash":"a5fa7d1a83e99f67c58da4e793027e1a3b3d91c7","modified":1680452666189},{"_id":"public/tags/index.html","hash":"81b681ba84b9f5811f9148008724901023d6014f","modified":1680452666189},{"_id":"public/gallery/index.html","hash":"b5707fd4f2d0e1f91733bdfecfb0ef7bf0cb30fd","modified":1680452666191},{"_id":"public/2023/04/shang-hai/index.html","hash":"7ca664701b08637dde73db19c06f8cf1937540af","modified":1680452666191},{"_id":"public/2023/04/xin-jiang/index.html","hash":"264a08e796836528603e3666f6cd301befe70a23","modified":1680452666191},{"_id":"public/2022/01/linux-input-zi-xi-tong/index.html","hash":"23a3884c6a346176251d9c70bc30f6b4ceb424da","modified":1680452666191},{"_id":"public/2022/01/linux-xian-cheng/index.html","hash":"3b8e0db88c9f873f92321ce71c8f7cc6220472bd","modified":1680452666191},{"_id":"public/2022/01/zhong-hua-tong-shi.shang-gu-shi-xia/index.html","hash":"e2949b22434bb4271dd4068321cdd8bebba014ab","modified":1680452666192},{"_id":"public/2022/01/cai-niao-ying-gai-ru-he-kai-shi-she-ji-yi-ge-xiang-mu-de-qian-ru-shi-ruan-jian-jia-gou/index.html","hash":"d872918a4f94a66305978131e3ffa5a6d6521799","modified":1680452666193},{"_id":"public/2022/01/python-shi-yong-bai-du-fan-yi-de-api/index.html","hash":"1e730a23ebe81648d9ed9bb471f610edfc594a93","modified":1680452666193},{"_id":"public/2022/01/imx6ull-yi-zhi-lvgl-zong-jie/index.html","hash":"dd91612440fd4950581f9eeacf3dd598a253990d","modified":1680452666193},{"_id":"public/2022/01/chao-xiang-xi-jie-xi-python-pa-qu-wai-wang-tu-pian/index.html","hash":"b824c17b96da4becbcd0aeef6fd8836d89c466d6","modified":1680452666194},{"_id":"public/archives/2022/01/index.html","hash":"3d6ef1a3f4e2d6e35d841ee9f5b2f55ff7f9a7fa","modified":1680452666194},{"_id":"public/archives/2022/index.html","hash":"c5475c8080674710c8a48ef56bd262d24b8d7fc5","modified":1680452666194},{"_id":"public/archives/2023/index.html","hash":"d22c0f87ee5e330dd3c097b98fcc9b1ec2792f60","modified":1680452666194},{"_id":"public/archives/2023/04/index.html","hash":"6bae6baa99aea716845e423463b2715bc77efa55","modified":1680452666194},{"_id":"public/categories/linux/index.html","hash":"03debf04ad73a53f784faf663d0340cb953d3d8c","modified":1680452666194},{"_id":"public/categories/history/index.html","hash":"9c7005822b81bd7df2292878aa36c6c69ad1b8aa","modified":1680452666194},{"_id":"public/categories/python/index.html","hash":"ae4a8cd04ad9a02a53d5ef2395e7ba298eb8f793","modified":1680452666195},{"_id":"public/categories/Embedded-system/index.html","hash":"2fe2254ab6b79ddbcb193919185a91e404c24b1c","modified":1680452666195},{"_id":"public/tags/imx6ull/index.html","hash":"5f5752b142bdc50851415706e2d580a3afc17f3b","modified":1680452666195},{"_id":"public/tags/linux/index.html","hash":"301ef87dc9df9235b6fe3547be6a56adb0b40b09","modified":1680452666195},{"_id":"public/index.html","hash":"94f9052b95ff17aa92f46cfb5e18467dd7b2c8a4","modified":1680452666195},{"_id":"public/tags/thread/index.html","hash":"057766f1490e2a01c9e8e45837e3b3b4d12fbb19","modified":1680452666195},{"_id":"public/tags/history/index.html","hash":"91d54ad3c3663076dd75dabd51b336a408226c55","modified":1680452666244},{"_id":"public/tags/python/index.html","hash":"e8dd022d8efb75d3d3d5e665db324121a78b82bc","modified":1680452666244},{"_id":"public/tags/Embedded-system/index.html","hash":"3f21fa7fe9c082d00bdc2ecdfe474077a2f8d8fd","modified":1680452666244},{"_id":"public/tags/input/index.html","hash":"0d31335a2ea545b73d71086903715825faa0102e","modified":1680452666244},{"_id":"public/CNAME","hash":"66f7d3fcfd675af188cd2265cc2fbc53614539e0","modified":1680452666244},{"_id":"public/robots.txt","hash":"66078f56462509b9624be31d3e78ae2b62a33b60","modified":1680452666244},{"_id":"public/medias/loading.svg","hash":"ba1375eb3d08353e70f8349eb586da9601355c9e","modified":1680452666245},{"_id":"public/medias/featureimages/9.jpg","hash":"2e1ac235e6a6d80dbed651f993f319c1ed4b5925","modified":1680452666245},{"_id":"public/medias/avatars/csdn.ico","hash":"fff55f10e98084a888ac0b346ccdf0dbaad2ccb1","modified":1680452666245},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1680452666245},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1680452666245},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1680452666245},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1680452666245},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1680452666246},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1680452666246},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1680452666246},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1680452666246},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1680452666246},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1680452666246},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1680452666246},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1680452666246},{"_id":"public/medias/music/avatars/Like Real People Do.jpg","hash":"70d026f8ff9df7a5427e75e58c4b8bc6c637d85f","modified":1680452666246},{"_id":"public/medias/music/avatars/Shame.jpg","hash":"08464f06d5400d92431cfc4668cda9b0eccce0be","modified":1680452666246},{"_id":"public/medias/music/avatars/Stay Alive.jpg","hash":"c0611b3db7a0acb91c8d1972e6ffe99545289bc8","modified":1680452666246},{"_id":"public/medias/music/avatars/se.jpg","hash":"2afb8904ae101e2a7dc719226ad4d05032a635c1","modified":1680452666247},{"_id":"public/2022/01/linux-xian-cheng/2909691-20221018201940242-320806714.png","hash":"e303ca7352b7cb92f2f9a6e68a42a53f40f0a5e0","modified":1680452666247},{"_id":"public/2022/01/linux-xian-cheng/2909691-20221018202536805-171723429.png","hash":"19ee436b75c2365a5d9b0fe3692a743a6e49c952","modified":1680452666247},{"_id":"public/2022/01/linux-xian-cheng/2909691-20221018204634847-2097816257.png","hash":"11e873440e4adc189ebe3f537f9ef2e5e95e30ba","modified":1680452666247},{"_id":"public/2022/01/python-shi-yong-bai-du-fan-yi-de-api/20200302115943813.png","hash":"d732381420174bf2f792dc34b3f5b3b56bfc2fe8","modified":1680452666247},{"_id":"public/2022/01/python-shi-yong-bai-du-fan-yi-de-api/20200302120105912.png","hash":"60d73aec104782b1e3626b0ae5b695e6b2f44134","modified":1680452666250},{"_id":"public/2022/01/imx6ull-yi-zhi-lvgl-zong-jie/2909691-20220928153140065-1807119912.png","hash":"81814544b47e2371c6174d2d78a40c6dc1ec97ee","modified":1680452666250},{"_id":"public/2022/01/imx6ull-yi-zhi-lvgl-zong-jie/2909691-20220928153451220-1274979267.png","hash":"38e44ea1bf27b199f03e40d3fbb31ca92a9560b1","modified":1680452666251},{"_id":"public/2022/01/cai-niao-ying-gai-ru-he-kai-shi-she-ji-yi-ge-xiang-mu-de-qian-ru-shi-ruan-jian-jia-gou/20210329193127889.jpg","hash":"7a0511fab61dec9617ff13e3e30955a7b37f0930","modified":1680452666251},{"_id":"public/2022/01/cai-niao-ying-gai-ru-he-kai-shi-she-ji-yi-ge-xiang-mu-de-qian-ru-shi-ruan-jian-jia-gou/20210329195920218.jpg","hash":"20699b111e09083edc68e80f86e2238c4c5b703d","modified":1680452666252},{"_id":"public/2022/01/cai-niao-ying-gai-ru-he-kai-shi-she-ji-yi-ge-xiang-mu-de-qian-ru-shi-ruan-jian-jia-gou/20210329200632579.png","hash":"cd08c7532ef0acf9b9406d0794195926408d8b0a","modified":1680452666252},{"_id":"public/2022/01/cai-niao-ying-gai-ru-he-kai-shi-she-ji-yi-ge-xiang-mu-de-qian-ru-shi-ruan-jian-jia-gou/20210329202358795.png","hash":"cdfc62f3ea8e38679c1a804d2aad822b1bcc1a36","modified":1680452666252},{"_id":"public/2022/01/cai-niao-ying-gai-ru-he-kai-shi-she-ji-yi-ge-xiang-mu-de-qian-ru-shi-ruan-jian-jia-gou/20210329202548677.png","hash":"af1c46bdb03c03fa55002639807e158ac3ab6868","modified":1680452666253},{"_id":"public/2022/01/cai-niao-ying-gai-ru-he-kai-shi-she-ji-yi-ge-xiang-mu-de-qian-ru-shi-ruan-jian-jia-gou/20210329203335481.png","hash":"d8ae5f3ea833f6f627c8d7006a0a886753a3b908","modified":1680452666253},{"_id":"public/2022/01/linux-input-zi-xi-tong/2909691-20220819094250974-180404869.webp","hash":"f2c6a92fb8d6c71167d08db4814ac8978264f149","modified":1680452666253},{"_id":"public/2022/01/linux-input-zi-xi-tong/2909691-20220819102740731-2036281828.png","hash":"620ca1c5e896674be2123b19c639bc542af82caf","modified":1680452666254},{"_id":"public/css/prism-tomorrow.css","hash":"733208631ad1ebf0ba27f7e6f02eb11414d4e284","modified":1680452666256},{"_id":"public/css/prism-line-numbers.css","hash":"cdad9f52f4368d5912ab7faf6348a2c360e19208","modified":1680452666257},{"_id":"public/medias/featureimages/14.jpg","hash":"164bda04d4ef6ae75f149c2e822d0d0f0b79e15c","modified":1680452666301},{"_id":"public/medias/featureimages/21.jpg","hash":"9ad4b78782e69f0ace50f76daa7a4bd687738332","modified":1680452666315},{"_id":"public/medias/featureimages/27.jpg","hash":"ea65367dab59059c343cd0a211f41ca4bd0dc2c9","modified":1680452666324},{"_id":"public/medias/featureimages/35.jpg","hash":"2f001a7d045a952ba059eb3575664347ebbf4d1f","modified":1680452666325},{"_id":"public/medias/featureimages/36.jpg","hash":"a71a869c98c68123e94706fa970333235990f0ab","modified":1680452666325},{"_id":"public/medias/featureimages/37.jpg","hash":"515fd43e0acddf316a5753ea1cdc259c9571eec6","modified":1680452666325},{"_id":"public/medias/featureimages/38.jpg","hash":"fc728ac4c69d06e911bbc4d6cba9c9ef1b158b9f","modified":1680452666326},{"_id":"public/medias/featureimages/47.jpg","hash":"ee4de6373759e67d96c0fe7237620ccdd190f188","modified":1680452666326},{"_id":"public/medias/featureimages/15.jpg","hash":"867c9882842f84290ba173292d551a626106a45d","modified":1680452666326},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1680452666326},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1680452666327},{"_id":"public/2022/01/zhong-hua-tong-shi.shang-gu-shi-xia/20210703105831609.png","hash":"6f74b0d301ff93d020a051b598c1843023c8a60f","modified":1680452666327},{"_id":"public/2022/01/zhong-hua-tong-shi.shang-gu-shi-xia/20210703105920999.png","hash":"e6a74917abe403a8adca2103d264f2b532765b96","modified":1680452666327},{"_id":"public/2022/01/python-shi-yong-bai-du-fan-yi-de-api/20200302113654396.png","hash":"0eb46311fe5eee6803493cec10c082d2acef996b","modified":1680452666327},{"_id":"public/2022/01/imx6ull-yi-zhi-lvgl-zong-jie/2909691-20220928151916481-1456634923.png","hash":"1a6e87f307777f98d725943978c00efb4090c0ba","modified":1680452666328},{"_id":"public/2022/01/imx6ull-yi-zhi-lvgl-zong-jie/2909691-20220928152957065-501054685.png","hash":"02e70dd300ead042177d527aebf566eb8ebec4fc","modified":1680452666328},{"_id":"public/2022/01/cai-niao-ying-gai-ru-he-kai-shi-she-ji-yi-ge-xiang-mu-de-qian-ru-shi-ruan-jian-jia-gou/20210329201646615.png","hash":"33a6c6a068648814992c82eaeab0d798cd05258e","modified":1680452666328},{"_id":"public/2022/01/cai-niao-ying-gai-ru-he-kai-shi-she-ji-yi-ge-xiang-mu-de-qian-ru-shi-ruan-jian-jia-gou/20210329203021908.png","hash":"0648ca9586b7a83463ad4f12efc003231171b681","modified":1680452666328},{"_id":"public/2022/01/cai-niao-ying-gai-ru-he-kai-shi-she-ji-yi-ge-xiang-mu-de-qian-ru-shi-ruan-jian-jia-gou/20210329203626594.png","hash":"3e9af02ca14cc9e5098b1b148583dee50e0a28b8","modified":1680452666329},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1680452666424},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1680452666424},{"_id":"public/js/click_show_text.js","hash":"613c5e7851df10317da8ac50ec91b26a3e2ef372","modified":1680452666454},{"_id":"public/css/my.css","hash":"405d61aa393c79aeb2033ef227fc7beb7b20eff6","modified":1680452666454},{"_id":"public/js/matery.js","hash":"c5a9c4fae16126cae80719e7435705840718b628","modified":1680452666454},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1680452666454},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1680452666454},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1680452666454},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1680452666454},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"b74a381adf6ef8404d6a0452c2b9f44b47219c80","modified":1680452666454},{"_id":"public/libs/codeBlock/codeLang.js","hash":"ea8b51e4d75e7b2cd63e4d5bcb8db2cf7f23f5db","modified":1680452666454},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"215910dc8f63fd50b97957e5fcdc8480aa2728cb","modified":1680452666455},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1680452666455},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1680452666455},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1680452666455},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1680452666455},{"_id":"public/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1680452666455},{"_id":"public/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1680452666456},{"_id":"public/libs/others/snow.js","hash":"7f3b1ad2f64d4473210a2c3218893649c73c980e","modified":1680452666456},{"_id":"public/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1680452666457},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1680452666457},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1680452666457},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1680452666457},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1680452666457},{"_id":"public/css/matery.css","hash":"9177986b225313e4a986a9ff35085104e5886b2a","modified":1680452666457},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1680452666457},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1680452666458},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1680452666458},{"_id":"public/libs/codeBlock/clipboard.min.js","hash":"9cd57c67fbd3e3067f80793ef8445f5ff7783563","modified":1680452666458},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1680452666458},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1680452666459},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1680452666459},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1680452666459},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1680452666460},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1680452666460},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1680452666460},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1680452666461},{"_id":"public/libs/valine/Valine.min.js","hash":"4e34802ccbb59f1daa58a62241ff57f923e50600","modified":1680452666461},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1680452666461},{"_id":"public/libs/materialize/materialize.min.css","hash":"4d46df5f22cbc24eefa76228c7ee308dc3585594","modified":1680452666461},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1680452666461},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1680452666462},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1680452666462},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1680452666463},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1680452666464},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1680452666464},{"_id":"public/medias/featureimages/0.jpg","hash":"4e9f83cbe1575a44fe9315f937e7505ed05b6920","modified":1680452666465},{"_id":"public/medias/featureimages/1.jpg","hash":"aaf5863bed7563a86a6da15cef0b5d44740e449c","modified":1680452666465},{"_id":"public/medias/featureimages/11.jpg","hash":"4e4ed3d6f8466b3362cbaaa04dc31b8859d3e202","modified":1680452666465},{"_id":"public/medias/featureimages/2.jpg","hash":"8567da47271a81b74ca341d170e057bb42f42bf5","modified":1680452666466},{"_id":"public/medias/featureimages/23.jpg","hash":"c2f1f9387db7dd99d3c0e4df42a160d482dde5bd","modified":1680452666466},{"_id":"public/medias/featureimages/24.jpg","hash":"33fc0af42186fa2c0e41712d5e45c716dd47bce6","modified":1680452666467},{"_id":"public/medias/featureimages/28.jpg","hash":"565fb296d8e4e2e520d6f15985f1de33d7bd98c8","modified":1680452666467},{"_id":"public/medias/featureimages/29.jpg","hash":"a8ff01c7f29be6d703040fad7889f5afba1eb844","modified":1680452666467},{"_id":"public/medias/featureimages/30.jpg","hash":"6dfe6d277ec3ef36e8c958a71712702a5be3e4d8","modified":1680452666468},{"_id":"public/medias/featureimages/31.jpg","hash":"50eedc29287470f333612e6f71d88c3121357257","modified":1680452666468},{"_id":"public/medias/featureimages/41.jpg","hash":"51ccac5c36201f1c04f66e5d54babbb21cf5dc5f","modified":1680452666468},{"_id":"public/medias/featureimages/46.jpg","hash":"1e73f8ed0bd91c4443c4f7e57d2ea5cf94d419c6","modified":1680452666469},{"_id":"public/medias/featureimages/6.jpg","hash":"e0eb036bf77aacc91dffea2d75f590f9f1b2b961","modified":1680452666469},{"_id":"public/medias/featureimages/8.jpg","hash":"b04f9b49261b2486260e64e6543da45689e272de","modified":1680452666470},{"_id":"public/medias/reward/wechat.jpg","hash":"010a7b4eaf2113af7660fab39f7b7d2dc2fb314e","modified":1680452666470},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1680452666471},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1680452666471},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1680452666472},{"_id":"public/2022/01/imx6ull-yi-zhi-lvgl-zong-jie/2909691-20220928152209724-1097250473.png","hash":"05d498f7f30591101a53a8c5c95924ff1a84001d","modified":1680452666473},{"_id":"public/2022/01/python-shi-yong-bai-du-fan-yi-de-api/20200302113313981.png","hash":"a3bc848fc823b39cb9304360dabc4113a61ebb40","modified":1680452666474},{"_id":"public/2022/01/imx6ull-yi-zhi-lvgl-zong-jie/2909691-20220928152945955-899676295.png","hash":"9714cee9d41e446e660bc06e1908adad5edd6258","modified":1680452666474},{"_id":"public/2022/01/zhong-hua-tong-shi.shang-gu-shi-xia/20210703105815619.png","hash":"ed38e99ca771a664503c1fc241b65609b190a652","modified":1680452666475},{"_id":"public/2022/01/linux-input-zi-xi-tong/2909691-20220819093409715-1604400596.png","hash":"55b9667906c85b6e35a8306dec17b969ece62590","modified":1680452666476},{"_id":"public/2022/01/zhong-hua-tong-shi.shang-gu-shi-xia/20210703111602157.png","hash":"eed4aad178595cbb24f9d33be2b6b893d29ebe07","modified":1680452666477},{"_id":"public/2022/01/imx6ull-yi-zhi-lvgl-zong-jie/2909691-20220928153305849-1048335725.png","hash":"aeee98d5b5d62bc471f881b6482100864635f667","modified":1680452666477},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1680452666551},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1680452666551},{"_id":"public/medias/featureimages/10.jpg","hash":"53f3eb05edab87ee07c889f26fc550e9b5e5cb91","modified":1680452666551},{"_id":"public/medias/featureimages/20.jpg","hash":"e854df6ea24c22c999216db611dfd3785b76b834","modified":1680452666552},{"_id":"public/medias/featureimages/33.jpg","hash":"851fadf999b21c4e42d7a5e4114a10abd21f81cd","modified":1680452666554},{"_id":"public/medias/featureimages/16.jpg","hash":"87100d52e5077c77f9e74856a1c5330d81708ae3","modified":1680452666554},{"_id":"public/medias/featureimages/26.jpg","hash":"9c2eaf5aff8abdc4e215af96002c8525be9ddd06","modified":1680452666555},{"_id":"public/medias/featureimages/3.jpg","hash":"4cabac02df559a5eb1b9abc8a0359fe6573a738b","modified":1680452666555},{"_id":"public/medias/featureimages/32.jpg","hash":"e440f9bdcdff7c181904b26b2774c48632e4d24a","modified":1680452666556},{"_id":"public/medias/featureimages/34.jpg","hash":"6fca10e13cae2a089909ea266fa6be510e57a2bd","modified":1680452666556},{"_id":"public/medias/featureimages/4.jpg","hash":"d7139f883aad272d619ce181ebcd86672a2a7bdc","modified":1680452666557},{"_id":"public/medias/featureimages/45.jpg","hash":"5c22e8d627f763ebae1d080025aee103383a8460","modified":1680452666557},{"_id":"public/medias/featureimages/5.jpg","hash":"38272cddbb09c70c7785aed877f6c9b45a61262a","modified":1680452666558},{"_id":"public/medias/featureimages/7.jpg","hash":"26833abcdd65e10c48e8d0553cb3543d3e0ca4d8","modified":1680452666558},{"_id":"public/medias/banner/5.jpg","hash":"38272cddbb09c70c7785aed877f6c9b45a61262a","modified":1680452666559},{"_id":"public/medias/reward/alipay.jpg","hash":"bf966a223684650a6c5f1bc5df6d571493e922f3","modified":1680452666559},{"_id":"public/medias/featureimages/44.jpg","hash":"6bca5b340c7e16350e3040da2416f6184ccd64a4","modified":1680452666559},{"_id":"public/medias/featureimages/48.jpg","hash":"13754e6efc8f6db46088d736ed2c290b0d9bfb33","modified":1680452666560},{"_id":"public/medias/featureimages/22.jpg","hash":"2beb56f529f0ce49f36a84d55890b7c0de3d7705","modified":1680452666560},{"_id":"public/medias/featureimages/42.jpg","hash":"c05648a22e1f083d13f40e76fed535f027fae0b6","modified":1680452666561},{"_id":"public/medias/music/avatars/总有一个人要先走.jpg","hash":"2beb56f529f0ce49f36a84d55890b7c0de3d7705","modified":1680452666561},{"_id":"public/2022/01/python-shi-yong-bai-du-fan-yi-de-api/20200302112847600.png","hash":"7826ff6dbdf5ff34629750ce22b0e94cccadef69","modified":1680452666562},{"_id":"public/favicon.png","hash":"8d9bbc4559b4a7d594474fc59789436dd4c28adc","modified":1680452666620},{"_id":"public/medias/featureimages/13.jpg","hash":"1eed284202ae51c4f3051d943b3d97a7602a9fc6","modified":1680452666620},{"_id":"public/medias/featureimages/18.jpg","hash":"b8108799fbf3eadf0462fba04034a277a462018b","modified":1680452666621},{"_id":"public/medias/featureimages/25.jpg","hash":"97930cf52f9e68ccf24d26b383704ca4724dae34","modified":1680452666621},{"_id":"public/medias/featureimages/12.jpg","hash":"29f884076a7fbed6900a1a05c41ffd3ce122a123","modified":1680452666622},{"_id":"public/medias/featureimages/40.jpg","hash":"7a69b037ce05312d9322fe3f11c4d645b88645aa","modified":1680452666623},{"_id":"public/2022/01/python-shi-yong-bai-du-fan-yi-de-api/20200302112753932.png","hash":"6f7c69b14491228187f0b0d593687015b1751112","modified":1680452666624},{"_id":"public/medias/featureimages/43.jpg","hash":"76bf6095d8e92aa5d6a4e2dff4c2d710c61da07e","modified":1680452666703},{"_id":"public/medias/featureimages/17.jpg","hash":"4cbd4926b13132903c465685a127c577b56b2b8b","modified":1680452666704},{"_id":"public/medias/banner/6.jpg","hash":"5be9274e63d6ac02607e3d659fd32532291385fa","modified":1680452666704},{"_id":"public/medias/logo.png","hash":"8d9bbc4559b4a7d594474fc59789436dd4c28adc","modified":1680452666779},{"_id":"public/2022/01/chao-xiang-xi-jie-xi-python-pa-qu-wai-wang-tu-pian/20200302110709393.png","hash":"2ad2b400e4ac4b25e38c950980367bb6b7276066","modified":1680452666780},{"_id":"public/2023/04/xin-jiang/MXAF0695.JPG","hash":"4b854a6ecb431a313e93f8d48df7fd0044aa372c","modified":1680452666783},{"_id":"public/medias/featureimages/39.jpg","hash":"2b914a3b098aa874f68b4fcda7c85613140c6420","modified":1680452666841},{"_id":"public/medias/banner/2.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1680452666841},{"_id":"public/medias/banner/4.jpg","hash":"4d6f31f86966584360bcdbfecb6f6a2ec94f944d","modified":1680452666842},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1680452666843},{"_id":"public/2022/01/imx6ull-yi-zhi-lvgl-zong-jie/2909691-20220928152922659-1842915282.png","hash":"3e599491c205ce9c2473c7cb88ae34ffe5ed810c","modified":1680452666846},{"_id":"public/2022/01/cai-niao-ying-gai-ru-he-kai-shi-she-ji-yi-ge-xiang-mu-de-qian-ru-shi-ruan-jian-jia-gou/20210329201443609.png","hash":"58a7a16ec9b08da3d87fb952be7b90fa42d40b8a","modified":1680452666854},{"_id":"public/medias/avatars/myzhihu.png","hash":"4a9aec7e236615e3b698adfd3b36bc34ec05e5c7","modified":1680452666903},{"_id":"public/medias/banner/1.jpg","hash":"cd3fc47d2042a3277e4b375ad084365abdc28f5d","modified":1680452666983},{"_id":"public/medias/banner/0.jpg","hash":"73bae0e6812c46509b91e3155bd12ce8640b245a","modified":1680452666983},{"_id":"public/medias/featureimages/49.jpg","hash":"90ad50712c339a89402a363288dcd355e98d0fbb","modified":1680452667111},{"_id":"public/2022/01/chao-xiang-xi-jie-xi-python-pa-qu-wai-wang-tu-pian/20200302111109517.png","hash":"3c1684024bc31494b116961152500c0109172a72","modified":1680452667137},{"_id":"public/2023/04/xin-jiang/BBND3773.PNG","hash":"9d51e64746eaf562e333c0c58b1665c87b7e3c94","modified":1680452667158},{"_id":"public/2023/04/xin-jiang/KNLN1045.PNG","hash":"9b81832789db7ed79eceb15cfd62958fe3c81f1e","modified":1680452667174},{"_id":"public/medias/banner/3.jpg","hash":"42a57b512acce7f09f122b6b8c4f85c3803cd438","modified":1680452667200},{"_id":"public/2023/04/xin-jiang/MOVG5083.JPG","hash":"d735c13bacae84426c35f79b31f0d76e56b5dbcb","modified":1680452667267},{"_id":"public/2023/04/xin-jiang/YJUM1401.JPG","hash":"2298f67966321b94c232d69b82a5d0c3725c250b","modified":1680452667302},{"_id":"public/2023/04/xin-jiang/XRBQ0574.JPG","hash":"0a22babef32c3458bf6d3b132fc86fdb92df4ac1","modified":1680452667308},{"_id":"public/2023/04/xin-jiang/ANKG1449.JPG","hash":"5baaa1ab9105091d0118f76229cef42117d346d3","modified":1680452667314},{"_id":"public/2023/04/xin-jiang/IGAX1811.JPG","hash":"b28a4910831f07c5d9a24e7a89f1a13a89c4e499","modified":1680452667326},{"_id":"public/2023/04/xin-jiang/AZQE3071.JPG","hash":"ec500582aece897e57480cf258033db9afa09b4d","modified":1680452667346},{"_id":"public/2023/04/xin-jiang/AQSR2937.JPG","hash":"803cbcd9795224d0fe0f955a183097d5841e7e4a","modified":1680452667356},{"_id":"public/2023/04/xin-jiang/OOGA8835.JPG","hash":"e8cdd2e11e7eb09b7a297f4de0cd25e207be075f","modified":1680452667363},{"_id":"public/2023/04/xin-jiang/MLZW8415.JPG","hash":"ccfbc24851277f2dae1ea805d65e56b625d6cef9","modified":1680452667430},{"_id":"public/2023/04/xin-jiang/BBOD4958.JPG","hash":"d91a8e27fa87b395cf945e442e26b5afa5958529","modified":1680452667438},{"_id":"public/medias/music/总有一个人要先走.mp3","hash":"a9a64e4e6da5bb508be368267c5c1fbbcd1f5b7f","modified":1680452667612}],"Category":[{"name":"linux","_id":"clfzm4la20009zkvq5g3zd4ts"},{"name":"history","_id":"clfzm4lb4000izkvqh49ayymz"},{"name":"python","_id":"clfzm4lbb000pzkvq4aa49fd0"},{"name":"Embedded system","_id":"clfzm4lbh000wzkvqwrigp807"}],"Data":[{"_id":"musics","data":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2023-04-01T10:58:55.632Z","path":"404.html","comments":1,"_id":"clfzm4l0w0000zkvqu5o5th1c","content":"","site":{"data":{"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":""},{"title":"categories","date":"2020-01-01T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-01-01 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2023-04-01T10:58:55.642Z","path":"categories/index.html","comments":1,"_id":"clfzm4l4g0001zkvqo0cbe7z2","content":"","site":{"data":{"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":""},{"title":"archives","date":"2020-01-01T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2020-01-01 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2023-04-01T10:58:55.642Z","path":"archives/index.html","comments":1,"_id":"clfzm4l4i0002zkvq2nz9ulfi","content":"","site":{"data":{"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-01-01T08:41:10.000Z","type":"about","layout":"about","_content":"\n\n# 教育经历\n\n* <b>本科 自动化</b>\n\n2020/09 - 现在\n<b>努力小白</b>\n\n\n\n# 联系方式\n\n* <b>电子邮箱</b>\n845343253@qq.com\n* <b>地址</b>\n太阳系地球中国境内\n* <b>微信</b>\n17675443156\n* <b>QQ</b>\n845343253","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-01-01 16:41:10\ntype: \"about\"\nlayout: \"about\"\n---\n\n\n# 教育经历\n\n* <b>本科 自动化</b>\n\n2020/09 - 现在\n<b>努力小白</b>\n\n\n\n# 联系方式\n\n* <b>电子邮箱</b>\n845343253@qq.com\n* <b>地址</b>\n太阳系地球中国境内\n* <b>微信</b>\n17675443156\n* <b>QQ</b>\n845343253","updated":"2023-04-01T10:58:55.642Z","path":"about/index.html","comments":1,"_id":"clfzm4l4k0003zkvq7vapjnmg","content":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>本科 自动化</b></li>\n</ul>\n<p>2020/09 - 现在<br><b>努力小白</b></p>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:845343253@qq.com\" target=\"_blank\" rel=\"noopener\">845343253@qq.com</a></li>\n<li><b>地址</b><br>太阳系地球中国境内</li>\n<li><b>微信</b><br>17675443156</li>\n<li><b>QQ</b><br>845343253</li>\n</ul>\n","site":{"data":{"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>本科 自动化</b></li>\n</ul>\n<p>2020/09 - 现在<br><b>努力小白</b></p>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:845343253@qq.com\" target=\"_blank\" rel=\"noopener\">845343253@qq.com</a></li>\n<li><b>地址</b><br>太阳系地球中国境内</li>\n<li><b>微信</b><br>17675443156</li>\n<li><b>QQ</b><br>845343253</li>\n</ul>\n"},{"title":"contact","date":"2020-01-01T09:17:02.000Z","type":"contact","layout":"contact","_content":"\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加我联系方式：\n* QQ：**845343253**\n* 微信：**17675443156**\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-01-01 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加我联系方式：\n* QQ：**845343253**\n* 微信：**17675443156**\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址","updated":"2023-04-01T10:58:55.642Z","path":"contact/index.html","comments":1,"_id":"clfzm4l4n0004zkvqx2pa7gfv","content":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加我联系方式：</p>\n<ul>\n<li>QQ：<strong>845343253</strong></li>\n<li>微信：<strong>17675443156</strong></li>\n</ul>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n","site":{"data":{"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加我联系方式：</p>\n<ul>\n<li>QQ：<strong>845343253</strong></li>\n<li>微信：<strong>17675443156</strong></li>\n</ul>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n"},{"title":"gallery","date":"2019-11-30T08:00:17.000Z","type":"gallery","layout":"gallery","_content":"","source":"gallery/index.md","raw":"---\ntitle: gallery\ndate: 2019-11-30 16:00:17\ntype: \"gallery\"\nlayout: \"gallery\"\n---\n","updated":"2023-04-02T08:02:08.359Z","path":"gallery/index.html","comments":1,"_id":"clfzm4l4r0005zkvq5tdzrnzb","content":"","site":{"data":{"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":""},{"title":"tags","date":"2020-01-01T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-01-01 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2023-04-01T10:58:55.642Z","path":"tags/index.html","comments":1,"_id":"clfzm4l4u0006zkvqvl186tnw","content":"","site":{"data":{"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"IMX6ull 移植 lVGL总结","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-01-01T12:59:25.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"<h1>1 ：准备工作</h1>\n<p>硬件：正点原子的Imx6ull开发板</p>\n<p>环境：ubuntu18.0</p>\n<p>lvgl软件地址：<a href=\"git@gitee.com:qian-qiang/imx6ull_lvgl_demo.git\" target=\"_blank\" rel=\"noopener\">git@gitee.com:qian-qiang/imx6ull_lvgl_demo.git</a></p>\n<h1>2：git 厂库修改文件</h1>\n<p>2.1：修改文件lv_drv_config.h</p>\n<p><img src=\"IMX6ull-移植-lVGL总结/2909691-20220928151916481-1456634923.png\" alt=\"\" height=\"513\" width=\"1084\" /></p>\n<p><img src=\"IMX6ull-移植-lVGL总结/2909691-20220928152209724-1097250473.png\" alt=\"\" height=\"368\" width=\"1087\" /></p>\n<p><img src=\"IMX6ull-移植-lVGL总结/2909691-20220928153140065-1807119912.png\" alt=\"\" height=\"177\" width=\"1081\" /></p>\n<p id=\"1664350186406\"></p>\n<p id=\"1664349615994\">2.2：修改文件lv_conf.h</p>\n<p><img src=\"IMX6ull-移植-lVGL总结/2909691-20220928152957065-501054685.png\" alt=\"\" height=\"387\" width=\"1664\" /></p>\n<p><img src=\"IMX6ull-移植-lVGL总结/2909691-20220928152945955-899676295.png\" alt=\"\" height=\"843\" width=\"1671\" /></p>\n<p><img src=\"IMX6ull-移植-lVGL总结/2909691-20220928152922659-1842915282.png\" alt=\"\" /></p>\n<p id=\"1664350048873\">2.3：修改文件main.c</p>\n<p><img src=\"IMX6ull-移植-lVGL总结/2909691-20220928153305849-1048335725.png\" alt=\"\" /></p>\n<h1>3：make</h1>\n<p>由于环境的问题 make过程中可能有问题 上百度应该改都能解决 最后生成demo文件&nbsp;</p>\n<p><img src=\"IMX6ull-移植-lVGL总结/2909691-20220928153451220-1274979267.png\" alt=\"\" /></p>\n<h1>4：scp到开发板运行即可</h1>\n<p>&nbsp;</p>\n<p id=\"1664350272125\"></p>\n<p id=\"1664349445067\"></p>\n<p>&nbsp;</p>\n","source":"_posts/2022/01/IMX6ull-移植-lVGL总结.md","raw":"---\ntitle: IMX6ull 移植 lVGL总结\npermalink: IMX6ull 移植 lVGL总结\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-01-01 20:59:25\npassword:\nsummary:\ntags:\n- linux\n- imx6ull\ncategories:\n- linux\nkeywords:\ndescription:\n---\n<h1>1 ：准备工作</h1>\n<p>硬件：正点原子的Imx6ull开发板</p>\n<p>环境：ubuntu18.0</p>\n<p>lvgl软件地址：<a href=\"git@gitee.com:qian-qiang/imx6ull_lvgl_demo.git\" target=\"_blank\" rel=\"noopener\">git@gitee.com:qian-qiang/imx6ull_lvgl_demo.git</a></p>\n<h1>2：git 厂库修改文件</h1>\n<p>2.1：修改文件lv_drv_config.h</p>\n<p><img src=\"IMX6ull-移植-lVGL总结/2909691-20220928151916481-1456634923.png\" alt=\"\" height=\"513\" width=\"1084\" /></p>\n<p><img src=\"IMX6ull-移植-lVGL总结/2909691-20220928152209724-1097250473.png\" alt=\"\" height=\"368\" width=\"1087\" /></p>\n<p><img src=\"IMX6ull-移植-lVGL总结/2909691-20220928153140065-1807119912.png\" alt=\"\" height=\"177\" width=\"1081\" /></p>\n<p id=\"1664350186406\"></p>\n<p id=\"1664349615994\">2.2：修改文件lv_conf.h</p>\n<p><img src=\"IMX6ull-移植-lVGL总结/2909691-20220928152957065-501054685.png\" alt=\"\" height=\"387\" width=\"1664\" /></p>\n<p><img src=\"IMX6ull-移植-lVGL总结/2909691-20220928152945955-899676295.png\" alt=\"\" height=\"843\" width=\"1671\" /></p>\n<p><img src=\"IMX6ull-移植-lVGL总结/2909691-20220928152922659-1842915282.png\" alt=\"\" /></p>\n<p id=\"1664350048873\">2.3：修改文件main.c</p>\n<p><img src=\"IMX6ull-移植-lVGL总结/2909691-20220928153305849-1048335725.png\" alt=\"\" /></p>\n<h1>3：make</h1>\n<p>由于环境的问题 make过程中可能有问题 上百度应该改都能解决 最后生成demo文件&nbsp;</p>\n<p><img src=\"IMX6ull-移植-lVGL总结/2909691-20220928153451220-1274979267.png\" alt=\"\" /></p>\n<h1>4：scp到开发板运行即可</h1>\n<p>&nbsp;</p>\n<p id=\"1664350272125\"></p>\n<p id=\"1664349445067\"></p>\n<p>&nbsp;</p>\n","slug":"IMX6ull 移植 lVGL总结","published":1,"updated":"2023-04-02T15:28:57.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzm4l9q0007zkvq2z0tpc4d","content":"<h1>1 ：准备工作</h1>\n<p>硬件：正点原子的Imx6ull开发板</p>\n<p>环境：ubuntu18.0</p>\n<p>lvgl软件地址：<a href=\"git@gitee.com:qian-qiang/imx6ull_lvgl_demo.git\" target=\"_blank\" rel=\"noopener\">git@gitee.com:qian-qiang/imx6ull_lvgl_demo.git</a></p>\n<h1>2：git 厂库修改文件</h1>\n<p>2.1：修改文件lv_drv_config.h</p>\n<p><img src=\"/.com//2909691-20220928151916481-1456634923.png\" alt height=\"513\" width=\"1084\"></p>\n<p><img src=\"/.com//2909691-20220928152209724-1097250473.png\" alt height=\"368\" width=\"1087\"></p>\n<p><img src=\"/.com//2909691-20220928153140065-1807119912.png\" alt height=\"177\" width=\"1081\"></p>\n<p id=\"1664350186406\"></p>\n<p id=\"1664349615994\">2.2：修改文件lv_conf.h</p>\n<p><img src=\"/.com//2909691-20220928152957065-501054685.png\" alt height=\"387\" width=\"1664\"></p>\n<p><img src=\"/.com//2909691-20220928152945955-899676295.png\" alt height=\"843\" width=\"1671\"></p>\n<p><img src=\"/.com//2909691-20220928152922659-1842915282.png\" alt></p>\n<p id=\"1664350048873\">2.3：修改文件main.c</p>\n<p><img src=\"/.com//2909691-20220928153305849-1048335725.png\" alt></p>\n<h1>3：make</h1>\n<p>由于环境的问题 make过程中可能有问题 上百度应该改都能解决 最后生成demo文件&nbsp;</p>\n<p><img src=\"/.com//2909691-20220928153451220-1274979267.png\" alt></p>\n<h1>4：scp到开发板运行即可</h1>\n<p>&nbsp;</p>\n<p id=\"1664350272125\"></p>\n<p id=\"1664349445067\"></p>\n<p>&nbsp;</p>\n","site":{"data":{"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h1>1 ：准备工作</h1>\n<p>硬件：正点原子的Imx6ull开发板</p>\n<p>环境：ubuntu18.0</p>\n<p>lvgl软件地址：<a href=\"git@gitee.com:qian-qiang/imx6ull_lvgl_demo.git\" target=\"_blank\" rel=\"noopener\">git@gitee.com:qian-qiang/imx6ull_lvgl_demo.git</a></p>\n<h1>2：git 厂库修改文件</h1>\n<p>2.1：修改文件lv_drv_config.h</p>\n<p><img src=\"/.com//2909691-20220928151916481-1456634923.png\" alt height=\"513\" width=\"1084\"></p>\n<p><img src=\"/.com//2909691-20220928152209724-1097250473.png\" alt height=\"368\" width=\"1087\"></p>\n<p><img src=\"/.com//2909691-20220928153140065-1807119912.png\" alt height=\"177\" width=\"1081\"></p>\n<p id=\"1664350186406\"></p>\n<p id=\"1664349615994\">2.2：修改文件lv_conf.h</p>\n<p><img src=\"/.com//2909691-20220928152957065-501054685.png\" alt height=\"387\" width=\"1664\"></p>\n<p><img src=\"/.com//2909691-20220928152945955-899676295.png\" alt height=\"843\" width=\"1671\"></p>\n<p><img src=\"/.com//2909691-20220928152922659-1842915282.png\" alt></p>\n<p id=\"1664350048873\">2.3：修改文件main.c</p>\n<p><img src=\"/.com//2909691-20220928153305849-1048335725.png\" alt></p>\n<h1>3：make</h1>\n<p>由于环境的问题 make过程中可能有问题 上百度应该改都能解决 最后生成demo文件&nbsp;</p>\n<p><img src=\"/.com//2909691-20220928153451220-1274979267.png\" alt></p>\n<h1>4：scp到开发板运行即可</h1>\n<p>&nbsp;</p>\n<p id=\"1664350272125\"></p>\n<p id=\"1664349445067\"></p>\n<p>&nbsp;</p>\n"},{"title":"linux线程","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-01-01T13:08:57.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"<blockquote>\n<p>linux内核版本0.11</p>\n</blockquote>\n<h1>1：main</h1>\n<p>首先选出一号选手main函数，代码上和线程相关的主要是以下代码</p>\n<div class=\"cnblogs_highlighted\">\n<pre class=\"brush:cpp;gutter:true;\">\n\tvoid main(void) {    \n    move_to_user_mode();\n    if (!fork()) {\n        init();\n    }\n    for(;;) pause();\n}\n</pre>\n</div>\n<h1>&nbsp;2：<span style=\"letter-spacing: 0.5px;\"><strong>move_to_user_mode</strong></span></h1>\n<p><span style=\"letter-spacing: 0.5px; font-size: 15px;\"><span style=\"letter-spacing: 0.5px;\">这行代码的意思直接说非常简单，就是<strong>从内核态转变为了用户态</strong></span></span></p>\n<p>&nbsp;</p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">#define move_to_user_mode() \\\n__asm__ (\"movl %%esp,%%eax\\n\\t\" \\\n\t\"pushl $0x17\\n\\t\" \\\n\t\"pushl %%eax\\n\\t\" \\\n\t\"pushfl\\n\\t\" \\\n\t\"pushl $0x0f\\n\\t\" \\\n\t\"pushl $1f\\n\\t\" \\\n\t\"iret\\n\" \\\n\t\"1:\\tmovl $0x17,%%eax\\n\\t\" \\\n\t\"movw %%ax,%%ds\\n\\t\" \\\n\t\"movw %%ax,%%es\\n\\t\" \\\n\t\"movw %%ax,%%fs\\n\\t\" \\\n\t\"movw %%ax,%%gs\" \\\n\t:::\"ax\")\n</pre>\n</div>\n<h1>&nbsp;3：fork</h1>\n<p>fork函数是被系统调用使用的 具体路径如下：</p>\n<p>main.c&nbsp; :&nbsp; static inline _syscall0(int,fork)&nbsp; 将fork绑定到_sys_fork</p>\n<p>　　system_call.s&nbsp; :&nbsp; _sys_fork:(调用函数_find_empty_process和_copy_process)</p>\n<p><img src=\"linux线程/2909691-20221018201940242-320806714.png\" alt=\"\" /></p>\n<p>总结作用：</p>\n<p>1：在task链表中找到一个进程空位并存放当前的进程（_find_empty_process）</p>\n<p>2：创建一个tsak_struct</p>\n<p>3：设置task_struct（_copy_process）</p>\n<p>这里就出现一个概念：<span style=\"font-size: 14px; letter-spacing: 0.5px;\">由于我们现在只有 0 号进程，且 task[] 除了 0 号索引位置，其他地方都是空的，所以这个方法运行完，last_pid 就是 1，也就是新进程被分配的 pid 就是 1</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\"><img src=\"linux线程/2909691-20221018202536805-171723429.png\" alt=\"\" /></span></p>\n<h1>4:init()</h1>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">void init(void)\n{\n\tint pid,i;\n\n\tsetup((void *) &amp;drive_info);\n\t(void) open(\"/dev/tty0\",O_RDWR,0); //打开tty0 标准输入控制台\n\t(void) dup(0);//打开tty0 标准输出控制台\n\t(void) dup(0);//打开标准错误控制台\n\tprintf(\"%d buffers = %d bytes buffer space\\n\\r\",NR_BUFFERS,\n\t\tNR_BUFFERS*BLOCK_SIZE);\n\tprintf(\"Free mem: %d bytes\\n\\r\",memory_end-main_memory_start);\n\t//又创建一个进程（2号进程）<br />　　　　 if (!(pid=fork())) {\n\t\tclose(0);\n\t\tif (open(\"/etc/rc\",O_RDONLY,0)) ///etc/rc文件\n\t\t\t_exit(1);\n\t\texecve(\"/bin/sh\",argv_rc,envp_rc);//执行sh\n\t\t_exit(2);\n\t}\n\tif (pid&gt;0)\n\t\twhile (pid != wait(&amp;i))//等待父进程退出\n\t\t\t/* nothing */;\n\twhile (1) {<br />　　　　　　　　 //又创建一个进程 主要是害怕上面的进程创建失败 再创建一次\n\t\tif ((pid=fork())&lt;0) {\n\t\t\tprintf(\"Fork failed in init\\r\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tif (!pid) {\n\t\t\tclose(0);close(1);close(2);\n\t\t\tsetsid();\n\t\t\t(void) open(\"/dev/tty0\",O_RDWR,0);\n\t\t\t(void) dup(0);\n\t\t\t(void) dup(0);\n\t\t\t_exit(execve(\"/bin/sh\",argv,envp));\n\t\t}\n\t\twhile (1)\n\t\t\tif (pid == wait(&amp;i))  //等待父进程退出 但是零号进程不可能退出\n\t\t\t\tbreak;\n\t\tprintf(\"\\n\\rchild %d died with code %04x\\n\\r\",pid,i);\n\t\tsync();\n\t}\n\t_exit(0);\t/* NOTE! _exit, not exit() */\n}\n</pre>\n</div>\n<p>&nbsp;总结</p>\n<p>1：打开标准输出 输入 错误控制台的句柄</p>\n<p>2：创建2号进程 并在中执行etc/rc文件 执行sh程序</p>\n<p>3：零号进程不可能退出 如果退出就执行for(;;) pause();</p>\n<p>&nbsp;</p>\n<p>目前为止main函数的执行完成 具体逻辑如下：</p>\n<p><img src=\"linux线程/2909691-20221018204634847-2097816257.png\" alt=\"\" /></p>\n<p>&nbsp;</p>\n<p><strong>Q:进程如何调度的</strong></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">不知道你是否还记得，定时器和时钟中断，再mian函数的前面执行了讲的 sched_init 函数。</span></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">schedule.c\n\n#define HZ 100\n</pre>\n</div>\n<p><span style=\"font-size: 14px;\"><span style=\"letter-spacing: 0.5px;\">这个间隔时间被设置为 10 ms，也就是 100 Hz。</span> <span style=\"letter-spacing: 0.5px;\">发起的中断叫时钟中断，其中断向量号被设置为了timer_interrupt 。</span><span style=\"letter-spacing: 0.5px;\"><span style=\"letter-spacing: 0.5px;\">这样，中断来临时，CPU 会查找到中断处理函数，并跳转过去执行。</span></span></span></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">system_call.s\n\n_timer_interrupt:\n    ...\n    // 增加系统滴答数\n    incl _jiffies\n    ...\n    // 调用函数 do_timer\n    call _do_timer\n    ...\n</pre>\n</div>\n<p>&nbsp;<span style=\"letter-spacing: 0.5px;\">这个函数做了两件事，一个是将<strong>系统滴答数</strong>这个变量 <strong>jiffies</strong> 加一，一个是调用了另一个函数 <strong>do_timer</strong>。</span></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">sched.c\n\nvoid do_timer(long cpl) {\n    ...\n    // 当前线程还有剩余时间片，直接返回\n    if ((--current-&gt;counter)&gt;0) return;\n    // 若没有剩余时间片，调度\n    schedule();\n}\n</pre>\n</div>\n<p><span style=\"font-size: 14px;\">&nbsp;<span style=\"letter-spacing: 0.5px;\">do_timer 最重要的部分就是上面这段代码，非常简单。</span></span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"letter-spacing: 0.5px;\">首先将当先进程的时间片 -1，然后判断：</span></span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"letter-spacing: 0.5px;\">如果时间片仍然大于零，则什么都不做直接返回。</span></span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"letter-spacing: 0.5px;\">如果时间片已经为零，则调用 schedule()，很明显，这就是进行进程调度的主干。</span></span></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">void schedule(void) {\n    int i, next, c;\n    struct task_struct ** p;\n    ...\n    while (1) {\n        c = -1;\n        next = 0;\n        i = NR_TASKS;\n        p = &amp;task[NR_TASKS];\n        while (--i) {\n            if (!*--p)\n                continue;\n            if ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; c)\n                c = (*p)-&gt;counter, next = i;\n        }\n        if (c) break;\n        for(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)\n            if (*p)\n                (*p)-&gt;counter = ((*p)-&gt;counter &gt;&gt; 1) +\n                        (*p)-&gt;priority;\n    }\n    switch_to(next);\n}\n</pre>\n</div>\n<p>&nbsp;很简答，这个函数就做了三件事：</p>\n<p><span style=\"font-size: 14px;\"><strong><span style=\"letter-spacing: 0.5px;\">1.</span></strong><span style=\"letter-spacing: 0.5px;\"> 拿到剩余时间片（counter的值）最大且在 runnable 状态（state = 0）的进程号 next。</span></span></p>\n<p><span style=\"letter-spacing: 0.5px; font-size: 14px;\"><strong>2.</strong><span style=\"letter-spacing: 0.5px;\"> 如果所有 runnable 进程时间片都为 0，则将所有进程（注意不仅仅是 runnable 的进程）的 counter 重新赋值（counter = counter/2 + priority），然后再次执行步骤 1。</span></span></p>\n<p><span style=\"letter-spacing: 0.5px; font-size: 14px;\"><strong>3.</strong><span style=\"letter-spacing: 0.5px;\"> 最后拿到了一个进程号 next，调用了 switch_to(next) 这个方法，就切换到了这个进程去执行了。</span></span></p>\n<p>&nbsp;总结一下：</p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">罪魁祸首的，就是那个每 10ms 触发一次的定时器滴答。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">而这个滴答将会给 CPU 产生一个时钟中断信号。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">而这个中断信号会使 CPU 查找中断向量表，找到操作系统写好的一个时钟中断处理函数 do_timer。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">do_timer 会首先将当前进程的 counter 变量 -1，如果 counter 此时仍然大于 0，则就此结束。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">但如果 counter = 0 了，就开始进行进程的调度。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">进程调度就是找到所有处于 RUNNABLE 状态的进程，并找到一个 counter 值最大的进程，把它丢进 switch_to 函数的入参里。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">switch_to 这个终极函数，会保存当前进程上下文，恢复要跳转到的这个进程的上下文，同时使得 CPU 跳转到这个进程的偏移地址处。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">接着，这个进程就舒舒服服地运行了起来，等待着下一次时钟中断的来临。</span></p>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n","source":"_posts/2022/01/linux线程.md","raw":"---\ntitle: linux线程\npermalink: linux线程\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-01-01 21:08:57\npassword:\nsummary:\ntags:\n- linux\n- thread\ncategories:\n- linux\nkeywords:\ndescription:\n---\n<blockquote>\n<p>linux内核版本0.11</p>\n</blockquote>\n<h1>1：main</h1>\n<p>首先选出一号选手main函数，代码上和线程相关的主要是以下代码</p>\n<div class=\"cnblogs_highlighted\">\n<pre class=\"brush:cpp;gutter:true;\">\n\tvoid main(void) {    \n    move_to_user_mode();\n    if (!fork()) {\n        init();\n    }\n    for(;;) pause();\n}\n</pre>\n</div>\n<h1>&nbsp;2：<span style=\"letter-spacing: 0.5px;\"><strong>move_to_user_mode</strong></span></h1>\n<p><span style=\"letter-spacing: 0.5px; font-size: 15px;\"><span style=\"letter-spacing: 0.5px;\">这行代码的意思直接说非常简单，就是<strong>从内核态转变为了用户态</strong></span></span></p>\n<p>&nbsp;</p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">#define move_to_user_mode() \\\n__asm__ (\"movl %%esp,%%eax\\n\\t\" \\\n\t\"pushl $0x17\\n\\t\" \\\n\t\"pushl %%eax\\n\\t\" \\\n\t\"pushfl\\n\\t\" \\\n\t\"pushl $0x0f\\n\\t\" \\\n\t\"pushl $1f\\n\\t\" \\\n\t\"iret\\n\" \\\n\t\"1:\\tmovl $0x17,%%eax\\n\\t\" \\\n\t\"movw %%ax,%%ds\\n\\t\" \\\n\t\"movw %%ax,%%es\\n\\t\" \\\n\t\"movw %%ax,%%fs\\n\\t\" \\\n\t\"movw %%ax,%%gs\" \\\n\t:::\"ax\")\n</pre>\n</div>\n<h1>&nbsp;3：fork</h1>\n<p>fork函数是被系统调用使用的 具体路径如下：</p>\n<p>main.c&nbsp; :&nbsp; static inline _syscall0(int,fork)&nbsp; 将fork绑定到_sys_fork</p>\n<p>　　system_call.s&nbsp; :&nbsp; _sys_fork:(调用函数_find_empty_process和_copy_process)</p>\n<p><img src=\"linux线程/2909691-20221018201940242-320806714.png\" alt=\"\" /></p>\n<p>总结作用：</p>\n<p>1：在task链表中找到一个进程空位并存放当前的进程（_find_empty_process）</p>\n<p>2：创建一个tsak_struct</p>\n<p>3：设置task_struct（_copy_process）</p>\n<p>这里就出现一个概念：<span style=\"font-size: 14px; letter-spacing: 0.5px;\">由于我们现在只有 0 号进程，且 task[] 除了 0 号索引位置，其他地方都是空的，所以这个方法运行完，last_pid 就是 1，也就是新进程被分配的 pid 就是 1</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\"><img src=\"linux线程/2909691-20221018202536805-171723429.png\" alt=\"\" /></span></p>\n<h1>4:init()</h1>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">void init(void)\n{\n\tint pid,i;\n\n\tsetup((void *) &amp;drive_info);\n\t(void) open(\"/dev/tty0\",O_RDWR,0); //打开tty0 标准输入控制台\n\t(void) dup(0);//打开tty0 标准输出控制台\n\t(void) dup(0);//打开标准错误控制台\n\tprintf(\"%d buffers = %d bytes buffer space\\n\\r\",NR_BUFFERS,\n\t\tNR_BUFFERS*BLOCK_SIZE);\n\tprintf(\"Free mem: %d bytes\\n\\r\",memory_end-main_memory_start);\n\t//又创建一个进程（2号进程）<br />　　　　 if (!(pid=fork())) {\n\t\tclose(0);\n\t\tif (open(\"/etc/rc\",O_RDONLY,0)) ///etc/rc文件\n\t\t\t_exit(1);\n\t\texecve(\"/bin/sh\",argv_rc,envp_rc);//执行sh\n\t\t_exit(2);\n\t}\n\tif (pid&gt;0)\n\t\twhile (pid != wait(&amp;i))//等待父进程退出\n\t\t\t/* nothing */;\n\twhile (1) {<br />　　　　　　　　 //又创建一个进程 主要是害怕上面的进程创建失败 再创建一次\n\t\tif ((pid=fork())&lt;0) {\n\t\t\tprintf(\"Fork failed in init\\r\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tif (!pid) {\n\t\t\tclose(0);close(1);close(2);\n\t\t\tsetsid();\n\t\t\t(void) open(\"/dev/tty0\",O_RDWR,0);\n\t\t\t(void) dup(0);\n\t\t\t(void) dup(0);\n\t\t\t_exit(execve(\"/bin/sh\",argv,envp));\n\t\t}\n\t\twhile (1)\n\t\t\tif (pid == wait(&amp;i))  //等待父进程退出 但是零号进程不可能退出\n\t\t\t\tbreak;\n\t\tprintf(\"\\n\\rchild %d died with code %04x\\n\\r\",pid,i);\n\t\tsync();\n\t}\n\t_exit(0);\t/* NOTE! _exit, not exit() */\n}\n</pre>\n</div>\n<p>&nbsp;总结</p>\n<p>1：打开标准输出 输入 错误控制台的句柄</p>\n<p>2：创建2号进程 并在中执行etc/rc文件 执行sh程序</p>\n<p>3：零号进程不可能退出 如果退出就执行for(;;) pause();</p>\n<p>&nbsp;</p>\n<p>目前为止main函数的执行完成 具体逻辑如下：</p>\n<p><img src=\"linux线程/2909691-20221018204634847-2097816257.png\" alt=\"\" /></p>\n<p>&nbsp;</p>\n<p><strong>Q:进程如何调度的</strong></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">不知道你是否还记得，定时器和时钟中断，再mian函数的前面执行了讲的 sched_init 函数。</span></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">schedule.c\n\n#define HZ 100\n</pre>\n</div>\n<p><span style=\"font-size: 14px;\"><span style=\"letter-spacing: 0.5px;\">这个间隔时间被设置为 10 ms，也就是 100 Hz。</span> <span style=\"letter-spacing: 0.5px;\">发起的中断叫时钟中断，其中断向量号被设置为了timer_interrupt 。</span><span style=\"letter-spacing: 0.5px;\"><span style=\"letter-spacing: 0.5px;\">这样，中断来临时，CPU 会查找到中断处理函数，并跳转过去执行。</span></span></span></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">system_call.s\n\n_timer_interrupt:\n    ...\n    // 增加系统滴答数\n    incl _jiffies\n    ...\n    // 调用函数 do_timer\n    call _do_timer\n    ...\n</pre>\n</div>\n<p>&nbsp;<span style=\"letter-spacing: 0.5px;\">这个函数做了两件事，一个是将<strong>系统滴答数</strong>这个变量 <strong>jiffies</strong> 加一，一个是调用了另一个函数 <strong>do_timer</strong>。</span></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">sched.c\n\nvoid do_timer(long cpl) {\n    ...\n    // 当前线程还有剩余时间片，直接返回\n    if ((--current-&gt;counter)&gt;0) return;\n    // 若没有剩余时间片，调度\n    schedule();\n}\n</pre>\n</div>\n<p><span style=\"font-size: 14px;\">&nbsp;<span style=\"letter-spacing: 0.5px;\">do_timer 最重要的部分就是上面这段代码，非常简单。</span></span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"letter-spacing: 0.5px;\">首先将当先进程的时间片 -1，然后判断：</span></span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"letter-spacing: 0.5px;\">如果时间片仍然大于零，则什么都不做直接返回。</span></span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"letter-spacing: 0.5px;\">如果时间片已经为零，则调用 schedule()，很明显，这就是进行进程调度的主干。</span></span></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">void schedule(void) {\n    int i, next, c;\n    struct task_struct ** p;\n    ...\n    while (1) {\n        c = -1;\n        next = 0;\n        i = NR_TASKS;\n        p = &amp;task[NR_TASKS];\n        while (--i) {\n            if (!*--p)\n                continue;\n            if ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; c)\n                c = (*p)-&gt;counter, next = i;\n        }\n        if (c) break;\n        for(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)\n            if (*p)\n                (*p)-&gt;counter = ((*p)-&gt;counter &gt;&gt; 1) +\n                        (*p)-&gt;priority;\n    }\n    switch_to(next);\n}\n</pre>\n</div>\n<p>&nbsp;很简答，这个函数就做了三件事：</p>\n<p><span style=\"font-size: 14px;\"><strong><span style=\"letter-spacing: 0.5px;\">1.</span></strong><span style=\"letter-spacing: 0.5px;\"> 拿到剩余时间片（counter的值）最大且在 runnable 状态（state = 0）的进程号 next。</span></span></p>\n<p><span style=\"letter-spacing: 0.5px; font-size: 14px;\"><strong>2.</strong><span style=\"letter-spacing: 0.5px;\"> 如果所有 runnable 进程时间片都为 0，则将所有进程（注意不仅仅是 runnable 的进程）的 counter 重新赋值（counter = counter/2 + priority），然后再次执行步骤 1。</span></span></p>\n<p><span style=\"letter-spacing: 0.5px; font-size: 14px;\"><strong>3.</strong><span style=\"letter-spacing: 0.5px;\"> 最后拿到了一个进程号 next，调用了 switch_to(next) 这个方法，就切换到了这个进程去执行了。</span></span></p>\n<p>&nbsp;总结一下：</p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">罪魁祸首的，就是那个每 10ms 触发一次的定时器滴答。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">而这个滴答将会给 CPU 产生一个时钟中断信号。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">而这个中断信号会使 CPU 查找中断向量表，找到操作系统写好的一个时钟中断处理函数 do_timer。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">do_timer 会首先将当前进程的 counter 变量 -1，如果 counter 此时仍然大于 0，则就此结束。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">但如果 counter = 0 了，就开始进行进程的调度。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">进程调度就是找到所有处于 RUNNABLE 状态的进程，并找到一个 counter 值最大的进程，把它丢进 switch_to 函数的入参里。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">switch_to 这个终极函数，会保存当前进程上下文，恢复要跳转到的这个进程的上下文，同时使得 CPU 跳转到这个进程的偏移地址处。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">接着，这个进程就舒舒服服地运行了起来，等待着下一次时钟中断的来临。</span></p>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n","slug":"linux线程","published":1,"updated":"2023-04-02T15:28:57.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzm4l9y0008zkvqg5j13gw1","content":"<blockquote>\n<p>linux内核版本0.11</p>\n</blockquote>\n<h1>1：main</h1>\n<p>首先选出一号选手main函数，代码上和线程相关的主要是以下代码</p>\n<div class=\"cnblogs_highlighted\">\n<pre class=\"brush:cpp;gutter:true;\">\n    void main(void) {    \n    move_to_user_mode();\n    if (!fork()) {\n        init();\n    }\n    for(;;) pause();\n}\n</pre>\n</div>\n<h1>&nbsp;2：<span style=\"letter-spacing: 0.5px;\"><strong>move_to_user_mode</strong></span></h1>\n<p><span style=\"letter-spacing: 0.5px; font-size: 15px;\"><span style=\"letter-spacing: 0.5px;\">这行代码的意思直接说非常简单，就是<strong>从内核态转变为了用户态</strong></span></span></p>\n<p>&nbsp;</p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">#define move_to_user_mode() \\\n__asm__ (\"movl %%esp,%%eax\\n\\t\" \\\n    \"pushl $0x17\\n\\t\" \\\n    \"pushl %%eax\\n\\t\" \\\n    \"pushfl\\n\\t\" \\\n    \"pushl $0x0f\\n\\t\" \\\n    \"pushl $1f\\n\\t\" \\\n    \"iret\\n\" \\\n    \"1:\\tmovl $0x17,%%eax\\n\\t\" \\\n    \"movw %%ax,%%ds\\n\\t\" \\\n    \"movw %%ax,%%es\\n\\t\" \\\n    \"movw %%ax,%%fs\\n\\t\" \\\n    \"movw %%ax,%%gs\" \\\n    :::\"ax\")\n</pre>\n</div>\n<h1>&nbsp;3：fork</h1>\n<p>fork函数是被系统调用使用的 具体路径如下：</p>\n<p>main.c&nbsp; :&nbsp; static inline _syscall0(int,fork)&nbsp; 将fork绑定到_sys_fork</p>\n<p>　　system_call.s&nbsp; :&nbsp; _sys_fork:(调用函数_find_empty_process和_copy_process)</p>\n<p><img src=\"/.com//2909691-20221018201940242-320806714.png\" alt></p>\n<p>总结作用：</p>\n<p>1：在task链表中找到一个进程空位并存放当前的进程（_find_empty_process）</p>\n<p>2：创建一个tsak_struct</p>\n<p>3：设置task_struct（_copy_process）</p>\n<p>这里就出现一个概念：<span style=\"font-size: 14px; letter-spacing: 0.5px;\">由于我们现在只有 0 号进程，且 task[] 除了 0 号索引位置，其他地方都是空的，所以这个方法运行完，last_pid 就是 1，也就是新进程被分配的 pid 就是 1</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\"><img src=\"/.com//2909691-20221018202536805-171723429.png\" alt></span></p>\n<h1>4:init()</h1>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">void init(void)\n{\n    int pid,i;\n\n<pre><code>setup((void *) &amp;amp;drive_info);\n(void) open(&quot;/dev/tty0&quot;,O_RDWR,0); //打开tty0 标准输入控制台\n(void) dup(0);//打开tty0 标准输出控制台\n(void) dup(0);//打开标准错误控制台\nprintf(&quot;%d buffers = %d bytes buffer space\\n\\r&quot;,NR_BUFFERS,\n    NR_BUFFERS*BLOCK_SIZE);\nprintf(&quot;Free mem: %d bytes\\n\\r&quot;,memory_end-main_memory_start);\n//又创建一个进程（2号进程）&lt;br /&gt;　　　　 if (!(pid=fork())) {\n    close(0);\n    if (open(&quot;/etc/rc&quot;,O_RDONLY,0)) ///etc/rc文件\n        _exit(1);\n    execve(&quot;/bin/sh&quot;,argv_rc,envp_rc);//执行sh\n    _exit(2);\n}\nif (pid&amp;gt;0)\n    while (pid != wait(&amp;amp;i))//等待父进程退出\n        /* nothing */;\nwhile (1) {&lt;br /&gt;　　　　　　　　 //又创建一个进程 主要是害怕上面的进程创建失败 再创建一次\n    if ((pid=fork())&amp;lt;0) {\n        printf(&quot;Fork failed in init\\r\\n&quot;);\n        continue;\n    }\n    if (!pid) {\n        close(0);close(1);close(2);\n        setsid();\n        (void) open(&quot;/dev/tty0&quot;,O_RDWR,0);\n        (void) dup(0);\n        (void) dup(0);\n        _exit(execve(&quot;/bin/sh&quot;,argv,envp));\n    }\n    while (1)\n        if (pid == wait(&amp;amp;i))  //等待父进程退出 但是零号进程不可能退出\n            break;\n    printf(&quot;\\n\\rchild %d died with code %04x\\n\\r&quot;,pid,i);\n    sync();\n}\n_exit(0);    /* NOTE! _exit, not exit() */</code></pre><p>}<br></p></pre><p></p>\n</div>\n<p>&nbsp;总结</p>\n<p>1：打开标准输出 输入 错误控制台的句柄</p>\n<p>2：创建2号进程 并在中执行etc/rc文件 执行sh程序</p>\n<p>3：零号进程不可能退出 如果退出就执行for(;;) pause();</p>\n<p>&nbsp;</p>\n<p>目前为止main函数的执行完成 具体逻辑如下：</p>\n<p><img src=\"/.com//2909691-20221018204634847-2097816257.png\" alt></p>\n<p>&nbsp;</p>\n<p><strong>Q:进程如何调度的</strong></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">不知道你是否还记得，定时器和时钟中断，再mian函数的前面执行了讲的 sched_init 函数。</span></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">schedule.c\n\n<p>#define HZ 100<br></p></pre><p></p>\n</div>\n<p><span style=\"font-size: 14px;\"><span style=\"letter-spacing: 0.5px;\">这个间隔时间被设置为 10 ms，也就是 100 Hz。</span> <span style=\"letter-spacing: 0.5px;\">发起的中断叫时钟中断，其中断向量号被设置为了timer_interrupt 。</span><span style=\"letter-spacing: 0.5px;\"><span style=\"letter-spacing: 0.5px;\">这样，中断来临时，CPU 会查找到中断处理函数，并跳转过去执行。</span></span></span></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">system_call.s\n\n<p>_timer_interrupt:<br>    …<br>    // 增加系统滴答数<br>    incl _jiffies<br>    …<br>    // 调用函数 do_timer<br>    call _do_timer<br>    …<br></p></pre><p></p>\n</div>\n<p>&nbsp;<span style=\"letter-spacing: 0.5px;\">这个函数做了两件事，一个是将<strong>系统滴答数</strong>这个变量 <strong>jiffies</strong> 加一，一个是调用了另一个函数 <strong>do_timer</strong>。</span></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">sched.c\n\n<p>void do_timer(long cpl) {<br>    …<br>    // 当前线程还有剩余时间片，直接返回<br>    if ((–current-&gt;counter)&gt;0) return;<br>    // 若没有剩余时间片，调度<br>    schedule();<br>}<br></p></pre><p></p>\n</div>\n<p><span style=\"font-size: 14px;\">&nbsp;<span style=\"letter-spacing: 0.5px;\">do_timer 最重要的部分就是上面这段代码，非常简单。</span></span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"letter-spacing: 0.5px;\">首先将当先进程的时间片 -1，然后判断：</span></span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"letter-spacing: 0.5px;\">如果时间片仍然大于零，则什么都不做直接返回。</span></span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"letter-spacing: 0.5px;\">如果时间片已经为零，则调用 schedule()，很明显，这就是进行进程调度的主干。</span></span></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">void schedule(void) {\n    int i, next, c;\n    struct task_struct ** p;\n    ...\n    while (1) {\n        c = -1;\n        next = 0;\n        i = NR_TASKS;\n        p = &amp;task[NR_TASKS];\n        while (--i) {\n            if (!*--p)\n                continue;\n            if ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; c)\n                c = (*p)-&gt;counter, next = i;\n        }\n        if (c) break;\n        for(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)\n            if (*p)\n                (*p)-&gt;counter = ((*p)-&gt;counter &gt;&gt; 1) +\n                        (*p)-&gt;priority;\n    }\n    switch_to(next);\n}\n</pre>\n</div>\n<p>&nbsp;很简答，这个函数就做了三件事：</p>\n<p><span style=\"font-size: 14px;\"><strong><span style=\"letter-spacing: 0.5px;\">1.</span></strong><span style=\"letter-spacing: 0.5px;\"> 拿到剩余时间片（counter的值）最大且在 runnable 状态（state = 0）的进程号 next。</span></span></p>\n<p><span style=\"letter-spacing: 0.5px; font-size: 14px;\"><strong>2.</strong><span style=\"letter-spacing: 0.5px;\"> 如果所有 runnable 进程时间片都为 0，则将所有进程（注意不仅仅是 runnable 的进程）的 counter 重新赋值（counter = counter/2 + priority），然后再次执行步骤 1。</span></span></p>\n<p><span style=\"letter-spacing: 0.5px; font-size: 14px;\"><strong>3.</strong><span style=\"letter-spacing: 0.5px;\"> 最后拿到了一个进程号 next，调用了 switch_to(next) 这个方法，就切换到了这个进程去执行了。</span></span></p>\n<p>&nbsp;总结一下：</p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">罪魁祸首的，就是那个每 10ms 触发一次的定时器滴答。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">而这个滴答将会给 CPU 产生一个时钟中断信号。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">而这个中断信号会使 CPU 查找中断向量表，找到操作系统写好的一个时钟中断处理函数 do_timer。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">do_timer 会首先将当前进程的 counter 变量 -1，如果 counter 此时仍然大于 0，则就此结束。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">但如果 counter = 0 了，就开始进行进程的调度。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">进程调度就是找到所有处于 RUNNABLE 状态的进程，并找到一个 counter 值最大的进程，把它丢进 switch_to 函数的入参里。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">switch_to 这个终极函数，会保存当前进程上下文，恢复要跳转到的这个进程的上下文，同时使得 CPU 跳转到这个进程的偏移地址处。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">接着，这个进程就舒舒服服地运行了起来，等待着下一次时钟中断的来临。</span></p>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n","site":{"data":{"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>linux内核版本0.11</p>\n</blockquote>\n<h1>1：main</h1>\n<p>首先选出一号选手main函数，代码上和线程相关的主要是以下代码</p>\n<div class=\"cnblogs_highlighted\">\n<pre class=\"brush:cpp;gutter:true;\">\n    void main(void) {    \n    move_to_user_mode();\n    if (!fork()) {\n        init();\n    }\n    for(;;) pause();\n}\n</pre>\n</div>\n<h1>&nbsp;2：<span style=\"letter-spacing: 0.5px;\"><strong>move_to_user_mode</strong></span></h1>\n<p><span style=\"letter-spacing: 0.5px; font-size: 15px;\"><span style=\"letter-spacing: 0.5px;\">这行代码的意思直接说非常简单，就是<strong>从内核态转变为了用户态</strong></span></span></p>\n<p>&nbsp;</p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">#define move_to_user_mode() \\\n__asm__ (\"movl %%esp,%%eax\\n\\t\" \\\n    \"pushl $0x17\\n\\t\" \\\n    \"pushl %%eax\\n\\t\" \\\n    \"pushfl\\n\\t\" \\\n    \"pushl $0x0f\\n\\t\" \\\n    \"pushl $1f\\n\\t\" \\\n    \"iret\\n\" \\\n    \"1:\\tmovl $0x17,%%eax\\n\\t\" \\\n    \"movw %%ax,%%ds\\n\\t\" \\\n    \"movw %%ax,%%es\\n\\t\" \\\n    \"movw %%ax,%%fs\\n\\t\" \\\n    \"movw %%ax,%%gs\" \\\n    :::\"ax\")\n</pre>\n</div>\n<h1>&nbsp;3：fork</h1>\n<p>fork函数是被系统调用使用的 具体路径如下：</p>\n<p>main.c&nbsp; :&nbsp; static inline _syscall0(int,fork)&nbsp; 将fork绑定到_sys_fork</p>\n<p>　　system_call.s&nbsp; :&nbsp; _sys_fork:(调用函数_find_empty_process和_copy_process)</p>\n<p><img src=\"/.com//2909691-20221018201940242-320806714.png\" alt></p>\n<p>总结作用：</p>\n<p>1：在task链表中找到一个进程空位并存放当前的进程（_find_empty_process）</p>\n<p>2：创建一个tsak_struct</p>\n<p>3：设置task_struct（_copy_process）</p>\n<p>这里就出现一个概念：<span style=\"font-size: 14px; letter-spacing: 0.5px;\">由于我们现在只有 0 号进程，且 task[] 除了 0 号索引位置，其他地方都是空的，所以这个方法运行完，last_pid 就是 1，也就是新进程被分配的 pid 就是 1</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\"><img src=\"/.com//2909691-20221018202536805-171723429.png\" alt></span></p>\n<h1>4:init()</h1>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">void init(void)\n{\n    int pid,i;\n\n<pre><code>setup((void *) &amp;amp;drive_info);\n(void) open(&quot;/dev/tty0&quot;,O_RDWR,0); //打开tty0 标准输入控制台\n(void) dup(0);//打开tty0 标准输出控制台\n(void) dup(0);//打开标准错误控制台\nprintf(&quot;%d buffers = %d bytes buffer space\\n\\r&quot;,NR_BUFFERS,\n    NR_BUFFERS*BLOCK_SIZE);\nprintf(&quot;Free mem: %d bytes\\n\\r&quot;,memory_end-main_memory_start);\n//又创建一个进程（2号进程）&lt;br /&gt;　　　　 if (!(pid=fork())) {\n    close(0);\n    if (open(&quot;/etc/rc&quot;,O_RDONLY,0)) ///etc/rc文件\n        _exit(1);\n    execve(&quot;/bin/sh&quot;,argv_rc,envp_rc);//执行sh\n    _exit(2);\n}\nif (pid&amp;gt;0)\n    while (pid != wait(&amp;amp;i))//等待父进程退出\n        /* nothing */;\nwhile (1) {&lt;br /&gt;　　　　　　　　 //又创建一个进程 主要是害怕上面的进程创建失败 再创建一次\n    if ((pid=fork())&amp;lt;0) {\n        printf(&quot;Fork failed in init\\r\\n&quot;);\n        continue;\n    }\n    if (!pid) {\n        close(0);close(1);close(2);\n        setsid();\n        (void) open(&quot;/dev/tty0&quot;,O_RDWR,0);\n        (void) dup(0);\n        (void) dup(0);\n        _exit(execve(&quot;/bin/sh&quot;,argv,envp));\n    }\n    while (1)\n        if (pid == wait(&amp;amp;i))  //等待父进程退出 但是零号进程不可能退出\n            break;\n    printf(&quot;\\n\\rchild %d died with code %04x\\n\\r&quot;,pid,i);\n    sync();\n}\n_exit(0);    /* NOTE! _exit, not exit() */</code></pre><p>}<br></p></pre><p></p>\n</div>\n<p>&nbsp;总结</p>\n<p>1：打开标准输出 输入 错误控制台的句柄</p>\n<p>2：创建2号进程 并在中执行etc/rc文件 执行sh程序</p>\n<p>3：零号进程不可能退出 如果退出就执行for(;;) pause();</p>\n<p>&nbsp;</p>\n<p>目前为止main函数的执行完成 具体逻辑如下：</p>\n<p><img src=\"/.com//2909691-20221018204634847-2097816257.png\" alt></p>\n<p>&nbsp;</p>\n<p><strong>Q:进程如何调度的</strong></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">不知道你是否还记得，定时器和时钟中断，再mian函数的前面执行了讲的 sched_init 函数。</span></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">schedule.c\n\n<p>#define HZ 100<br></p></pre><p></p>\n</div>\n<p><span style=\"font-size: 14px;\"><span style=\"letter-spacing: 0.5px;\">这个间隔时间被设置为 10 ms，也就是 100 Hz。</span> <span style=\"letter-spacing: 0.5px;\">发起的中断叫时钟中断，其中断向量号被设置为了timer_interrupt 。</span><span style=\"letter-spacing: 0.5px;\"><span style=\"letter-spacing: 0.5px;\">这样，中断来临时，CPU 会查找到中断处理函数，并跳转过去执行。</span></span></span></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">system_call.s\n\n<p>_timer_interrupt:<br>    …<br>    // 增加系统滴答数<br>    incl _jiffies<br>    …<br>    // 调用函数 do_timer<br>    call _do_timer<br>    …<br></p></pre><p></p>\n</div>\n<p>&nbsp;<span style=\"letter-spacing: 0.5px;\">这个函数做了两件事，一个是将<strong>系统滴答数</strong>这个变量 <strong>jiffies</strong> 加一，一个是调用了另一个函数 <strong>do_timer</strong>。</span></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">sched.c\n\n<p>void do_timer(long cpl) {<br>    …<br>    // 当前线程还有剩余时间片，直接返回<br>    if ((–current-&gt;counter)&gt;0) return;<br>    // 若没有剩余时间片，调度<br>    schedule();<br>}<br></p></pre><p></p>\n</div>\n<p><span style=\"font-size: 14px;\">&nbsp;<span style=\"letter-spacing: 0.5px;\">do_timer 最重要的部分就是上面这段代码，非常简单。</span></span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"letter-spacing: 0.5px;\">首先将当先进程的时间片 -1，然后判断：</span></span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"letter-spacing: 0.5px;\">如果时间片仍然大于零，则什么都不做直接返回。</span></span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"letter-spacing: 0.5px;\">如果时间片已经为零，则调用 schedule()，很明显，这就是进行进程调度的主干。</span></span></p>\n<div class=\"cnblogs_Highlighter\">\n<pre class=\"brush:cpp;gutter:true;\">void schedule(void) {\n    int i, next, c;\n    struct task_struct ** p;\n    ...\n    while (1) {\n        c = -1;\n        next = 0;\n        i = NR_TASKS;\n        p = &amp;task[NR_TASKS];\n        while (--i) {\n            if (!*--p)\n                continue;\n            if ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; c)\n                c = (*p)-&gt;counter, next = i;\n        }\n        if (c) break;\n        for(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)\n            if (*p)\n                (*p)-&gt;counter = ((*p)-&gt;counter &gt;&gt; 1) +\n                        (*p)-&gt;priority;\n    }\n    switch_to(next);\n}\n</pre>\n</div>\n<p>&nbsp;很简答，这个函数就做了三件事：</p>\n<p><span style=\"font-size: 14px;\"><strong><span style=\"letter-spacing: 0.5px;\">1.</span></strong><span style=\"letter-spacing: 0.5px;\"> 拿到剩余时间片（counter的值）最大且在 runnable 状态（state = 0）的进程号 next。</span></span></p>\n<p><span style=\"letter-spacing: 0.5px; font-size: 14px;\"><strong>2.</strong><span style=\"letter-spacing: 0.5px;\"> 如果所有 runnable 进程时间片都为 0，则将所有进程（注意不仅仅是 runnable 的进程）的 counter 重新赋值（counter = counter/2 + priority），然后再次执行步骤 1。</span></span></p>\n<p><span style=\"letter-spacing: 0.5px; font-size: 14px;\"><strong>3.</strong><span style=\"letter-spacing: 0.5px;\"> 最后拿到了一个进程号 next，调用了 switch_to(next) 这个方法，就切换到了这个进程去执行了。</span></span></p>\n<p>&nbsp;总结一下：</p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">罪魁祸首的，就是那个每 10ms 触发一次的定时器滴答。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">而这个滴答将会给 CPU 产生一个时钟中断信号。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">而这个中断信号会使 CPU 查找中断向量表，找到操作系统写好的一个时钟中断处理函数 do_timer。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">do_timer 会首先将当前进程的 counter 变量 -1，如果 counter 此时仍然大于 0，则就此结束。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">但如果 counter = 0 了，就开始进行进程的调度。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">进程调度就是找到所有处于 RUNNABLE 状态的进程，并找到一个 counter 值最大的进程，把它丢进 switch_to 函数的入参里。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">switch_to 这个终极函数，会保存当前进程上下文，恢复要跳转到的这个进程的上下文，同时使得 CPU 跳转到这个进程的偏移地址处。</span></p>\n<p><span style=\"font-size: 14px; letter-spacing: 0.5px;\">接着，这个进程就舒舒服服地运行了起来，等待着下一次时钟中断的来临。</span></p>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n"},{"title":"中华通史.上古史-夏","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-01-01T12:35:31.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"@[TOC](夏代)\n\n# 夏国简介\n帝舜去世,禹得到诸侯一致的拥护,继立为天子。他曾受舜封为夏伯,赐姓姒,故国号夏,建都安邑,他先后请皋陶与益佐理政事。禹的政治,一方面督励人民从事农耕;方面整伤社会秩序,法律很严。他从北而南巡视天下,曾大会诸侯于涂山。防风氏后到为禹所杀。史称执玉帛而来与会的有万国,执玉的是大国,执帛的是小国。这些诸侯也就是那个时候的氏族部落,足以说明禹声威之盛远过唐虞。他继续向东方巡视,行至中途,死在会稽山(今浙江绍兴东南),据说他的葬礼极其简单,所谓“桐棺三寸”、“衣衾三领”真是一生刻苦。禹死之后,有一段很短的时间,由益代行政事。后来诸侯,怀念禹功,都拥护禹子启而不拥护益。于是启继位为天子,从此建立了父子相传的君主制度。\n\n\n# 夏代大事\n![](中华通史-上古史-夏/20210703105815619.png)![](中华通史-上古史-夏/20210703105831609.png)![](中华通史-上古史-夏/20210703105920999.png)\n史称:“帝尧之时洪水滔天,浩浩怀山襄陵。”成为当时最严重的一个问题叠经派人治理,都没有成功,尧乃接受四岳的推荐,用鲧治水,鲧就是禹的父亲。鲧用堵塞的方法,多筑堤坝。但是洪水滔滔,随筑随溃,经过九年的功夫,没有成功,引起人民的怨愤。到了舜执政的时候,便将鲧殛死。而用鲧子禹继续治水。这洪水之灾,从尧初算起已经几十年了。舜又命益与弃协助禹。禹伤父功不成,乃焦思苦虑。不惜一切的劳苦,希望能完成先业,以雪父耻。他完全改变他父亲的方法,从疏导着手。他带着许多“准绳”、“规矩”等测量的工具,登山涉水,观察地形高下,而后施工。他又用了许多交通工具,史称“陆行乘车,水行乘船,泥行乘橇,山行乘撵。”他先从黄河的中段冀州地方开始。这也是黄河泛滥的枢纽地带(今山西、河南之间)。一步步的向东方的兖州、青州、徐州、南方的荆州、豫州疏导,最后又折向西北去整理黄河的上游。他将黄河下游的河道分辟为九股,散其水势。然后再分为漯济流入渤海。又疏通了许多其他的河道,完成了许多惊人的工程。他率领人民,和黄河作了十三年的奋斗,把这上百年的洪水之灾,完全治平。使老百姓免于饥溺流离之苦,能在黄河流域安居乐业下来。他这十三年中,为了国家和人民,奋不顾身,曾经几次经过家门而不入。顾不得饮食起居,他治水时总是亲自拿着募锸以身作则带头去作。冒着狂风暴雨,弄得身体憔悴而永不休息。和他同样辛苦的,还有协助他的益(虞)和弃(后稷)。益掌火,在治水之前,纵火焚山林,以驱禽兽,弃为后稷,掌播谷。在水平之后,教人民耕种,从事善后工作。他们这样辛劳,一方面获得百姓的爱戴;一方面获得后世的崇拜,禹成为后来苦行家墨子的宗师。而禹与后稷,被孟子尊为是“历史上最富于同情心的人”。\n    夏启继立后,曾大会诸侯于钧台(今河南禹县许昌之间)。有扈氏不服,启率兵与有扈战于甘(今作《甘誓》)灭有扈。夏启的政权,乃归稳定。正式称为“夏后启”,启在位九年卒,子太康立。太康逸豫失政,太康五弟,追思禹德,乃作《五子之歌》。这时有东夷地方的一个有穷氏诸侯后羿作乱,太康被逼迁于斟部(河南巩县附近)。太康传弟仲康,仲康传子相,相又一度迁都于商邱(河南商邱),夏朝实际成为后羿的政权,后来后羿又被其权臣寒浞所杀,寒浞又弑相而篡夏,夏自禹至相不到九十年,而国统几绝。相妻有缗氏怀孕在身,逃至有仍(今山东济宁),生了一个遗腹子,是为少康。少康既长,从有仍氏地方逃到虞地(河南虞城),投奔有虞氏,有虞氏君收纳了少康,给以田一成(方十里为成)、众旅(五百人为旅)。后来少康就凭藉着这一成一旅的资本,强大起来。收抚旧日夏朝的士众,灭掉寒浞,复兴夏朝,还都于安邑,史称少康中兴。这后羿、寒浞之乱前后历时百年。\n少康时曾再度发生河患,以冥为司空再度治河。由少康传子杼,杼传槐(是为夏之第八主)。槐即位,九夷来朝,九夷畎夷、于夷、方夷、黄夷、白夷、赤夷、玄夷、风夷、阳夷)都是居住在东方滨海一带的落后民族。这说明在夏朝中叶的时候,夏朝的政教势力,已远达东海之滨。以前五帝到夏禹时,主要的异族战斗是苗、黎。苗、黎在西方。到夏时征服苗黎之后,继之以服九夷,说明夏人之向东发展。这个夏朝的中兴,为时约二百年,传到第十四个君主孔甲,淫乱无度,夏政再衰。诸侯纷纷叛离,中枢的权力,日益纷散,夏政乃一蹶不振。《周语》说:“孔甲乱夏,四世而陨”。夏代从孔甲乱政,以后三传到了履癸,履癸先都斟郛,后都河南禹县)。这履癸就是夏桀,种种无道,荒淫奢侈。传说夏桀宠爱有施氏之女妹喜,又宠爱岷山氏二女琬、琰。又营建倾宫瑶台,作酒池肉林,杀忠臣关龙逢。太史令终古哭谏夏桀,夏桀不听,终古就亡奔于商。商人是东方的一个诸侯,世居于今安徽亳县到河南商邱一带的地方。从孔甲失德以后,商人逐渐壮大,逐渐获得诸侯的拥护。到了商汤的时候,诸侯多叛桀而归汤。有些诸侯不服从汤,汤出兵去讨伐。兵行所到之处,百姓无不欢迎。其威德远在夏桀之上。就在夏桀在位的第五十三年(公元前一七五一年),商汤俯顺舆情,率领诸侯之兵,讨伐夏桀。与夏桀大战于鸣条(旧说在山西安邑附近,近人考应在淮河之南),夏桀大败。向东南方逃走,被商汤一路追击。夏桀屡战屡败,终被商汤所俘。商汤就把夏桀流放在南巢(安徽巢县),三年而死,史称“商汤革命”。这是我国历史上第一次的贵族革命。这个夏朝,也是中国历史上第一个正式的朝代。凡历十四世,十七主,四百余年而亡。\n![](中华通史-上古史-夏/20210703111602157.png)\n# 夏代影响\n\n 1.  治水\n禹治水的范围极大,据旧《史记》载,所谓疏“三江五湖”,几乎遍于全国,除了黄河之外,又导黄河的支流济水,又导淮水,又导长江。江、淮、河、济谓之四渎,所谓“四渎修,而民宅安。”我们近人推断,在那个时候,治水范围不会如此之广。我们可相信的是大禹的治水,是以黄河中段的冀州豫州为主。而渐及东方的兖州、徐州、可能的上溯到黄河上游的雍州、梁州和荆州的一部分。其他淮水与长江北面的若干支流。也可能附带的疏导过。然而仅这一个估计的范围已经很大,已经是禹率领着千万人民,经过十几年才能完成的功业。大禹治水的目的,是谋求人民生活的安定,使人民生活安定最好的方法,是使人民在这片新整理的土地上从事农耕。所以大禹治水后,就由弃的协助展开全面的农村建设,从夏朝起中国正式成为一个农业的国家。又由于治河的结果,自然而然的了解到各地的地势物产、风俗人情,自然171中华通史·第一卷·绪论上古史而然的加强了中央与地方及人民的联系。于是他制定了一个政治的区划,这个区划是分全国为九州。这九州是雍州(约当今陕西之地)、冀州(约当今山西南部)、豫州(约当今河南)、兖州(约当今河北南部)、青州(约当今山东)、徐州约当今苏北、皖北)、扬州(约当今皖南、苏南)、荆州(约当今豫南与湖北)梁州〔约当今陕南)成为中国版图的基础。\n    又分为全国为五服(以王畿为中心,王畿四周五百里内为甸服,五百里外为侯服,侯服外五百里为绥服,绥服外五百里为要服,要服外五百里为荒服),构成一个以王京为中心的空间观念。又根据各地的物产,制为九等贡赋。此孟子所谓“夏后氏五十而贡”。这就是禹贡九州。所以由于大禹的治水的结果,他奠定了中国的农业社会;他建立了中国的疆域概念。他是最早建立中华民族成为一个国家的大英雄。禹称夏后氏,“夏”便成为我民族对外之代名辞。按《说文》“夏”字“”作人形,注云:“中国人也”(因之,当时中国境内诸民族,称为诸夏)。故后人称禹为大禹,诚非偶然。\n\n 2. 大禹始称王,始定传子之局。\n    以前五帝的共主称氏,以前虞舜的禅让,均未脱氏族的形态。到了夏禹以后传子称王,证明中央的权威提高。诸侯对于中央的关系更加服从,更加密切。中央王室的政权更加稳定,更进一步走向封建帝国。按人类上古史的演变,由最早的部落到封建的君主世袭,这是一个大的进步,这是一个国家组织的完成。我们看禹时诸侯大会涂山,诛防风氏。启时大会诸侯钓台,诛有扈氏。都是说明这个国家组织与中央政府权力的扩大。\n\n 3. 治水成功,推进农业。\n夏人建国后配合农时而制订以建寅为岁首(正月)的历法。最合乎农业的时序,周人称夏人为“得天”。这个“夏正”历法,在商、周、秦时一度改变,到汉以后又恢复采用直用到今天,就是那四序分明的阴历,我们又叫做农历。由于夏禹的治水兴农,而建立了“农历”。我们又由这“农历”,可以推想到夏朝的农业社会。因为这“夏正”,是最符合农业的一个时序。\n夏代的文化已入于铜器时代。我们现在出土的铜器,虽尚未有确切的文字足以证明是夏代的铜器。但在山西、河南带若干出土的铜器中,相信其中或有夏器,并且根据殷商铜器之精美,其铜器制造,一定为时已久,则上推两三百年在夏朝时定有铜器可无疑。禹铸九鼎之说见于《史记》、《说文》、《左传》、《墨子》诸书,自然不是虚构。并且自春秋到秦汉历代有求鼎之事,绝对不是毫无根据的狂妄举动。据说禹铸九鼎是集九牧之铜铸成,上面刻划着各地的方物所谓铸鼎象物”。看了这九鼎,就可以知道九州的产物情形,这和《禹贡》的制度正相配合。这九鼎一直成为传国重器,也就是国家的象征。\n\n> 本文内容均抄录于[中华通史.上古史]，致谢陈致平先生","source":"_posts/2022/01/中华通史-上古史-夏.md","raw":"---\ntitle: 中华通史.上古史-夏\npermalink: 中华通史.上古史-夏\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-01-01 20:35:31\npassword:\nsummary:\ntags:\n- history\ncategories:\n- history\nkeywords:\ndescription:\n---\n@[TOC](夏代)\n\n# 夏国简介\n帝舜去世,禹得到诸侯一致的拥护,继立为天子。他曾受舜封为夏伯,赐姓姒,故国号夏,建都安邑,他先后请皋陶与益佐理政事。禹的政治,一方面督励人民从事农耕;方面整伤社会秩序,法律很严。他从北而南巡视天下,曾大会诸侯于涂山。防风氏后到为禹所杀。史称执玉帛而来与会的有万国,执玉的是大国,执帛的是小国。这些诸侯也就是那个时候的氏族部落,足以说明禹声威之盛远过唐虞。他继续向东方巡视,行至中途,死在会稽山(今浙江绍兴东南),据说他的葬礼极其简单,所谓“桐棺三寸”、“衣衾三领”真是一生刻苦。禹死之后,有一段很短的时间,由益代行政事。后来诸侯,怀念禹功,都拥护禹子启而不拥护益。于是启继位为天子,从此建立了父子相传的君主制度。\n\n\n# 夏代大事\n![](中华通史-上古史-夏/20210703105815619.png)![](中华通史-上古史-夏/20210703105831609.png)![](中华通史-上古史-夏/20210703105920999.png)\n史称:“帝尧之时洪水滔天,浩浩怀山襄陵。”成为当时最严重的一个问题叠经派人治理,都没有成功,尧乃接受四岳的推荐,用鲧治水,鲧就是禹的父亲。鲧用堵塞的方法,多筑堤坝。但是洪水滔滔,随筑随溃,经过九年的功夫,没有成功,引起人民的怨愤。到了舜执政的时候,便将鲧殛死。而用鲧子禹继续治水。这洪水之灾,从尧初算起已经几十年了。舜又命益与弃协助禹。禹伤父功不成,乃焦思苦虑。不惜一切的劳苦,希望能完成先业,以雪父耻。他完全改变他父亲的方法,从疏导着手。他带着许多“准绳”、“规矩”等测量的工具,登山涉水,观察地形高下,而后施工。他又用了许多交通工具,史称“陆行乘车,水行乘船,泥行乘橇,山行乘撵。”他先从黄河的中段冀州地方开始。这也是黄河泛滥的枢纽地带(今山西、河南之间)。一步步的向东方的兖州、青州、徐州、南方的荆州、豫州疏导,最后又折向西北去整理黄河的上游。他将黄河下游的河道分辟为九股,散其水势。然后再分为漯济流入渤海。又疏通了许多其他的河道,完成了许多惊人的工程。他率领人民,和黄河作了十三年的奋斗,把这上百年的洪水之灾,完全治平。使老百姓免于饥溺流离之苦,能在黄河流域安居乐业下来。他这十三年中,为了国家和人民,奋不顾身,曾经几次经过家门而不入。顾不得饮食起居,他治水时总是亲自拿着募锸以身作则带头去作。冒着狂风暴雨,弄得身体憔悴而永不休息。和他同样辛苦的,还有协助他的益(虞)和弃(后稷)。益掌火,在治水之前,纵火焚山林,以驱禽兽,弃为后稷,掌播谷。在水平之后,教人民耕种,从事善后工作。他们这样辛劳,一方面获得百姓的爱戴;一方面获得后世的崇拜,禹成为后来苦行家墨子的宗师。而禹与后稷,被孟子尊为是“历史上最富于同情心的人”。\n    夏启继立后,曾大会诸侯于钧台(今河南禹县许昌之间)。有扈氏不服,启率兵与有扈战于甘(今作《甘誓》)灭有扈。夏启的政权,乃归稳定。正式称为“夏后启”,启在位九年卒,子太康立。太康逸豫失政,太康五弟,追思禹德,乃作《五子之歌》。这时有东夷地方的一个有穷氏诸侯后羿作乱,太康被逼迁于斟部(河南巩县附近)。太康传弟仲康,仲康传子相,相又一度迁都于商邱(河南商邱),夏朝实际成为后羿的政权,后来后羿又被其权臣寒浞所杀,寒浞又弑相而篡夏,夏自禹至相不到九十年,而国统几绝。相妻有缗氏怀孕在身,逃至有仍(今山东济宁),生了一个遗腹子,是为少康。少康既长,从有仍氏地方逃到虞地(河南虞城),投奔有虞氏,有虞氏君收纳了少康,给以田一成(方十里为成)、众旅(五百人为旅)。后来少康就凭藉着这一成一旅的资本,强大起来。收抚旧日夏朝的士众,灭掉寒浞,复兴夏朝,还都于安邑,史称少康中兴。这后羿、寒浞之乱前后历时百年。\n少康时曾再度发生河患,以冥为司空再度治河。由少康传子杼,杼传槐(是为夏之第八主)。槐即位,九夷来朝,九夷畎夷、于夷、方夷、黄夷、白夷、赤夷、玄夷、风夷、阳夷)都是居住在东方滨海一带的落后民族。这说明在夏朝中叶的时候,夏朝的政教势力,已远达东海之滨。以前五帝到夏禹时,主要的异族战斗是苗、黎。苗、黎在西方。到夏时征服苗黎之后,继之以服九夷,说明夏人之向东发展。这个夏朝的中兴,为时约二百年,传到第十四个君主孔甲,淫乱无度,夏政再衰。诸侯纷纷叛离,中枢的权力,日益纷散,夏政乃一蹶不振。《周语》说:“孔甲乱夏,四世而陨”。夏代从孔甲乱政,以后三传到了履癸,履癸先都斟郛,后都河南禹县)。这履癸就是夏桀,种种无道,荒淫奢侈。传说夏桀宠爱有施氏之女妹喜,又宠爱岷山氏二女琬、琰。又营建倾宫瑶台,作酒池肉林,杀忠臣关龙逢。太史令终古哭谏夏桀,夏桀不听,终古就亡奔于商。商人是东方的一个诸侯,世居于今安徽亳县到河南商邱一带的地方。从孔甲失德以后,商人逐渐壮大,逐渐获得诸侯的拥护。到了商汤的时候,诸侯多叛桀而归汤。有些诸侯不服从汤,汤出兵去讨伐。兵行所到之处,百姓无不欢迎。其威德远在夏桀之上。就在夏桀在位的第五十三年(公元前一七五一年),商汤俯顺舆情,率领诸侯之兵,讨伐夏桀。与夏桀大战于鸣条(旧说在山西安邑附近,近人考应在淮河之南),夏桀大败。向东南方逃走,被商汤一路追击。夏桀屡战屡败,终被商汤所俘。商汤就把夏桀流放在南巢(安徽巢县),三年而死,史称“商汤革命”。这是我国历史上第一次的贵族革命。这个夏朝,也是中国历史上第一个正式的朝代。凡历十四世,十七主,四百余年而亡。\n![](中华通史-上古史-夏/20210703111602157.png)\n# 夏代影响\n\n 1.  治水\n禹治水的范围极大,据旧《史记》载,所谓疏“三江五湖”,几乎遍于全国,除了黄河之外,又导黄河的支流济水,又导淮水,又导长江。江、淮、河、济谓之四渎,所谓“四渎修,而民宅安。”我们近人推断,在那个时候,治水范围不会如此之广。我们可相信的是大禹的治水,是以黄河中段的冀州豫州为主。而渐及东方的兖州、徐州、可能的上溯到黄河上游的雍州、梁州和荆州的一部分。其他淮水与长江北面的若干支流。也可能附带的疏导过。然而仅这一个估计的范围已经很大,已经是禹率领着千万人民,经过十几年才能完成的功业。大禹治水的目的,是谋求人民生活的安定,使人民生活安定最好的方法,是使人民在这片新整理的土地上从事农耕。所以大禹治水后,就由弃的协助展开全面的农村建设,从夏朝起中国正式成为一个农业的国家。又由于治河的结果,自然而然的了解到各地的地势物产、风俗人情,自然171中华通史·第一卷·绪论上古史而然的加强了中央与地方及人民的联系。于是他制定了一个政治的区划,这个区划是分全国为九州。这九州是雍州(约当今陕西之地)、冀州(约当今山西南部)、豫州(约当今河南)、兖州(约当今河北南部)、青州(约当今山东)、徐州约当今苏北、皖北)、扬州(约当今皖南、苏南)、荆州(约当今豫南与湖北)梁州〔约当今陕南)成为中国版图的基础。\n    又分为全国为五服(以王畿为中心,王畿四周五百里内为甸服,五百里外为侯服,侯服外五百里为绥服,绥服外五百里为要服,要服外五百里为荒服),构成一个以王京为中心的空间观念。又根据各地的物产,制为九等贡赋。此孟子所谓“夏后氏五十而贡”。这就是禹贡九州。所以由于大禹的治水的结果,他奠定了中国的农业社会;他建立了中国的疆域概念。他是最早建立中华民族成为一个国家的大英雄。禹称夏后氏,“夏”便成为我民族对外之代名辞。按《说文》“夏”字“”作人形,注云:“中国人也”(因之,当时中国境内诸民族,称为诸夏)。故后人称禹为大禹,诚非偶然。\n\n 2. 大禹始称王,始定传子之局。\n    以前五帝的共主称氏,以前虞舜的禅让,均未脱氏族的形态。到了夏禹以后传子称王,证明中央的权威提高。诸侯对于中央的关系更加服从,更加密切。中央王室的政权更加稳定,更进一步走向封建帝国。按人类上古史的演变,由最早的部落到封建的君主世袭,这是一个大的进步,这是一个国家组织的完成。我们看禹时诸侯大会涂山,诛防风氏。启时大会诸侯钓台,诛有扈氏。都是说明这个国家组织与中央政府权力的扩大。\n\n 3. 治水成功,推进农业。\n夏人建国后配合农时而制订以建寅为岁首(正月)的历法。最合乎农业的时序,周人称夏人为“得天”。这个“夏正”历法,在商、周、秦时一度改变,到汉以后又恢复采用直用到今天,就是那四序分明的阴历,我们又叫做农历。由于夏禹的治水兴农,而建立了“农历”。我们又由这“农历”,可以推想到夏朝的农业社会。因为这“夏正”,是最符合农业的一个时序。\n夏代的文化已入于铜器时代。我们现在出土的铜器,虽尚未有确切的文字足以证明是夏代的铜器。但在山西、河南带若干出土的铜器中,相信其中或有夏器,并且根据殷商铜器之精美,其铜器制造,一定为时已久,则上推两三百年在夏朝时定有铜器可无疑。禹铸九鼎之说见于《史记》、《说文》、《左传》、《墨子》诸书,自然不是虚构。并且自春秋到秦汉历代有求鼎之事,绝对不是毫无根据的狂妄举动。据说禹铸九鼎是集九牧之铜铸成,上面刻划着各地的方物所谓铸鼎象物”。看了这九鼎,就可以知道九州的产物情形,这和《禹贡》的制度正相配合。这九鼎一直成为传国重器,也就是国家的象征。\n\n> 本文内容均抄录于[中华通史.上古史]，致谢陈致平先生","slug":"中华通史.上古史-夏","published":1,"updated":"2023-04-02T16:21:25.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzm4la7000bzkvqtatcht3f","content":"<p>@<a href=\"夏代\">TOC</a></p>\n<h1 id=\"夏国简介\"><a href=\"#夏国简介\" class=\"headerlink\" title=\"夏国简介\"></a>夏国简介</h1><p>帝舜去世,禹得到诸侯一致的拥护,继立为天子。他曾受舜封为夏伯,赐姓姒,故国号夏,建都安邑,他先后请皋陶与益佐理政事。禹的政治,一方面督励人民从事农耕;方面整伤社会秩序,法律很严。他从北而南巡视天下,曾大会诸侯于涂山。防风氏后到为禹所杀。史称执玉帛而来与会的有万国,执玉的是大国,执帛的是小国。这些诸侯也就是那个时候的氏族部落,足以说明禹声威之盛远过唐虞。他继续向东方巡视,行至中途,死在会稽山(今浙江绍兴东南),据说他的葬礼极其简单,所谓“桐棺三寸”、“衣衾三领”真是一生刻苦。禹死之后,有一段很短的时间,由益代行政事。后来诸侯,怀念禹功,都拥护禹子启而不拥护益。于是启继位为天子,从此建立了父子相传的君主制度。</p>\n<h1 id=\"夏代大事\"><a href=\"#夏代大事\" class=\"headerlink\" title=\"夏代大事\"></a>夏代大事</h1><p><img src=\"/2022/01/zhong-hua-tong-shi/20210703105815619.png\" alt><img src=\"/2022/01/zhong-hua-tong-shi/20210703105831609.png\" alt><img src=\"/2022/01/zhong-hua-tong-shi/20210703105920999.png\" alt><br>史称:“帝尧之时洪水滔天,浩浩怀山襄陵。”成为当时最严重的一个问题叠经派人治理,都没有成功,尧乃接受四岳的推荐,用鲧治水,鲧就是禹的父亲。鲧用堵塞的方法,多筑堤坝。但是洪水滔滔,随筑随溃,经过九年的功夫,没有成功,引起人民的怨愤。到了舜执政的时候,便将鲧殛死。而用鲧子禹继续治水。这洪水之灾,从尧初算起已经几十年了。舜又命益与弃协助禹。禹伤父功不成,乃焦思苦虑。不惜一切的劳苦,希望能完成先业,以雪父耻。他完全改变他父亲的方法,从疏导着手。他带着许多“准绳”、“规矩”等测量的工具,登山涉水,观察地形高下,而后施工。他又用了许多交通工具,史称“陆行乘车,水行乘船,泥行乘橇,山行乘撵。”他先从黄河的中段冀州地方开始。这也是黄河泛滥的枢纽地带(今山西、河南之间)。一步步的向东方的兖州、青州、徐州、南方的荆州、豫州疏导,最后又折向西北去整理黄河的上游。他将黄河下游的河道分辟为九股,散其水势。然后再分为漯济流入渤海。又疏通了许多其他的河道,完成了许多惊人的工程。他率领人民,和黄河作了十三年的奋斗,把这上百年的洪水之灾,完全治平。使老百姓免于饥溺流离之苦,能在黄河流域安居乐业下来。他这十三年中,为了国家和人民,奋不顾身,曾经几次经过家门而不入。顾不得饮食起居,他治水时总是亲自拿着募锸以身作则带头去作。冒着狂风暴雨,弄得身体憔悴而永不休息。和他同样辛苦的,还有协助他的益(虞)和弃(后稷)。益掌火,在治水之前,纵火焚山林,以驱禽兽,弃为后稷,掌播谷。在水平之后,教人民耕种,从事善后工作。他们这样辛劳,一方面获得百姓的爱戴;一方面获得后世的崇拜,禹成为后来苦行家墨子的宗师。而禹与后稷,被孟子尊为是“历史上最富于同情心的人”。<br>    夏启继立后,曾大会诸侯于钧台(今河南禹县许昌之间)。有扈氏不服,启率兵与有扈战于甘(今作《甘誓》)灭有扈。夏启的政权,乃归稳定。正式称为“夏后启”,启在位九年卒,子太康立。太康逸豫失政,太康五弟,追思禹德,乃作《五子之歌》。这时有东夷地方的一个有穷氏诸侯后羿作乱,太康被逼迁于斟部(河南巩县附近)。太康传弟仲康,仲康传子相,相又一度迁都于商邱(河南商邱),夏朝实际成为后羿的政权,后来后羿又被其权臣寒浞所杀,寒浞又弑相而篡夏,夏自禹至相不到九十年,而国统几绝。相妻有缗氏怀孕在身,逃至有仍(今山东济宁),生了一个遗腹子,是为少康。少康既长,从有仍氏地方逃到虞地(河南虞城),投奔有虞氏,有虞氏君收纳了少康,给以田一成(方十里为成)、众旅(五百人为旅)。后来少康就凭藉着这一成一旅的资本,强大起来。收抚旧日夏朝的士众,灭掉寒浞,复兴夏朝,还都于安邑,史称少康中兴。这后羿、寒浞之乱前后历时百年。<br>少康时曾再度发生河患,以冥为司空再度治河。由少康传子杼,杼传槐(是为夏之第八主)。槐即位,九夷来朝,九夷畎夷、于夷、方夷、黄夷、白夷、赤夷、玄夷、风夷、阳夷)都是居住在东方滨海一带的落后民族。这说明在夏朝中叶的时候,夏朝的政教势力,已远达东海之滨。以前五帝到夏禹时,主要的异族战斗是苗、黎。苗、黎在西方。到夏时征服苗黎之后,继之以服九夷,说明夏人之向东发展。这个夏朝的中兴,为时约二百年,传到第十四个君主孔甲,淫乱无度,夏政再衰。诸侯纷纷叛离,中枢的权力,日益纷散,夏政乃一蹶不振。《周语》说:“孔甲乱夏,四世而陨”。夏代从孔甲乱政,以后三传到了履癸,履癸先都斟郛,后都河南禹县)。这履癸就是夏桀,种种无道,荒淫奢侈。传说夏桀宠爱有施氏之女妹喜,又宠爱岷山氏二女琬、琰。又营建倾宫瑶台,作酒池肉林,杀忠臣关龙逢。太史令终古哭谏夏桀,夏桀不听,终古就亡奔于商。商人是东方的一个诸侯,世居于今安徽亳县到河南商邱一带的地方。从孔甲失德以后,商人逐渐壮大,逐渐获得诸侯的拥护。到了商汤的时候,诸侯多叛桀而归汤。有些诸侯不服从汤,汤出兵去讨伐。兵行所到之处,百姓无不欢迎。其威德远在夏桀之上。就在夏桀在位的第五十三年(公元前一七五一年),商汤俯顺舆情,率领诸侯之兵,讨伐夏桀。与夏桀大战于鸣条(旧说在山西安邑附近,近人考应在淮河之南),夏桀大败。向东南方逃走,被商汤一路追击。夏桀屡战屡败,终被商汤所俘。商汤就把夏桀流放在南巢(安徽巢县),三年而死,史称“商汤革命”。这是我国历史上第一次的贵族革命。这个夏朝,也是中国历史上第一个正式的朝代。凡历十四世,十七主,四百余年而亡。<br><img src=\"/2022/01/zhong-hua-tong-shi/20210703111602157.png\" alt></p>\n<h1 id=\"夏代影响\"><a href=\"#夏代影响\" class=\"headerlink\" title=\"夏代影响\"></a>夏代影响</h1><ol>\n<li><p>治水<br>禹治水的范围极大,据旧《史记》载,所谓疏“三江五湖”,几乎遍于全国,除了黄河之外,又导黄河的支流济水,又导淮水,又导长江。江、淮、河、济谓之四渎,所谓“四渎修,而民宅安。”我们近人推断,在那个时候,治水范围不会如此之广。我们可相信的是大禹的治水,是以黄河中段的冀州豫州为主。而渐及东方的兖州、徐州、可能的上溯到黄河上游的雍州、梁州和荆州的一部分。其他淮水与长江北面的若干支流。也可能附带的疏导过。然而仅这一个估计的范围已经很大,已经是禹率领着千万人民,经过十几年才能完成的功业。大禹治水的目的,是谋求人民生活的安定,使人民生活安定最好的方法,是使人民在这片新整理的土地上从事农耕。所以大禹治水后,就由弃的协助展开全面的农村建设,从夏朝起中国正式成为一个农业的国家。又由于治河的结果,自然而然的了解到各地的地势物产、风俗人情,自然171中华通史·第一卷·绪论上古史而然的加强了中央与地方及人民的联系。于是他制定了一个政治的区划,这个区划是分全国为九州。这九州是雍州(约当今陕西之地)、冀州(约当今山西南部)、豫州(约当今河南)、兖州(约当今河北南部)、青州(约当今山东)、徐州约当今苏北、皖北)、扬州(约当今皖南、苏南)、荆州(约当今豫南与湖北)梁州〔约当今陕南)成为中国版图的基础。<br>又分为全国为五服(以王畿为中心,王畿四周五百里内为甸服,五百里外为侯服,侯服外五百里为绥服,绥服外五百里为要服,要服外五百里为荒服),构成一个以王京为中心的空间观念。又根据各地的物产,制为九等贡赋。此孟子所谓“夏后氏五十而贡”。这就是禹贡九州。所以由于大禹的治水的结果,他奠定了中国的农业社会;他建立了中国的疆域概念。他是最早建立中华民族成为一个国家的大英雄。禹称夏后氏,“夏”便成为我民族对外之代名辞。按《说文》“夏”字“”作人形,注云:“中国人也”(因之,当时中国境内诸民族,称为诸夏)。故后人称禹为大禹,诚非偶然。</p>\n</li>\n<li><p>大禹始称王,始定传子之局。<br>以前五帝的共主称氏,以前虞舜的禅让,均未脱氏族的形态。到了夏禹以后传子称王,证明中央的权威提高。诸侯对于中央的关系更加服从,更加密切。中央王室的政权更加稳定,更进一步走向封建帝国。按人类上古史的演变,由最早的部落到封建的君主世袭,这是一个大的进步,这是一个国家组织的完成。我们看禹时诸侯大会涂山,诛防风氏。启时大会诸侯钓台,诛有扈氏。都是说明这个国家组织与中央政府权力的扩大。</p>\n</li>\n<li><p>治水成功,推进农业。<br>夏人建国后配合农时而制订以建寅为岁首(正月)的历法。最合乎农业的时序,周人称夏人为“得天”。这个“夏正”历法,在商、周、秦时一度改变,到汉以后又恢复采用直用到今天,就是那四序分明的阴历,我们又叫做农历。由于夏禹的治水兴农,而建立了“农历”。我们又由这“农历”,可以推想到夏朝的农业社会。因为这“夏正”,是最符合农业的一个时序。<br>夏代的文化已入于铜器时代。我们现在出土的铜器,虽尚未有确切的文字足以证明是夏代的铜器。但在山西、河南带若干出土的铜器中,相信其中或有夏器,并且根据殷商铜器之精美,其铜器制造,一定为时已久,则上推两三百年在夏朝时定有铜器可无疑。禹铸九鼎之说见于《史记》、《说文》、《左传》、《墨子》诸书,自然不是虚构。并且自春秋到秦汉历代有求鼎之事,绝对不是毫无根据的狂妄举动。据说禹铸九鼎是集九牧之铜铸成,上面刻划着各地的方物所谓铸鼎象物”。看了这九鼎,就可以知道九州的产物情形,这和《禹贡》的制度正相配合。这九鼎一直成为传国重器,也就是国家的象征。</p>\n</li>\n</ol>\n<blockquote>\n<p>本文内容均抄录于[中华通史.上古史]，致谢陈致平先生</p>\n</blockquote>\n","site":{"data":{"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<p>@<a href=\"夏代\">TOC</a></p>\n<h1 id=\"夏国简介\"><a href=\"#夏国简介\" class=\"headerlink\" title=\"夏国简介\"></a>夏国简介</h1><p>帝舜去世,禹得到诸侯一致的拥护,继立为天子。他曾受舜封为夏伯,赐姓姒,故国号夏,建都安邑,他先后请皋陶与益佐理政事。禹的政治,一方面督励人民从事农耕;方面整伤社会秩序,法律很严。他从北而南巡视天下,曾大会诸侯于涂山。防风氏后到为禹所杀。史称执玉帛而来与会的有万国,执玉的是大国,执帛的是小国。这些诸侯也就是那个时候的氏族部落,足以说明禹声威之盛远过唐虞。他继续向东方巡视,行至中途,死在会稽山(今浙江绍兴东南),据说他的葬礼极其简单,所谓“桐棺三寸”、“衣衾三领”真是一生刻苦。禹死之后,有一段很短的时间,由益代行政事。后来诸侯,怀念禹功,都拥护禹子启而不拥护益。于是启继位为天子,从此建立了父子相传的君主制度。</p>\n<h1 id=\"夏代大事\"><a href=\"#夏代大事\" class=\"headerlink\" title=\"夏代大事\"></a>夏代大事</h1><p><img src=\"/2022/01/zhong-hua-tong-shi/20210703105815619.png\" alt><img src=\"/2022/01/zhong-hua-tong-shi/20210703105831609.png\" alt><img src=\"/2022/01/zhong-hua-tong-shi/20210703105920999.png\" alt><br>史称:“帝尧之时洪水滔天,浩浩怀山襄陵。”成为当时最严重的一个问题叠经派人治理,都没有成功,尧乃接受四岳的推荐,用鲧治水,鲧就是禹的父亲。鲧用堵塞的方法,多筑堤坝。但是洪水滔滔,随筑随溃,经过九年的功夫,没有成功,引起人民的怨愤。到了舜执政的时候,便将鲧殛死。而用鲧子禹继续治水。这洪水之灾,从尧初算起已经几十年了。舜又命益与弃协助禹。禹伤父功不成,乃焦思苦虑。不惜一切的劳苦,希望能完成先业,以雪父耻。他完全改变他父亲的方法,从疏导着手。他带着许多“准绳”、“规矩”等测量的工具,登山涉水,观察地形高下,而后施工。他又用了许多交通工具,史称“陆行乘车,水行乘船,泥行乘橇,山行乘撵。”他先从黄河的中段冀州地方开始。这也是黄河泛滥的枢纽地带(今山西、河南之间)。一步步的向东方的兖州、青州、徐州、南方的荆州、豫州疏导,最后又折向西北去整理黄河的上游。他将黄河下游的河道分辟为九股,散其水势。然后再分为漯济流入渤海。又疏通了许多其他的河道,完成了许多惊人的工程。他率领人民,和黄河作了十三年的奋斗,把这上百年的洪水之灾,完全治平。使老百姓免于饥溺流离之苦,能在黄河流域安居乐业下来。他这十三年中,为了国家和人民,奋不顾身,曾经几次经过家门而不入。顾不得饮食起居,他治水时总是亲自拿着募锸以身作则带头去作。冒着狂风暴雨,弄得身体憔悴而永不休息。和他同样辛苦的,还有协助他的益(虞)和弃(后稷)。益掌火,在治水之前,纵火焚山林,以驱禽兽,弃为后稷,掌播谷。在水平之后,教人民耕种,从事善后工作。他们这样辛劳,一方面获得百姓的爱戴;一方面获得后世的崇拜,禹成为后来苦行家墨子的宗师。而禹与后稷,被孟子尊为是“历史上最富于同情心的人”。<br>    夏启继立后,曾大会诸侯于钧台(今河南禹县许昌之间)。有扈氏不服,启率兵与有扈战于甘(今作《甘誓》)灭有扈。夏启的政权,乃归稳定。正式称为“夏后启”,启在位九年卒,子太康立。太康逸豫失政,太康五弟,追思禹德,乃作《五子之歌》。这时有东夷地方的一个有穷氏诸侯后羿作乱,太康被逼迁于斟部(河南巩县附近)。太康传弟仲康,仲康传子相,相又一度迁都于商邱(河南商邱),夏朝实际成为后羿的政权,后来后羿又被其权臣寒浞所杀,寒浞又弑相而篡夏,夏自禹至相不到九十年,而国统几绝。相妻有缗氏怀孕在身,逃至有仍(今山东济宁),生了一个遗腹子,是为少康。少康既长,从有仍氏地方逃到虞地(河南虞城),投奔有虞氏,有虞氏君收纳了少康,给以田一成(方十里为成)、众旅(五百人为旅)。后来少康就凭藉着这一成一旅的资本,强大起来。收抚旧日夏朝的士众,灭掉寒浞,复兴夏朝,还都于安邑,史称少康中兴。这后羿、寒浞之乱前后历时百年。<br>少康时曾再度发生河患,以冥为司空再度治河。由少康传子杼,杼传槐(是为夏之第八主)。槐即位,九夷来朝,九夷畎夷、于夷、方夷、黄夷、白夷、赤夷、玄夷、风夷、阳夷)都是居住在东方滨海一带的落后民族。这说明在夏朝中叶的时候,夏朝的政教势力,已远达东海之滨。以前五帝到夏禹时,主要的异族战斗是苗、黎。苗、黎在西方。到夏时征服苗黎之后,继之以服九夷,说明夏人之向东发展。这个夏朝的中兴,为时约二百年,传到第十四个君主孔甲,淫乱无度,夏政再衰。诸侯纷纷叛离,中枢的权力,日益纷散,夏政乃一蹶不振。《周语》说:“孔甲乱夏,四世而陨”。夏代从孔甲乱政,以后三传到了履癸,履癸先都斟郛,后都河南禹县)。这履癸就是夏桀,种种无道,荒淫奢侈。传说夏桀宠爱有施氏之女妹喜,又宠爱岷山氏二女琬、琰。又营建倾宫瑶台,作酒池肉林,杀忠臣关龙逢。太史令终古哭谏夏桀,夏桀不听,终古就亡奔于商。商人是东方的一个诸侯,世居于今安徽亳县到河南商邱一带的地方。从孔甲失德以后,商人逐渐壮大,逐渐获得诸侯的拥护。到了商汤的时候,诸侯多叛桀而归汤。有些诸侯不服从汤,汤出兵去讨伐。兵行所到之处,百姓无不欢迎。其威德远在夏桀之上。就在夏桀在位的第五十三年(公元前一七五一年),商汤俯顺舆情,率领诸侯之兵,讨伐夏桀。与夏桀大战于鸣条(旧说在山西安邑附近,近人考应在淮河之南),夏桀大败。向东南方逃走,被商汤一路追击。夏桀屡战屡败,终被商汤所俘。商汤就把夏桀流放在南巢(安徽巢县),三年而死,史称“商汤革命”。这是我国历史上第一次的贵族革命。这个夏朝,也是中国历史上第一个正式的朝代。凡历十四世,十七主,四百余年而亡。<br><img src=\"/2022/01/zhong-hua-tong-shi/20210703111602157.png\" alt></p>\n<h1 id=\"夏代影响\"><a href=\"#夏代影响\" class=\"headerlink\" title=\"夏代影响\"></a>夏代影响</h1><ol>\n<li><p>治水<br>禹治水的范围极大,据旧《史记》载,所谓疏“三江五湖”,几乎遍于全国,除了黄河之外,又导黄河的支流济水,又导淮水,又导长江。江、淮、河、济谓之四渎,所谓“四渎修,而民宅安。”我们近人推断,在那个时候,治水范围不会如此之广。我们可相信的是大禹的治水,是以黄河中段的冀州豫州为主。而渐及东方的兖州、徐州、可能的上溯到黄河上游的雍州、梁州和荆州的一部分。其他淮水与长江北面的若干支流。也可能附带的疏导过。然而仅这一个估计的范围已经很大,已经是禹率领着千万人民,经过十几年才能完成的功业。大禹治水的目的,是谋求人民生活的安定,使人民生活安定最好的方法,是使人民在这片新整理的土地上从事农耕。所以大禹治水后,就由弃的协助展开全面的农村建设,从夏朝起中国正式成为一个农业的国家。又由于治河的结果,自然而然的了解到各地的地势物产、风俗人情,自然171中华通史·第一卷·绪论上古史而然的加强了中央与地方及人民的联系。于是他制定了一个政治的区划,这个区划是分全国为九州。这九州是雍州(约当今陕西之地)、冀州(约当今山西南部)、豫州(约当今河南)、兖州(约当今河北南部)、青州(约当今山东)、徐州约当今苏北、皖北)、扬州(约当今皖南、苏南)、荆州(约当今豫南与湖北)梁州〔约当今陕南)成为中国版图的基础。<br>又分为全国为五服(以王畿为中心,王畿四周五百里内为甸服,五百里外为侯服,侯服外五百里为绥服,绥服外五百里为要服,要服外五百里为荒服),构成一个以王京为中心的空间观念。又根据各地的物产,制为九等贡赋。此孟子所谓“夏后氏五十而贡”。这就是禹贡九州。所以由于大禹的治水的结果,他奠定了中国的农业社会;他建立了中国的疆域概念。他是最早建立中华民族成为一个国家的大英雄。禹称夏后氏,“夏”便成为我民族对外之代名辞。按《说文》“夏”字“”作人形,注云:“中国人也”(因之,当时中国境内诸民族,称为诸夏)。故后人称禹为大禹,诚非偶然。</p>\n</li>\n<li><p>大禹始称王,始定传子之局。<br>以前五帝的共主称氏,以前虞舜的禅让,均未脱氏族的形态。到了夏禹以后传子称王,证明中央的权威提高。诸侯对于中央的关系更加服从,更加密切。中央王室的政权更加稳定,更进一步走向封建帝国。按人类上古史的演变,由最早的部落到封建的君主世袭,这是一个大的进步,这是一个国家组织的完成。我们看禹时诸侯大会涂山,诛防风氏。启时大会诸侯钓台,诛有扈氏。都是说明这个国家组织与中央政府权力的扩大。</p>\n</li>\n<li><p>治水成功,推进农业。<br>夏人建国后配合农时而制订以建寅为岁首(正月)的历法。最合乎农业的时序,周人称夏人为“得天”。这个“夏正”历法,在商、周、秦时一度改变,到汉以后又恢复采用直用到今天,就是那四序分明的阴历,我们又叫做农历。由于夏禹的治水兴农,而建立了“农历”。我们又由这“农历”,可以推想到夏朝的农业社会。因为这“夏正”,是最符合农业的一个时序。<br>夏代的文化已入于铜器时代。我们现在出土的铜器,虽尚未有确切的文字足以证明是夏代的铜器。但在山西、河南带若干出土的铜器中,相信其中或有夏器,并且根据殷商铜器之精美,其铜器制造,一定为时已久,则上推两三百年在夏朝时定有铜器可无疑。禹铸九鼎之说见于《史记》、《说文》、《左传》、《墨子》诸书,自然不是虚构。并且自春秋到秦汉历代有求鼎之事,绝对不是毫无根据的狂妄举动。据说禹铸九鼎是集九牧之铜铸成,上面刻划着各地的方物所谓铸鼎象物”。看了这九鼎,就可以知道九州的产物情形,这和《禹贡》的制度正相配合。这九鼎一直成为传国重器,也就是国家的象征。</p>\n</li>\n</ol>\n<blockquote>\n<p>本文内容均抄录于[中华通史.上古史]，致谢陈致平先生</p>\n</blockquote>\n"},{"title":"python使用百度翻译的API","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-01-01T12:12:26.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"  API 在python中就相当于一串代码，我们直接调用结果就够了，今天我们使用百度API打造自己的翻译小可爱。\n  百度搜索：百度apistore\n  ![](python使用百度翻译的API/20200302112753932.png)\n  进入后点击翻译\n  ![](python使用百度翻译的API/20200302112847600.png)\n  接下来各位就可以探索了，注册的艰巨任务就交给你们了。\n  注册后出现以下数据就ok了![](python使用百度翻译的API/20200302113313981.png)\n  我们参考百度api的文档与支持里面的开发者文档的通用翻译API里面有使用的方法，如图![](python使用百度翻译的API/20200302113654396.png)\n  大概的看下说明文档一下代码就可以很好的理解了 ，接下来直接代码分析\n  \n\n```python\nimport random\nimport hashlib\nimport urllib\nimport requests\nimport json                                               #安装相应的库\n\n\nsrc = 'zh'                                                #翻译的源语言\nobj = 'en'                                                #翻译的目标语言\nappid = 'xxxxxxxxxxx'                                     #这里输入你注册后得到的appid\nsecretKey = 'xxxxxxxxxx'                                  #这里输入你注册后得到的密匙       \n\nmyurl = 'http://api.fanyi.baidu.com/api/trans/vip/translate'                  #必须加上的头\nword= input('请输入你要翻译的中文：')                                           #输入你要翻译的中文\nsalt = random.randint(31256, 66253)                                           #产生随计数\n\nsign = appid + word + str(salt) + secretKey                                   #文档的step1拼接字符串\nm1 = hashlib.md5()\nm1.update(sign.encode('utf-8'))\nsign = m1.hexdigest()                                                         #文档的step2计算签名\nmyur1 = myurl  + '?q=' + urllib.parse.quote(\n    word) + '&from=' + src + '&to=' + obj + '&appid='+ appid + '&salt=' + str(salt) + '&sign=' + sign\nprint (myur1)                                                                 #生成的url并打印出来\nenglish_data = requests.get(myur1)                                            #请求url\njs_data = json.loads(english_data.text)                                       #下载json数据\ncontent = js_data['trans_result'][0]['dst']                                   #提取json数据里面的dst\nprint (content)                                                               #打印出翻译的英文\n```\n![](python使用百度翻译的API/20200302115943813.png)\n这是运行的结构；其中翻译的url点击进去就会跳到浏览器里面 如图：\n![](python使用百度翻译的API/20200302120105912.png)\n里面的数据其实是字典结构的我们使用json的库提取其中的dst就是我们需要的翻译结果\n\n","source":"_posts/2022/01/python使用百度翻译的API.md","raw":"---\ntitle: python使用百度翻译的API\npermalink: python使用百度翻译的API\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-01-01 20:12:26\npassword:\nsummary:\ntags:\n- python\ncategories:\n- python\nkeywords:\ndescription:\n---\n  API 在python中就相当于一串代码，我们直接调用结果就够了，今天我们使用百度API打造自己的翻译小可爱。\n  百度搜索：百度apistore\n  ![](python使用百度翻译的API/20200302112753932.png)\n  进入后点击翻译\n  ![](python使用百度翻译的API/20200302112847600.png)\n  接下来各位就可以探索了，注册的艰巨任务就交给你们了。\n  注册后出现以下数据就ok了![](python使用百度翻译的API/20200302113313981.png)\n  我们参考百度api的文档与支持里面的开发者文档的通用翻译API里面有使用的方法，如图![](python使用百度翻译的API/20200302113654396.png)\n  大概的看下说明文档一下代码就可以很好的理解了 ，接下来直接代码分析\n  \n\n```python\nimport random\nimport hashlib\nimport urllib\nimport requests\nimport json                                               #安装相应的库\n\n\nsrc = 'zh'                                                #翻译的源语言\nobj = 'en'                                                #翻译的目标语言\nappid = 'xxxxxxxxxxx'                                     #这里输入你注册后得到的appid\nsecretKey = 'xxxxxxxxxx'                                  #这里输入你注册后得到的密匙       \n\nmyurl = 'http://api.fanyi.baidu.com/api/trans/vip/translate'                  #必须加上的头\nword= input('请输入你要翻译的中文：')                                           #输入你要翻译的中文\nsalt = random.randint(31256, 66253)                                           #产生随计数\n\nsign = appid + word + str(salt) + secretKey                                   #文档的step1拼接字符串\nm1 = hashlib.md5()\nm1.update(sign.encode('utf-8'))\nsign = m1.hexdigest()                                                         #文档的step2计算签名\nmyur1 = myurl  + '?q=' + urllib.parse.quote(\n    word) + '&from=' + src + '&to=' + obj + '&appid='+ appid + '&salt=' + str(salt) + '&sign=' + sign\nprint (myur1)                                                                 #生成的url并打印出来\nenglish_data = requests.get(myur1)                                            #请求url\njs_data = json.loads(english_data.text)                                       #下载json数据\ncontent = js_data['trans_result'][0]['dst']                                   #提取json数据里面的dst\nprint (content)                                                               #打印出翻译的英文\n```\n![](python使用百度翻译的API/20200302115943813.png)\n这是运行的结构；其中翻译的url点击进去就会跳到浏览器里面 如图：\n![](python使用百度翻译的API/20200302120105912.png)\n里面的数据其实是字典结构的我们使用json的库提取其中的dst就是我们需要的翻译结果\n\n","slug":"python使用百度翻译的API","published":1,"updated":"2023-04-02T16:10:56.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzm4laf000czkvq71lfi0ex","content":"<p>  API 在python中就相当于一串代码，我们直接调用结果就够了，今天我们使用百度API打造自己的翻译小可爱。<br>  百度搜索：百度apistore<br>  <img src=\"/.com//20200302112753932.png\" alt><br>  进入后点击翻译<br>  <img src=\"/.com//20200302112847600.png\" alt><br>  接下来各位就可以探索了，注册的艰巨任务就交给你们了。<br>  注册后出现以下数据就ok了<img src=\"/.com//20200302113313981.png\" alt><br>  我们参考百度api的文档与支持里面的开发者文档的通用翻译API里面有使用的方法，如图<img src=\"/.com//20200302113654396.png\" alt><br>  大概的看下说明文档一下代码就可以很好的理解了 ，接下来直接代码分析</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json                                               <span class=\"comment\">#安装相应的库</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">src = <span class=\"string\">'zh'</span>                                                <span class=\"comment\">#翻译的源语言</span></span><br><span class=\"line\">obj = <span class=\"string\">'en'</span>                                                <span class=\"comment\">#翻译的目标语言</span></span><br><span class=\"line\">appid = <span class=\"string\">'xxxxxxxxxxx'</span>                                     <span class=\"comment\">#这里输入你注册后得到的appid</span></span><br><span class=\"line\">secretKey = <span class=\"string\">'xxxxxxxxxx'</span>                                  <span class=\"comment\">#这里输入你注册后得到的密匙       </span></span><br><span class=\"line\"></span><br><span class=\"line\">myurl = <span class=\"string\">'http://api.fanyi.baidu.com/api/trans/vip/translate'</span>                  <span class=\"comment\">#必须加上的头</span></span><br><span class=\"line\">word= input(<span class=\"string\">'请输入你要翻译的中文：'</span>)                                           <span class=\"comment\">#输入你要翻译的中文</span></span><br><span class=\"line\">salt = random.randint(<span class=\"number\">31256</span>, <span class=\"number\">66253</span>)                                           <span class=\"comment\">#产生随计数</span></span><br><span class=\"line\"></span><br><span class=\"line\">sign = appid + word + str(salt) + secretKey                                   <span class=\"comment\">#文档的step1拼接字符串</span></span><br><span class=\"line\">m1 = hashlib.md5()</span><br><span class=\"line\">m1.update(sign.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">sign = m1.hexdigest()                                                         <span class=\"comment\">#文档的step2计算签名</span></span><br><span class=\"line\">myur1 = myurl  + <span class=\"string\">'?q='</span> + urllib.parse.quote(</span><br><span class=\"line\">    word) + <span class=\"string\">'&amp;from='</span> + src + <span class=\"string\">'&amp;to='</span> + obj + <span class=\"string\">'&amp;appid='</span>+ appid + <span class=\"string\">'&amp;salt='</span> + str(salt) + <span class=\"string\">'&amp;sign='</span> + sign</span><br><span class=\"line\"><span class=\"keyword\">print</span> (myur1)                                                                 <span class=\"comment\">#生成的url并打印出来</span></span><br><span class=\"line\">english_data = requests.get(myur1)                                            <span class=\"comment\">#请求url</span></span><br><span class=\"line\">js_data = json.loads(english_data.text)                                       <span class=\"comment\">#下载json数据</span></span><br><span class=\"line\">content = js_data[<span class=\"string\">'trans_result'</span>][<span class=\"number\">0</span>][<span class=\"string\">'dst'</span>]                                   <span class=\"comment\">#提取json数据里面的dst</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (content)                                                               <span class=\"comment\">#打印出翻译的英文</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//20200302115943813.png\" alt><br>这是运行的结构；其中翻译的url点击进去就会跳到浏览器里面 如图：<br><img src=\"/.com//20200302120105912.png\" alt><br>里面的数据其实是字典结构的我们使用json的库提取其中的dst就是我们需要的翻译结果</p>\n","site":{"data":{"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<p>  API 在python中就相当于一串代码，我们直接调用结果就够了，今天我们使用百度API打造自己的翻译小可爱。<br>  百度搜索：百度apistore<br>  <img src=\"/.com//20200302112753932.png\" alt><br>  进入后点击翻译<br>  <img src=\"/.com//20200302112847600.png\" alt><br>  接下来各位就可以探索了，注册的艰巨任务就交给你们了。<br>  注册后出现以下数据就ok了<img src=\"/.com//20200302113313981.png\" alt><br>  我们参考百度api的文档与支持里面的开发者文档的通用翻译API里面有使用的方法，如图<img src=\"/.com//20200302113654396.png\" alt><br>  大概的看下说明文档一下代码就可以很好的理解了 ，接下来直接代码分析</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json                                               <span class=\"comment\">#安装相应的库</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">src = <span class=\"string\">'zh'</span>                                                <span class=\"comment\">#翻译的源语言</span></span><br><span class=\"line\">obj = <span class=\"string\">'en'</span>                                                <span class=\"comment\">#翻译的目标语言</span></span><br><span class=\"line\">appid = <span class=\"string\">'xxxxxxxxxxx'</span>                                     <span class=\"comment\">#这里输入你注册后得到的appid</span></span><br><span class=\"line\">secretKey = <span class=\"string\">'xxxxxxxxxx'</span>                                  <span class=\"comment\">#这里输入你注册后得到的密匙       </span></span><br><span class=\"line\"></span><br><span class=\"line\">myurl = <span class=\"string\">'http://api.fanyi.baidu.com/api/trans/vip/translate'</span>                  <span class=\"comment\">#必须加上的头</span></span><br><span class=\"line\">word= input(<span class=\"string\">'请输入你要翻译的中文：'</span>)                                           <span class=\"comment\">#输入你要翻译的中文</span></span><br><span class=\"line\">salt = random.randint(<span class=\"number\">31256</span>, <span class=\"number\">66253</span>)                                           <span class=\"comment\">#产生随计数</span></span><br><span class=\"line\"></span><br><span class=\"line\">sign = appid + word + str(salt) + secretKey                                   <span class=\"comment\">#文档的step1拼接字符串</span></span><br><span class=\"line\">m1 = hashlib.md5()</span><br><span class=\"line\">m1.update(sign.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">sign = m1.hexdigest()                                                         <span class=\"comment\">#文档的step2计算签名</span></span><br><span class=\"line\">myur1 = myurl  + <span class=\"string\">'?q='</span> + urllib.parse.quote(</span><br><span class=\"line\">    word) + <span class=\"string\">'&amp;from='</span> + src + <span class=\"string\">'&amp;to='</span> + obj + <span class=\"string\">'&amp;appid='</span>+ appid + <span class=\"string\">'&amp;salt='</span> + str(salt) + <span class=\"string\">'&amp;sign='</span> + sign</span><br><span class=\"line\"><span class=\"keyword\">print</span> (myur1)                                                                 <span class=\"comment\">#生成的url并打印出来</span></span><br><span class=\"line\">english_data = requests.get(myur1)                                            <span class=\"comment\">#请求url</span></span><br><span class=\"line\">js_data = json.loads(english_data.text)                                       <span class=\"comment\">#下载json数据</span></span><br><span class=\"line\">content = js_data[<span class=\"string\">'trans_result'</span>][<span class=\"number\">0</span>][<span class=\"string\">'dst'</span>]                                   <span class=\"comment\">#提取json数据里面的dst</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (content)                                                               <span class=\"comment\">#打印出翻译的英文</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//20200302115943813.png\" alt><br>这是运行的结构；其中翻译的url点击进去就会跳到浏览器里面 如图：<br><img src=\"/.com//20200302120105912.png\" alt><br>里面的数据其实是字典结构的我们使用json的库提取其中的dst就是我们需要的翻译结果</p>\n"},{"title":"超详细解析python爬取外网图片","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-01-01T11:46:39.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"废话不多说直接上货\n\n```python\nfrom bs4 import BeautifulSoup          #网页解析库\nimport requests                        #网页请求库\nimport json                            #json数据解析库\nimport random                          #随机数产生库\nimport hashlib                         #MD5加密算法的模块\nimport urllib                          #python自带的http请求库\n\nlist = []                              #存放图片的网站\n\nheaders ={\n    'accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0'\n}                                      #我用的是Firefox浏览器伪造请求头\ndef baidu_translate(text, fromLang='zh', toLang='en'):                    #中文翻译函数（不懂请看下面链接）\n    appid = 'xxxxxxxxxxxxxx'                                              #每个账号的appid\n    secretKey = 'xxxxxxxxxxxxx'                                           #每个账号的钥匙\n\n    myurl = 'http://api.fanyi.baidu.com/api/trans/vip/translate'          #百度翻译必须带上的头部\n    q = text                                                              #需要翻译的中文\n    salt = random.randint(32768, 65536)                                   #salt是产生的随机数\n\n    sign = appid + q + str(salt) + secretKey                              #拼接字符串1\n    m1 = hashlib.md5()                                                 \n    m1.update(sign.encode('utf-8'))                             \n    sign = m1.hexdigest()                                                 #mdk5加密生成的计算签名\n    myur1 = myurl  + '?q=' + urllib.parse.quote(\n        q) + '&from=' + fromLang + '&to=' + toLang + '&appid='+ appid + '&salt=' + str(salt) + '&sign=' + sign                                     #拼接字符串1+mdk5加密生成的计算签名生产的翻译网页\n    return myur1                                                          #函数返回翻译网页\n\nurl_path = 'https://unsplash.com/s/photos/'         #我爬取的是国外的unsplash网站的图片\nword= input('请输入你要下载的图片：')                                      #输入中文要下载的图片\nenglish_data = requests.get(baidu_translate(word))                       #请求百度翻译api的翻译                                          \njs_data = json.loads(english_data.text)                                  #下载翻译网页返回的json数据                          \ncontent = js_data['trans_result'][0]['dst']                              #提取其中的英文翻译\nurl = url_path + content + '/'                      #将英文翻译添加到图片网站上形成你要访问的图片主页\n\nwb_data = requests.get(url,headers=headers)                              #请求图片网站数据\nsoup = BeautifulSoup(wb_data.text,'lxml')                                #解析数据\nimgs = soup.select('a > div > img')                                      #定位到图片的网页地址\n\nfor img in imgs:                                                         #将所有的图片url都下载到list中\n    photo = img.get('src')                                               #提取src节点的数据\n    list.append(photo)                                                   #得到图片的url\n\npath = 'C:/Users/qq/Pictures/Camera Roll/'                               #我的保存路径\nfor item in list:                                                        #读取每个图片的url\n        data = requests.get(item,headers=headers)                        #请求url\n        fp = open(path+item.split('?')[0][-27:]+'.jpg','wb')             #图片的名字\n        fp.write(data.content)                                           #下载图片\n        fp.close()                                                       #下载完成关闭图片\n       \n\n\n```\n下面说下重点\n1.百度翻译的实现过程，请看下面的文章：[百度API的使用方法](https://blog.csdn.net/weixin_43495433/article/details/104608087)\n2.图片网站和图片的url：\n   图片网站是指查找图片的网站!![](超详细解析python爬取外网图片/20200302110709393.png)\n   这个是图片的url![这个是图片的url](超详细解析python爬取外网图片/20200302111109517.png)","source":"_posts/2022/01/超详细解析python爬取外网图片.md","raw":"---\ntitle: 超详细解析python爬取外网图片\npermalink: 超详细解析python爬取外网图片\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-01-01 19:46:39\npassword:\nsummary:\ntags:\n- python\ncategories:\n- python\nkeywords:\ndescription:\n---\n废话不多说直接上货\n\n```python\nfrom bs4 import BeautifulSoup          #网页解析库\nimport requests                        #网页请求库\nimport json                            #json数据解析库\nimport random                          #随机数产生库\nimport hashlib                         #MD5加密算法的模块\nimport urllib                          #python自带的http请求库\n\nlist = []                              #存放图片的网站\n\nheaders ={\n    'accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0'\n}                                      #我用的是Firefox浏览器伪造请求头\ndef baidu_translate(text, fromLang='zh', toLang='en'):                    #中文翻译函数（不懂请看下面链接）\n    appid = 'xxxxxxxxxxxxxx'                                              #每个账号的appid\n    secretKey = 'xxxxxxxxxxxxx'                                           #每个账号的钥匙\n\n    myurl = 'http://api.fanyi.baidu.com/api/trans/vip/translate'          #百度翻译必须带上的头部\n    q = text                                                              #需要翻译的中文\n    salt = random.randint(32768, 65536)                                   #salt是产生的随机数\n\n    sign = appid + q + str(salt) + secretKey                              #拼接字符串1\n    m1 = hashlib.md5()                                                 \n    m1.update(sign.encode('utf-8'))                             \n    sign = m1.hexdigest()                                                 #mdk5加密生成的计算签名\n    myur1 = myurl  + '?q=' + urllib.parse.quote(\n        q) + '&from=' + fromLang + '&to=' + toLang + '&appid='+ appid + '&salt=' + str(salt) + '&sign=' + sign                                     #拼接字符串1+mdk5加密生成的计算签名生产的翻译网页\n    return myur1                                                          #函数返回翻译网页\n\nurl_path = 'https://unsplash.com/s/photos/'         #我爬取的是国外的unsplash网站的图片\nword= input('请输入你要下载的图片：')                                      #输入中文要下载的图片\nenglish_data = requests.get(baidu_translate(word))                       #请求百度翻译api的翻译                                          \njs_data = json.loads(english_data.text)                                  #下载翻译网页返回的json数据                          \ncontent = js_data['trans_result'][0]['dst']                              #提取其中的英文翻译\nurl = url_path + content + '/'                      #将英文翻译添加到图片网站上形成你要访问的图片主页\n\nwb_data = requests.get(url,headers=headers)                              #请求图片网站数据\nsoup = BeautifulSoup(wb_data.text,'lxml')                                #解析数据\nimgs = soup.select('a > div > img')                                      #定位到图片的网页地址\n\nfor img in imgs:                                                         #将所有的图片url都下载到list中\n    photo = img.get('src')                                               #提取src节点的数据\n    list.append(photo)                                                   #得到图片的url\n\npath = 'C:/Users/qq/Pictures/Camera Roll/'                               #我的保存路径\nfor item in list:                                                        #读取每个图片的url\n        data = requests.get(item,headers=headers)                        #请求url\n        fp = open(path+item.split('?')[0][-27:]+'.jpg','wb')             #图片的名字\n        fp.write(data.content)                                           #下载图片\n        fp.close()                                                       #下载完成关闭图片\n       \n\n\n```\n下面说下重点\n1.百度翻译的实现过程，请看下面的文章：[百度API的使用方法](https://blog.csdn.net/weixin_43495433/article/details/104608087)\n2.图片网站和图片的url：\n   图片网站是指查找图片的网站!![](超详细解析python爬取外网图片/20200302110709393.png)\n   这个是图片的url![这个是图片的url](超详细解析python爬取外网图片/20200302111109517.png)","slug":"超详细解析python爬取外网图片","published":1,"updated":"2023-04-02T15:28:33.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzm4lam000dzkvq4u7ogmt6","content":"<p>废话不多说直接上货</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup          <span class=\"comment\">#网页解析库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests                        <span class=\"comment\">#网页请求库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> json                            <span class=\"comment\">#json数据解析库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random                          <span class=\"comment\">#随机数产生库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib                         <span class=\"comment\">#MD5加密算法的模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib                          <span class=\"comment\">#python自带的http请求库</span></span><br><span class=\"line\"></span><br><span class=\"line\">list = []                              <span class=\"comment\">#存放图片的网站</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers =&#123;</span><br><span class=\"line\">    <span class=\"string\">'accept'</span>:<span class=\"string\">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0'</span></span><br><span class=\"line\">&#125;                                      <span class=\"comment\">#我用的是Firefox浏览器伪造请求头</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">baidu_translate</span><span class=\"params\">(text, fromLang=<span class=\"string\">'zh'</span>, toLang=<span class=\"string\">'en'</span>)</span>:</span>                    <span class=\"comment\">#中文翻译函数（不懂请看下面链接）</span></span><br><span class=\"line\">    appid = <span class=\"string\">'xxxxxxxxxxxxxx'</span>                                              <span class=\"comment\">#每个账号的appid</span></span><br><span class=\"line\">    secretKey = <span class=\"string\">'xxxxxxxxxxxxx'</span>                                           <span class=\"comment\">#每个账号的钥匙</span></span><br><span class=\"line\"></span><br><span class=\"line\">    myurl = <span class=\"string\">'http://api.fanyi.baidu.com/api/trans/vip/translate'</span>          <span class=\"comment\">#百度翻译必须带上的头部</span></span><br><span class=\"line\">    q = text                                                              <span class=\"comment\">#需要翻译的中文</span></span><br><span class=\"line\">    salt = random.randint(<span class=\"number\">32768</span>, <span class=\"number\">65536</span>)                                   <span class=\"comment\">#salt是产生的随机数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sign = appid + q + str(salt) + secretKey                              <span class=\"comment\">#拼接字符串1</span></span><br><span class=\"line\">    m1 = hashlib.md5()                                                 </span><br><span class=\"line\">    m1.update(sign.encode(<span class=\"string\">'utf-8'</span>))                             </span><br><span class=\"line\">    sign = m1.hexdigest()                                                 <span class=\"comment\">#mdk5加密生成的计算签名</span></span><br><span class=\"line\">    myur1 = myurl  + <span class=\"string\">'?q='</span> + urllib.parse.quote(</span><br><span class=\"line\">        q) + <span class=\"string\">'&amp;from='</span> + fromLang + <span class=\"string\">'&amp;to='</span> + toLang + <span class=\"string\">'&amp;appid='</span>+ appid + <span class=\"string\">'&amp;salt='</span> + str(salt) + <span class=\"string\">'&amp;sign='</span> + sign                                     <span class=\"comment\">#拼接字符串1+mdk5加密生成的计算签名生产的翻译网页</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> myur1                                                          <span class=\"comment\">#函数返回翻译网页</span></span><br><span class=\"line\"></span><br><span class=\"line\">url_path = <span class=\"string\">'https://unsplash.com/s/photos/'</span>         <span class=\"comment\">#我爬取的是国外的unsplash网站的图片</span></span><br><span class=\"line\">word= input(<span class=\"string\">'请输入你要下载的图片：'</span>)                                      <span class=\"comment\">#输入中文要下载的图片</span></span><br><span class=\"line\">english_data = requests.get(baidu_translate(word))                       <span class=\"comment\">#请求百度翻译api的翻译                                          </span></span><br><span class=\"line\">js_data = json.loads(english_data.text)                                  <span class=\"comment\">#下载翻译网页返回的json数据                          </span></span><br><span class=\"line\">content = js_data[<span class=\"string\">'trans_result'</span>][<span class=\"number\">0</span>][<span class=\"string\">'dst'</span>]                              <span class=\"comment\">#提取其中的英文翻译</span></span><br><span class=\"line\">url = url_path + content + <span class=\"string\">'/'</span>                      <span class=\"comment\">#将英文翻译添加到图片网站上形成你要访问的图片主页</span></span><br><span class=\"line\"></span><br><span class=\"line\">wb_data = requests.get(url,headers=headers)                              <span class=\"comment\">#请求图片网站数据</span></span><br><span class=\"line\">soup = BeautifulSoup(wb_data.text,<span class=\"string\">'lxml'</span>)                                <span class=\"comment\">#解析数据</span></span><br><span class=\"line\">imgs = soup.select(<span class=\"string\">'a &gt; div &gt; img'</span>)                                      <span class=\"comment\">#定位到图片的网页地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> img <span class=\"keyword\">in</span> imgs:                                                         <span class=\"comment\">#将所有的图片url都下载到list中</span></span><br><span class=\"line\">    photo = img.get(<span class=\"string\">'src'</span>)                                               <span class=\"comment\">#提取src节点的数据</span></span><br><span class=\"line\">    list.append(photo)                                                   <span class=\"comment\">#得到图片的url</span></span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">'C:/Users/qq/Pictures/Camera Roll/'</span>                               <span class=\"comment\">#我的保存路径</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list:                                                        <span class=\"comment\">#读取每个图片的url</span></span><br><span class=\"line\">        data = requests.get(item,headers=headers)                        <span class=\"comment\">#请求url</span></span><br><span class=\"line\">        fp = open(path+item.split(<span class=\"string\">'?'</span>)[<span class=\"number\">0</span>][<span class=\"number\">-27</span>:]+<span class=\"string\">'.jpg'</span>,<span class=\"string\">'wb'</span>)             <span class=\"comment\">#图片的名字</span></span><br><span class=\"line\">        fp.write(data.content)                                           <span class=\"comment\">#下载图片</span></span><br><span class=\"line\">        fp.close()                                                       <span class=\"comment\">#下载完成关闭图片</span></span><br></pre></td></tr></table></figure>\n\n<p>下面说下重点<br>1.百度翻译的实现过程，请看下面的文章：<a href=\"https://blog.csdn.net/weixin_43495433/article/details/104608087\" target=\"_blank\" rel=\"noopener\">百度API的使用方法</a><br>2.图片网站和图片的url：<br>   图片网站是指查找图片的网站!<img src=\"/.com//20200302110709393.png\" alt><br>   这个是图片的url<img src=\"/.com//20200302111109517.png\" alt=\"这个是图片的url\"></p>\n","site":{"data":{"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<p>废话不多说直接上货</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup          <span class=\"comment\">#网页解析库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests                        <span class=\"comment\">#网页请求库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> json                            <span class=\"comment\">#json数据解析库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random                          <span class=\"comment\">#随机数产生库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib                         <span class=\"comment\">#MD5加密算法的模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib                          <span class=\"comment\">#python自带的http请求库</span></span><br><span class=\"line\"></span><br><span class=\"line\">list = []                              <span class=\"comment\">#存放图片的网站</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers =&#123;</span><br><span class=\"line\">    <span class=\"string\">'accept'</span>:<span class=\"string\">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0'</span></span><br><span class=\"line\">&#125;                                      <span class=\"comment\">#我用的是Firefox浏览器伪造请求头</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">baidu_translate</span><span class=\"params\">(text, fromLang=<span class=\"string\">'zh'</span>, toLang=<span class=\"string\">'en'</span>)</span>:</span>                    <span class=\"comment\">#中文翻译函数（不懂请看下面链接）</span></span><br><span class=\"line\">    appid = <span class=\"string\">'xxxxxxxxxxxxxx'</span>                                              <span class=\"comment\">#每个账号的appid</span></span><br><span class=\"line\">    secretKey = <span class=\"string\">'xxxxxxxxxxxxx'</span>                                           <span class=\"comment\">#每个账号的钥匙</span></span><br><span class=\"line\"></span><br><span class=\"line\">    myurl = <span class=\"string\">'http://api.fanyi.baidu.com/api/trans/vip/translate'</span>          <span class=\"comment\">#百度翻译必须带上的头部</span></span><br><span class=\"line\">    q = text                                                              <span class=\"comment\">#需要翻译的中文</span></span><br><span class=\"line\">    salt = random.randint(<span class=\"number\">32768</span>, <span class=\"number\">65536</span>)                                   <span class=\"comment\">#salt是产生的随机数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sign = appid + q + str(salt) + secretKey                              <span class=\"comment\">#拼接字符串1</span></span><br><span class=\"line\">    m1 = hashlib.md5()                                                 </span><br><span class=\"line\">    m1.update(sign.encode(<span class=\"string\">'utf-8'</span>))                             </span><br><span class=\"line\">    sign = m1.hexdigest()                                                 <span class=\"comment\">#mdk5加密生成的计算签名</span></span><br><span class=\"line\">    myur1 = myurl  + <span class=\"string\">'?q='</span> + urllib.parse.quote(</span><br><span class=\"line\">        q) + <span class=\"string\">'&amp;from='</span> + fromLang + <span class=\"string\">'&amp;to='</span> + toLang + <span class=\"string\">'&amp;appid='</span>+ appid + <span class=\"string\">'&amp;salt='</span> + str(salt) + <span class=\"string\">'&amp;sign='</span> + sign                                     <span class=\"comment\">#拼接字符串1+mdk5加密生成的计算签名生产的翻译网页</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> myur1                                                          <span class=\"comment\">#函数返回翻译网页</span></span><br><span class=\"line\"></span><br><span class=\"line\">url_path = <span class=\"string\">'https://unsplash.com/s/photos/'</span>         <span class=\"comment\">#我爬取的是国外的unsplash网站的图片</span></span><br><span class=\"line\">word= input(<span class=\"string\">'请输入你要下载的图片：'</span>)                                      <span class=\"comment\">#输入中文要下载的图片</span></span><br><span class=\"line\">english_data = requests.get(baidu_translate(word))                       <span class=\"comment\">#请求百度翻译api的翻译                                          </span></span><br><span class=\"line\">js_data = json.loads(english_data.text)                                  <span class=\"comment\">#下载翻译网页返回的json数据                          </span></span><br><span class=\"line\">content = js_data[<span class=\"string\">'trans_result'</span>][<span class=\"number\">0</span>][<span class=\"string\">'dst'</span>]                              <span class=\"comment\">#提取其中的英文翻译</span></span><br><span class=\"line\">url = url_path + content + <span class=\"string\">'/'</span>                      <span class=\"comment\">#将英文翻译添加到图片网站上形成你要访问的图片主页</span></span><br><span class=\"line\"></span><br><span class=\"line\">wb_data = requests.get(url,headers=headers)                              <span class=\"comment\">#请求图片网站数据</span></span><br><span class=\"line\">soup = BeautifulSoup(wb_data.text,<span class=\"string\">'lxml'</span>)                                <span class=\"comment\">#解析数据</span></span><br><span class=\"line\">imgs = soup.select(<span class=\"string\">'a &gt; div &gt; img'</span>)                                      <span class=\"comment\">#定位到图片的网页地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> img <span class=\"keyword\">in</span> imgs:                                                         <span class=\"comment\">#将所有的图片url都下载到list中</span></span><br><span class=\"line\">    photo = img.get(<span class=\"string\">'src'</span>)                                               <span class=\"comment\">#提取src节点的数据</span></span><br><span class=\"line\">    list.append(photo)                                                   <span class=\"comment\">#得到图片的url</span></span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">'C:/Users/qq/Pictures/Camera Roll/'</span>                               <span class=\"comment\">#我的保存路径</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list:                                                        <span class=\"comment\">#读取每个图片的url</span></span><br><span class=\"line\">        data = requests.get(item,headers=headers)                        <span class=\"comment\">#请求url</span></span><br><span class=\"line\">        fp = open(path+item.split(<span class=\"string\">'?'</span>)[<span class=\"number\">0</span>][<span class=\"number\">-27</span>:]+<span class=\"string\">'.jpg'</span>,<span class=\"string\">'wb'</span>)             <span class=\"comment\">#图片的名字</span></span><br><span class=\"line\">        fp.write(data.content)                                           <span class=\"comment\">#下载图片</span></span><br><span class=\"line\">        fp.close()                                                       <span class=\"comment\">#下载完成关闭图片</span></span><br></pre></td></tr></table></figure>\n\n<p>下面说下重点<br>1.百度翻译的实现过程，请看下面的文章：<a href=\"https://blog.csdn.net/weixin_43495433/article/details/104608087\" target=\"_blank\" rel=\"noopener\">百度API的使用方法</a><br>2.图片网站和图片的url：<br>   图片网站是指查找图片的网站!<img src=\"/.com//20200302110709393.png\" alt><br>   这个是图片的url<img src=\"/.com//20200302111109517.png\" alt=\"这个是图片的url\"></p>\n"},{"title":"菜鸟应该如何开始设计一个项目的嵌入式软件架构","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-01-01T12:21:23.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"@[toc]\n## 前言\n*<font size=2 >CSDN，GIT等各大论坛上很多文章都有讲，如何设计项目的嵌入式软件架构，But门槛实在太高了，需要做需求调研，需求分析，概要设计，详细设计，架构验证，开发-单元测试，集成测试等等，实不相瞒这些没有半年八载的项目经验根本做不出来的，刚好经过这周的嵌入式架构培训，提炼下最近在做项目的嵌入式软件架构的设计经验吧，不喜勿碰，谢谢。*\n## 六步走战略\n### 第0步——嵌软需求：功能/接口/质量/硬件约束/方案约束/数据流\n ## 技能一：用例图和用例描述\n<font color=blue>Q:需求如何转换成软件框架\n<font color=blue>A:画用例图，写用列描述 \n\n**<font size=4 >用例图**（Use Case Diagrame）：描述了人们希望如何使用一个系统，将相关用户、用户需要系统提供的服务以及系统需要用户提供的服务更清晰的显示出来，以便使系统用户更容易理解这些元素的用途，也便于开发人员最终实现这些元素。\n用例图包括了三方面的内容：1用例，2参与者，3参与者和用例之间的关系。\n**<font size=3 >用例**：是对系统的用户需求（主要是功能需求）的描述，用例表达了系统的功能和所提供的服务，描述了活动者与系统交互中的对话。\n**<font size=3 >参与者**：参与者是系统外部的一个实体，它以某种方式参与了用例的执行过程，在UML中，通常用名字写在下面的人形图标表示。值得注意的是：参与者不一定是人，也可以是任何的事。\n**<font size=3 >参与者和用例之间的关系**：1关联关系，2泛化关系，3包含关系，4扩展关系下面使用亿图软件演示下用例，参与者以及二者之间的关系。\n下面这张图网上扣的，是图书馆的用例图(这里画的用例还不完全)：\n![图书馆系统](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329193127889.jpg)<font size=2 >为什么要画用例图，而不是UML，状态机这些专业的语言用图，其实最重要的一点就是产品想做好就必须站在客户的角度思考问题，在产品需求分析阶段就要开始为上帝考虑，等到设计阶段再来思考用户体验就为时已晚，产品基本也就失败了。\n\n**<font size=4 >用例描述**：用例图仅仅是描述了系统具有的功能，但是并没有描述每一个用例的行为，也就是执行过程。\n我们不需要对每一个用例进行分析，而是需要在这些用例中，找出那些关键用例，然后对这些关键用例写出用例描述，因为关键用例才是系统架构的决定因素。\n\nQ：关键用例如何分析？。\nA: 抓住功能/接口/质量/硬件约束/方案约束/数据流这几个方面来思考。·\n\t功能：产品最关键的因素，以实现的功能来展开用例\n\t接口：硬件接口是实现功能的方式，软件接口决定层间接口的好坏\n\t质量：提高产品竞争里的核心\n\t硬件约束：决定底层驱动的复杂程度\n\t方案约束：高内聚，低耦合的前提\n\t数据流：拿捏代码逻辑的最好方法\n下面也是从网络上找的用例描述示例，可以看到并没有统一的格式，需要根据项目的性质进行增减。\n![用例描述](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329195920218.jpg)\n\nQ:假设我们在不断的搜集和分析中，尽可能地列出了所有的需求(功能需求、质量属性、条件约束)，下一步需要做什么呢？需求这么多，该从哪一个需求入手呢？\n\nA:关键需求 = 关键功能 + 关键质量。它确定了架构的大方向。\n\n\n### 第1步——粗粒度分层\n### 第2步——中粒度分模块\n### 第3步——细粒度分ISR/周期仸务/事件驱动任务\n ## 技能二：分层，分模块，分子系统\n<font color=blue>Q:如何将需求阶段的用例图和用例描述，转换成代码\n<font color=blue>A:分层，分模块，分子系统\n\n这里举一个电梯的例子：\n![](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329201443609.png)\n\n\n\n**<font size=4 >分层**：这里的分层是指软件代码的层次结构，并不是电梯的楼层哟，请看下图\n![分层](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329200632579.png)底层库，驱动，HAL，服务层，功能层，用户层等，我们需要的是在第0步种对用例描述的功能，接口，硬件，约束等进行总结，提炼出我们需要做的驱动，服务和用户接口。\n这里安利一种思维是“洋葱皮”分层模式：上层调用下层，下层不能调上层。入口组装func模块，func组装下层模块。如下图所示：\n![](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329202548677.png)\n在分层上的体现就是如下图所示：\n![](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329202358795.png)\n**<font size=4 >分模块**：一句话按功能划分模块，电梯这个项目有几个功能就划分几个模块，以下对移动功能列出一个模块：\n![分模块](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329201646615.png)项目的设计过程种，由着诸多的需求。而很多需求都可以进行归类，根据功能需求的方法进行模块的划分。可以让需求在归类上得到明确的划分，而且通过功能需求进行软件的模块划分使得功能分解，任务分配等方面都有较好的分解。不知道大家发现没其实分模块阶段就进行了ISR/周期仸务/事件驱动任务的设计。\n如果一个项目大家分析到这里是不是大概觉得自己知道写哪些代码了，接下来就是将模块连接起来，形成软件的骨架。\n\n**<font size=4 >分子系统**：\nQ:子系统如何分\nA:纵深封装\n什么叫纵深封装，意思就是形成跨层子系统，func层模块，封装drv模块，子系统接口公开，接口粒度大，所以松耦合\n![子系统](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329203021908.png)在分层上的体现就是：\n![在这里插入图片描述](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329203335481.png)子系统在分层上的体现就是：\n![子系统](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329203626594.png)到这里设计完每个子系统之后，层层递进，层组成模块，模块细化层，子系统连接模块，模块递进成子系统。\n\n到这里基本软件的框架就能设计出来，具体的模块封装，任务并发，模块接口这些就看个人道行了。\n### 第4步——分析一个功能的协作链：定义task间通信方式/数据流关系\n### 第5步——分析并发情况下协作链：优化task的并发执行/数据流关系\n### 第6步——分析参与多功能的同一模块：优化模块的通用性/灵活性/可扩展\n以上3步是大佬总结的bug的3个方向，想要有一个稳定的系统，这3步是必须做的，其实我把他们统称为Bug，简而言之我们就要要有发现Bug的能力。\n ## 技能三：Bug工程师，要会找bu g\n这里提供几种找Bug的方法：\n1：SystemView分析工具：[rtthread的systemview分析工具](https://www.rt-thread.org/document/site/application-note/debug/systemview/an0009-systemview/)\n2：CmBacktrace：[ARM Cortex-M 系列 MCU 错误追踪库](http://packages.rt-thread.org/detail.html?package=CmBacktrace)\n3：Pc-lint:[静态代码检查工具](https://freertos.blog.csdn.net/article/details/5930634?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&dist_request_id=1328740.41223.16170229474446557&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control)\n生命不止，BUG不止。发现好的bug工具再来补充。\n\n**后续步——5、 6循环，不断优化。但若发现架构大缺陷，回溯到1-2-3-4**\n\n经过这次的架构培训，我基本上把自己在平常工作中，对应用程序架构设计的这个思考过程描述了一遍。\n\n佛经里说了：凡是回归原点，不懂就不懂，努力学习。懂了也要相信人外有人，放下架子，谦虚，能力提升方可最大化。\n\n这篇文章介绍的设计流程，也是一个套路而已。这个套路在面对一个新领域、新项目时，就像一个脚手架一样，告诉我们这一步该做什么，下一步该做什么，应该使用什么样的工具。\n\n在僵化的运用这个套路之后，你可以继续改造、优化，然后丢掉这个套路，从而形成适合你自己的套路，从此走向思考致富的道路！\n\nGOOD LUCK\n\n\n\n\n\n \n\n","source":"_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构.md","raw":"---\ntitle: 菜鸟应该如何开始设计一个项目的嵌入式软件架构\npermalink: 菜鸟应该如何开始设计一个项目的嵌入式软件架构\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-01-01 20:21:23\npassword:\nsummary:\ntags:\n- Embedded system\ncategories:\n- Embedded system\nkeywords:\ndescription:\n---\n@[toc]\n## 前言\n*<font size=2 >CSDN，GIT等各大论坛上很多文章都有讲，如何设计项目的嵌入式软件架构，But门槛实在太高了，需要做需求调研，需求分析，概要设计，详细设计，架构验证，开发-单元测试，集成测试等等，实不相瞒这些没有半年八载的项目经验根本做不出来的，刚好经过这周的嵌入式架构培训，提炼下最近在做项目的嵌入式软件架构的设计经验吧，不喜勿碰，谢谢。*\n## 六步走战略\n### 第0步——嵌软需求：功能/接口/质量/硬件约束/方案约束/数据流\n ## 技能一：用例图和用例描述\n<font color=blue>Q:需求如何转换成软件框架\n<font color=blue>A:画用例图，写用列描述 \n\n**<font size=4 >用例图**（Use Case Diagrame）：描述了人们希望如何使用一个系统，将相关用户、用户需要系统提供的服务以及系统需要用户提供的服务更清晰的显示出来，以便使系统用户更容易理解这些元素的用途，也便于开发人员最终实现这些元素。\n用例图包括了三方面的内容：1用例，2参与者，3参与者和用例之间的关系。\n**<font size=3 >用例**：是对系统的用户需求（主要是功能需求）的描述，用例表达了系统的功能和所提供的服务，描述了活动者与系统交互中的对话。\n**<font size=3 >参与者**：参与者是系统外部的一个实体，它以某种方式参与了用例的执行过程，在UML中，通常用名字写在下面的人形图标表示。值得注意的是：参与者不一定是人，也可以是任何的事。\n**<font size=3 >参与者和用例之间的关系**：1关联关系，2泛化关系，3包含关系，4扩展关系下面使用亿图软件演示下用例，参与者以及二者之间的关系。\n下面这张图网上扣的，是图书馆的用例图(这里画的用例还不完全)：\n![图书馆系统](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329193127889.jpg)<font size=2 >为什么要画用例图，而不是UML，状态机这些专业的语言用图，其实最重要的一点就是产品想做好就必须站在客户的角度思考问题，在产品需求分析阶段就要开始为上帝考虑，等到设计阶段再来思考用户体验就为时已晚，产品基本也就失败了。\n\n**<font size=4 >用例描述**：用例图仅仅是描述了系统具有的功能，但是并没有描述每一个用例的行为，也就是执行过程。\n我们不需要对每一个用例进行分析，而是需要在这些用例中，找出那些关键用例，然后对这些关键用例写出用例描述，因为关键用例才是系统架构的决定因素。\n\nQ：关键用例如何分析？。\nA: 抓住功能/接口/质量/硬件约束/方案约束/数据流这几个方面来思考。·\n\t功能：产品最关键的因素，以实现的功能来展开用例\n\t接口：硬件接口是实现功能的方式，软件接口决定层间接口的好坏\n\t质量：提高产品竞争里的核心\n\t硬件约束：决定底层驱动的复杂程度\n\t方案约束：高内聚，低耦合的前提\n\t数据流：拿捏代码逻辑的最好方法\n下面也是从网络上找的用例描述示例，可以看到并没有统一的格式，需要根据项目的性质进行增减。\n![用例描述](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329195920218.jpg)\n\nQ:假设我们在不断的搜集和分析中，尽可能地列出了所有的需求(功能需求、质量属性、条件约束)，下一步需要做什么呢？需求这么多，该从哪一个需求入手呢？\n\nA:关键需求 = 关键功能 + 关键质量。它确定了架构的大方向。\n\n\n### 第1步——粗粒度分层\n### 第2步——中粒度分模块\n### 第3步——细粒度分ISR/周期仸务/事件驱动任务\n ## 技能二：分层，分模块，分子系统\n<font color=blue>Q:如何将需求阶段的用例图和用例描述，转换成代码\n<font color=blue>A:分层，分模块，分子系统\n\n这里举一个电梯的例子：\n![](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329201443609.png)\n\n\n\n**<font size=4 >分层**：这里的分层是指软件代码的层次结构，并不是电梯的楼层哟，请看下图\n![分层](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329200632579.png)底层库，驱动，HAL，服务层，功能层，用户层等，我们需要的是在第0步种对用例描述的功能，接口，硬件，约束等进行总结，提炼出我们需要做的驱动，服务和用户接口。\n这里安利一种思维是“洋葱皮”分层模式：上层调用下层，下层不能调上层。入口组装func模块，func组装下层模块。如下图所示：\n![](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329202548677.png)\n在分层上的体现就是如下图所示：\n![](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329202358795.png)\n**<font size=4 >分模块**：一句话按功能划分模块，电梯这个项目有几个功能就划分几个模块，以下对移动功能列出一个模块：\n![分模块](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329201646615.png)项目的设计过程种，由着诸多的需求。而很多需求都可以进行归类，根据功能需求的方法进行模块的划分。可以让需求在归类上得到明确的划分，而且通过功能需求进行软件的模块划分使得功能分解，任务分配等方面都有较好的分解。不知道大家发现没其实分模块阶段就进行了ISR/周期仸务/事件驱动任务的设计。\n如果一个项目大家分析到这里是不是大概觉得自己知道写哪些代码了，接下来就是将模块连接起来，形成软件的骨架。\n\n**<font size=4 >分子系统**：\nQ:子系统如何分\nA:纵深封装\n什么叫纵深封装，意思就是形成跨层子系统，func层模块，封装drv模块，子系统接口公开，接口粒度大，所以松耦合\n![子系统](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329203021908.png)在分层上的体现就是：\n![在这里插入图片描述](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329203335481.png)子系统在分层上的体现就是：\n![子系统](菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329203626594.png)到这里设计完每个子系统之后，层层递进，层组成模块，模块细化层，子系统连接模块，模块递进成子系统。\n\n到这里基本软件的框架就能设计出来，具体的模块封装，任务并发，模块接口这些就看个人道行了。\n### 第4步——分析一个功能的协作链：定义task间通信方式/数据流关系\n### 第5步——分析并发情况下协作链：优化task的并发执行/数据流关系\n### 第6步——分析参与多功能的同一模块：优化模块的通用性/灵活性/可扩展\n以上3步是大佬总结的bug的3个方向，想要有一个稳定的系统，这3步是必须做的，其实我把他们统称为Bug，简而言之我们就要要有发现Bug的能力。\n ## 技能三：Bug工程师，要会找bu g\n这里提供几种找Bug的方法：\n1：SystemView分析工具：[rtthread的systemview分析工具](https://www.rt-thread.org/document/site/application-note/debug/systemview/an0009-systemview/)\n2：CmBacktrace：[ARM Cortex-M 系列 MCU 错误追踪库](http://packages.rt-thread.org/detail.html?package=CmBacktrace)\n3：Pc-lint:[静态代码检查工具](https://freertos.blog.csdn.net/article/details/5930634?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&dist_request_id=1328740.41223.16170229474446557&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control)\n生命不止，BUG不止。发现好的bug工具再来补充。\n\n**后续步——5、 6循环，不断优化。但若发现架构大缺陷，回溯到1-2-3-4**\n\n经过这次的架构培训，我基本上把自己在平常工作中，对应用程序架构设计的这个思考过程描述了一遍。\n\n佛经里说了：凡是回归原点，不懂就不懂，努力学习。懂了也要相信人外有人，放下架子，谦虚，能力提升方可最大化。\n\n这篇文章介绍的设计流程，也是一个套路而已。这个套路在面对一个新领域、新项目时，就像一个脚手架一样，告诉我们这一步该做什么，下一步该做什么，应该使用什么样的工具。\n\n在僵化的运用这个套路之后，你可以继续改造、优化，然后丢掉这个套路，从而形成适合你自己的套路，从此走向思考致富的道路！\n\nGOOD LUCK\n\n\n\n\n\n \n\n","slug":"菜鸟应该如何开始设计一个项目的嵌入式软件架构","published":1,"updated":"2023-04-02T15:28:31.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzm4lav000gzkvqaxq6ee78","content":"<p>@[toc]</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>*<font size=\"2\">CSDN，GIT等各大论坛上很多文章都有讲，如何设计项目的嵌入式软件架构，But门槛实在太高了，需要做需求调研，需求分析，概要设计，详细设计，架构验证，开发-单元测试，集成测试等等，实不相瞒这些没有半年八载的项目经验根本做不出来的，刚好经过这周的嵌入式架构培训，提炼下最近在做项目的嵌入式软件架构的设计经验吧，不喜勿碰，谢谢。*</font></p>\n<h2 id=\"六步走战略\"><a href=\"#六步走战略\" class=\"headerlink\" title=\"六步走战略\"></a>六步走战略</h2><h3 id=\"第0步——嵌软需求：功能-接口-质量-硬件约束-方案约束-数据流\"><a href=\"#第0步——嵌软需求：功能-接口-质量-硬件约束-方案约束-数据流\" class=\"headerlink\" title=\"第0步——嵌软需求：功能/接口/质量/硬件约束/方案约束/数据流\"></a>第0步——嵌软需求：功能/接口/质量/硬件约束/方案约束/数据流</h3><h2 id=\"技能一：用例图和用例描述\"><a href=\"#技能一：用例图和用例描述\" class=\"headerlink\" title=\"技能一：用例图和用例描述\"></a>技能一：用例图和用例描述</h2><p><font color=\"blue\">Q:需求如何转换成软件框架<br><font color=\"blue\">A:画用例图，写用列描述 </font></font></p>\n<p><strong><font size=\"4\">用例图</font></strong>（Use Case Diagrame）：描述了人们希望如何使用一个系统，将相关用户、用户需要系统提供的服务以及系统需要用户提供的服务更清晰的显示出来，以便使系统用户更容易理解这些元素的用途，也便于开发人员最终实现这些元素。<br>用例图包括了三方面的内容：1用例，2参与者，3参与者和用例之间的关系。<br><strong><font size=\"3\">用例</font></strong>：是对系统的用户需求（主要是功能需求）的描述，用例表达了系统的功能和所提供的服务，描述了活动者与系统交互中的对话。<br><strong><font size=\"3\">参与者</font></strong>：参与者是系统外部的一个实体，它以某种方式参与了用例的执行过程，在UML中，通常用名字写在下面的人形图标表示。值得注意的是：参与者不一定是人，也可以是任何的事。<br><strong><font size=\"3\">参与者和用例之间的关系</font></strong>：1关联关系，2泛化关系，3包含关系，4扩展关系下面使用亿图软件演示下用例，参与者以及二者之间的关系。<br>下面这张图网上扣的，是图书馆的用例图(这里画的用例还不完全)：<br><img src=\"/.com//20210329193127889.jpg\" alt=\"图书馆系统\"><font size=\"2\">为什么要画用例图，而不是UML，状态机这些专业的语言用图，其实最重要的一点就是产品想做好就必须站在客户的角度思考问题，在产品需求分析阶段就要开始为上帝考虑，等到设计阶段再来思考用户体验就为时已晚，产品基本也就失败了。</font></p>\n<p><strong><font size=\"4\">用例描述</font></strong>：用例图仅仅是描述了系统具有的功能，但是并没有描述每一个用例的行为，也就是执行过程。<br>我们不需要对每一个用例进行分析，而是需要在这些用例中，找出那些关键用例，然后对这些关键用例写出用例描述，因为关键用例才是系统架构的决定因素。</p>\n<p>Q：关键用例如何分析？。<br>A: 抓住功能/接口/质量/硬件约束/方案约束/数据流这几个方面来思考。·<br>    功能：产品最关键的因素，以实现的功能来展开用例<br>    接口：硬件接口是实现功能的方式，软件接口决定层间接口的好坏<br>    质量：提高产品竞争里的核心<br>    硬件约束：决定底层驱动的复杂程度<br>    方案约束：高内聚，低耦合的前提<br>    数据流：拿捏代码逻辑的最好方法<br>下面也是从网络上找的用例描述示例，可以看到并没有统一的格式，需要根据项目的性质进行增减。<br><img src=\"/.com//20210329195920218.jpg\" alt=\"用例描述\"></p>\n<p>Q:假设我们在不断的搜集和分析中，尽可能地列出了所有的需求(功能需求、质量属性、条件约束)，下一步需要做什么呢？需求这么多，该从哪一个需求入手呢？</p>\n<p>A:关键需求 = 关键功能 + 关键质量。它确定了架构的大方向。</p>\n<h3 id=\"第1步——粗粒度分层\"><a href=\"#第1步——粗粒度分层\" class=\"headerlink\" title=\"第1步——粗粒度分层\"></a>第1步——粗粒度分层</h3><h3 id=\"第2步——中粒度分模块\"><a href=\"#第2步——中粒度分模块\" class=\"headerlink\" title=\"第2步——中粒度分模块\"></a>第2步——中粒度分模块</h3><h3 id=\"第3步——细粒度分ISR-周期仸务-事件驱动任务\"><a href=\"#第3步——细粒度分ISR-周期仸务-事件驱动任务\" class=\"headerlink\" title=\"第3步——细粒度分ISR/周期仸务/事件驱动任务\"></a>第3步——细粒度分ISR/周期仸务/事件驱动任务</h3><h2 id=\"技能二：分层，分模块，分子系统\"><a href=\"#技能二：分层，分模块，分子系统\" class=\"headerlink\" title=\"技能二：分层，分模块，分子系统\"></a>技能二：分层，分模块，分子系统</h2><p><font color=\"blue\">Q:如何将需求阶段的用例图和用例描述，转换成代码<br><font color=\"blue\">A:分层，分模块，分子系统</font></font></p>\n<p>这里举一个电梯的例子：<br><img src=\"/.com//20210329201443609.png\" alt></p>\n<p><strong><font size=\"4\">分层</font></strong>：这里的分层是指软件代码的层次结构，并不是电梯的楼层哟，请看下图<br><img src=\"/.com//20210329200632579.png\" alt=\"分层\">底层库，驱动，HAL，服务层，功能层，用户层等，我们需要的是在第0步种对用例描述的功能，接口，硬件，约束等进行总结，提炼出我们需要做的驱动，服务和用户接口。<br>这里安利一种思维是“洋葱皮”分层模式：上层调用下层，下层不能调上层。入口组装func模块，func组装下层模块。如下图所示：<br><img src=\"/.com//20210329202548677.png\" alt><br>在分层上的体现就是如下图所示：<br><img src=\"/.com//20210329202358795.png\" alt><br><strong><font size=\"4\">分模块</font></strong>：一句话按功能划分模块，电梯这个项目有几个功能就划分几个模块，以下对移动功能列出一个模块：<br><img src=\"/.com//20210329201646615.png\" alt=\"分模块\">项目的设计过程种，由着诸多的需求。而很多需求都可以进行归类，根据功能需求的方法进行模块的划分。可以让需求在归类上得到明确的划分，而且通过功能需求进行软件的模块划分使得功能分解，任务分配等方面都有较好的分解。不知道大家发现没其实分模块阶段就进行了ISR/周期仸务/事件驱动任务的设计。<br>如果一个项目大家分析到这里是不是大概觉得自己知道写哪些代码了，接下来就是将模块连接起来，形成软件的骨架。</p>\n<p><strong><font size=\"4\">分子系统</font></strong>：<br>Q:子系统如何分<br>A:纵深封装<br>什么叫纵深封装，意思就是形成跨层子系统，func层模块，封装drv模块，子系统接口公开，接口粒度大，所以松耦合<br><img src=\"/.com//20210329203021908.png\" alt=\"子系统\">在分层上的体现就是：<br><img src=\"/.com//20210329203335481.png\" alt=\"在这里插入图片描述\">子系统在分层上的体现就是：<br><img src=\"/.com//20210329203626594.png\" alt=\"子系统\">到这里设计完每个子系统之后，层层递进，层组成模块，模块细化层，子系统连接模块，模块递进成子系统。</p>\n<p>到这里基本软件的框架就能设计出来，具体的模块封装，任务并发，模块接口这些就看个人道行了。</p>\n<h3 id=\"第4步——分析一个功能的协作链：定义task间通信方式-数据流关系\"><a href=\"#第4步——分析一个功能的协作链：定义task间通信方式-数据流关系\" class=\"headerlink\" title=\"第4步——分析一个功能的协作链：定义task间通信方式/数据流关系\"></a>第4步——分析一个功能的协作链：定义task间通信方式/数据流关系</h3><h3 id=\"第5步——分析并发情况下协作链：优化task的并发执行-数据流关系\"><a href=\"#第5步——分析并发情况下协作链：优化task的并发执行-数据流关系\" class=\"headerlink\" title=\"第5步——分析并发情况下协作链：优化task的并发执行/数据流关系\"></a>第5步——分析并发情况下协作链：优化task的并发执行/数据流关系</h3><h3 id=\"第6步——分析参与多功能的同一模块：优化模块的通用性-灵活性-可扩展\"><a href=\"#第6步——分析参与多功能的同一模块：优化模块的通用性-灵活性-可扩展\" class=\"headerlink\" title=\"第6步——分析参与多功能的同一模块：优化模块的通用性/灵活性/可扩展\"></a>第6步——分析参与多功能的同一模块：优化模块的通用性/灵活性/可扩展</h3><p>以上3步是大佬总结的bug的3个方向，想要有一个稳定的系统，这3步是必须做的，其实我把他们统称为Bug，简而言之我们就要要有发现Bug的能力。</p>\n<h2 id=\"技能三：Bug工程师，要会找bu-g\"><a href=\"#技能三：Bug工程师，要会找bu-g\" class=\"headerlink\" title=\"技能三：Bug工程师，要会找bu g\"></a>技能三：Bug工程师，要会找bu g</h2><p>这里提供几种找Bug的方法：<br>1：SystemView分析工具：<a href=\"https://www.rt-thread.org/document/site/application-note/debug/systemview/an0009-systemview/\" target=\"_blank\" rel=\"noopener\">rtthread的systemview分析工具</a><br>2：CmBacktrace：<a href=\"http://packages.rt-thread.org/detail.html?package=CmBacktrace\" target=\"_blank\" rel=\"noopener\">ARM Cortex-M 系列 MCU 错误追踪库</a><br>3：Pc-lint:<a href=\"https://freertos.blog.csdn.net/article/details/5930634?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&dist_request_id=1328740.41223.16170229474446557&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control\" target=\"_blank\" rel=\"noopener\">静态代码检查工具</a><br>生命不止，BUG不止。发现好的bug工具再来补充。</p>\n<p><strong>后续步——5、 6循环，不断优化。但若发现架构大缺陷，回溯到1-2-3-4</strong></p>\n<p>经过这次的架构培训，我基本上把自己在平常工作中，对应用程序架构设计的这个思考过程描述了一遍。</p>\n<p>佛经里说了：凡是回归原点，不懂就不懂，努力学习。懂了也要相信人外有人，放下架子，谦虚，能力提升方可最大化。</p>\n<p>这篇文章介绍的设计流程，也是一个套路而已。这个套路在面对一个新领域、新项目时，就像一个脚手架一样，告诉我们这一步该做什么，下一步该做什么，应该使用什么样的工具。</p>\n<p>在僵化的运用这个套路之后，你可以继续改造、优化，然后丢掉这个套路，从而形成适合你自己的套路，从此走向思考致富的道路！</p>\n<p>GOOD LUCK</p>\n","site":{"data":{"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<p>@[toc]</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>*<font size=\"2\">CSDN，GIT等各大论坛上很多文章都有讲，如何设计项目的嵌入式软件架构，But门槛实在太高了，需要做需求调研，需求分析，概要设计，详细设计，架构验证，开发-单元测试，集成测试等等，实不相瞒这些没有半年八载的项目经验根本做不出来的，刚好经过这周的嵌入式架构培训，提炼下最近在做项目的嵌入式软件架构的设计经验吧，不喜勿碰，谢谢。*</font></p>\n<h2 id=\"六步走战略\"><a href=\"#六步走战略\" class=\"headerlink\" title=\"六步走战略\"></a>六步走战略</h2><h3 id=\"第0步——嵌软需求：功能-接口-质量-硬件约束-方案约束-数据流\"><a href=\"#第0步——嵌软需求：功能-接口-质量-硬件约束-方案约束-数据流\" class=\"headerlink\" title=\"第0步——嵌软需求：功能/接口/质量/硬件约束/方案约束/数据流\"></a>第0步——嵌软需求：功能/接口/质量/硬件约束/方案约束/数据流</h3><h2 id=\"技能一：用例图和用例描述\"><a href=\"#技能一：用例图和用例描述\" class=\"headerlink\" title=\"技能一：用例图和用例描述\"></a>技能一：用例图和用例描述</h2><p><font color=\"blue\">Q:需求如何转换成软件框架<br><font color=\"blue\">A:画用例图，写用列描述 </font></font></p>\n<p><strong><font size=\"4\">用例图</font></strong>（Use Case Diagrame）：描述了人们希望如何使用一个系统，将相关用户、用户需要系统提供的服务以及系统需要用户提供的服务更清晰的显示出来，以便使系统用户更容易理解这些元素的用途，也便于开发人员最终实现这些元素。<br>用例图包括了三方面的内容：1用例，2参与者，3参与者和用例之间的关系。<br><strong><font size=\"3\">用例</font></strong>：是对系统的用户需求（主要是功能需求）的描述，用例表达了系统的功能和所提供的服务，描述了活动者与系统交互中的对话。<br><strong><font size=\"3\">参与者</font></strong>：参与者是系统外部的一个实体，它以某种方式参与了用例的执行过程，在UML中，通常用名字写在下面的人形图标表示。值得注意的是：参与者不一定是人，也可以是任何的事。<br><strong><font size=\"3\">参与者和用例之间的关系</font></strong>：1关联关系，2泛化关系，3包含关系，4扩展关系下面使用亿图软件演示下用例，参与者以及二者之间的关系。<br>下面这张图网上扣的，是图书馆的用例图(这里画的用例还不完全)：<br><img src=\"/.com//20210329193127889.jpg\" alt=\"图书馆系统\"><font size=\"2\">为什么要画用例图，而不是UML，状态机这些专业的语言用图，其实最重要的一点就是产品想做好就必须站在客户的角度思考问题，在产品需求分析阶段就要开始为上帝考虑，等到设计阶段再来思考用户体验就为时已晚，产品基本也就失败了。</font></p>\n<p><strong><font size=\"4\">用例描述</font></strong>：用例图仅仅是描述了系统具有的功能，但是并没有描述每一个用例的行为，也就是执行过程。<br>我们不需要对每一个用例进行分析，而是需要在这些用例中，找出那些关键用例，然后对这些关键用例写出用例描述，因为关键用例才是系统架构的决定因素。</p>\n<p>Q：关键用例如何分析？。<br>A: 抓住功能/接口/质量/硬件约束/方案约束/数据流这几个方面来思考。·<br>    功能：产品最关键的因素，以实现的功能来展开用例<br>    接口：硬件接口是实现功能的方式，软件接口决定层间接口的好坏<br>    质量：提高产品竞争里的核心<br>    硬件约束：决定底层驱动的复杂程度<br>    方案约束：高内聚，低耦合的前提<br>    数据流：拿捏代码逻辑的最好方法<br>下面也是从网络上找的用例描述示例，可以看到并没有统一的格式，需要根据项目的性质进行增减。<br><img src=\"/.com//20210329195920218.jpg\" alt=\"用例描述\"></p>\n<p>Q:假设我们在不断的搜集和分析中，尽可能地列出了所有的需求(功能需求、质量属性、条件约束)，下一步需要做什么呢？需求这么多，该从哪一个需求入手呢？</p>\n<p>A:关键需求 = 关键功能 + 关键质量。它确定了架构的大方向。</p>\n<h3 id=\"第1步——粗粒度分层\"><a href=\"#第1步——粗粒度分层\" class=\"headerlink\" title=\"第1步——粗粒度分层\"></a>第1步——粗粒度分层</h3><h3 id=\"第2步——中粒度分模块\"><a href=\"#第2步——中粒度分模块\" class=\"headerlink\" title=\"第2步——中粒度分模块\"></a>第2步——中粒度分模块</h3><h3 id=\"第3步——细粒度分ISR-周期仸务-事件驱动任务\"><a href=\"#第3步——细粒度分ISR-周期仸务-事件驱动任务\" class=\"headerlink\" title=\"第3步——细粒度分ISR/周期仸务/事件驱动任务\"></a>第3步——细粒度分ISR/周期仸务/事件驱动任务</h3><h2 id=\"技能二：分层，分模块，分子系统\"><a href=\"#技能二：分层，分模块，分子系统\" class=\"headerlink\" title=\"技能二：分层，分模块，分子系统\"></a>技能二：分层，分模块，分子系统</h2><p><font color=\"blue\">Q:如何将需求阶段的用例图和用例描述，转换成代码<br><font color=\"blue\">A:分层，分模块，分子系统</font></font></p>\n<p>这里举一个电梯的例子：<br><img src=\"/.com//20210329201443609.png\" alt></p>\n<p><strong><font size=\"4\">分层</font></strong>：这里的分层是指软件代码的层次结构，并不是电梯的楼层哟，请看下图<br><img src=\"/.com//20210329200632579.png\" alt=\"分层\">底层库，驱动，HAL，服务层，功能层，用户层等，我们需要的是在第0步种对用例描述的功能，接口，硬件，约束等进行总结，提炼出我们需要做的驱动，服务和用户接口。<br>这里安利一种思维是“洋葱皮”分层模式：上层调用下层，下层不能调上层。入口组装func模块，func组装下层模块。如下图所示：<br><img src=\"/.com//20210329202548677.png\" alt><br>在分层上的体现就是如下图所示：<br><img src=\"/.com//20210329202358795.png\" alt><br><strong><font size=\"4\">分模块</font></strong>：一句话按功能划分模块，电梯这个项目有几个功能就划分几个模块，以下对移动功能列出一个模块：<br><img src=\"/.com//20210329201646615.png\" alt=\"分模块\">项目的设计过程种，由着诸多的需求。而很多需求都可以进行归类，根据功能需求的方法进行模块的划分。可以让需求在归类上得到明确的划分，而且通过功能需求进行软件的模块划分使得功能分解，任务分配等方面都有较好的分解。不知道大家发现没其实分模块阶段就进行了ISR/周期仸务/事件驱动任务的设计。<br>如果一个项目大家分析到这里是不是大概觉得自己知道写哪些代码了，接下来就是将模块连接起来，形成软件的骨架。</p>\n<p><strong><font size=\"4\">分子系统</font></strong>：<br>Q:子系统如何分<br>A:纵深封装<br>什么叫纵深封装，意思就是形成跨层子系统，func层模块，封装drv模块，子系统接口公开，接口粒度大，所以松耦合<br><img src=\"/.com//20210329203021908.png\" alt=\"子系统\">在分层上的体现就是：<br><img src=\"/.com//20210329203335481.png\" alt=\"在这里插入图片描述\">子系统在分层上的体现就是：<br><img src=\"/.com//20210329203626594.png\" alt=\"子系统\">到这里设计完每个子系统之后，层层递进，层组成模块，模块细化层，子系统连接模块，模块递进成子系统。</p>\n<p>到这里基本软件的框架就能设计出来，具体的模块封装，任务并发，模块接口这些就看个人道行了。</p>\n<h3 id=\"第4步——分析一个功能的协作链：定义task间通信方式-数据流关系\"><a href=\"#第4步——分析一个功能的协作链：定义task间通信方式-数据流关系\" class=\"headerlink\" title=\"第4步——分析一个功能的协作链：定义task间通信方式/数据流关系\"></a>第4步——分析一个功能的协作链：定义task间通信方式/数据流关系</h3><h3 id=\"第5步——分析并发情况下协作链：优化task的并发执行-数据流关系\"><a href=\"#第5步——分析并发情况下协作链：优化task的并发执行-数据流关系\" class=\"headerlink\" title=\"第5步——分析并发情况下协作链：优化task的并发执行/数据流关系\"></a>第5步——分析并发情况下协作链：优化task的并发执行/数据流关系</h3><h3 id=\"第6步——分析参与多功能的同一模块：优化模块的通用性-灵活性-可扩展\"><a href=\"#第6步——分析参与多功能的同一模块：优化模块的通用性-灵活性-可扩展\" class=\"headerlink\" title=\"第6步——分析参与多功能的同一模块：优化模块的通用性/灵活性/可扩展\"></a>第6步——分析参与多功能的同一模块：优化模块的通用性/灵活性/可扩展</h3><p>以上3步是大佬总结的bug的3个方向，想要有一个稳定的系统，这3步是必须做的，其实我把他们统称为Bug，简而言之我们就要要有发现Bug的能力。</p>\n<h2 id=\"技能三：Bug工程师，要会找bu-g\"><a href=\"#技能三：Bug工程师，要会找bu-g\" class=\"headerlink\" title=\"技能三：Bug工程师，要会找bu g\"></a>技能三：Bug工程师，要会找bu g</h2><p>这里提供几种找Bug的方法：<br>1：SystemView分析工具：<a href=\"https://www.rt-thread.org/document/site/application-note/debug/systemview/an0009-systemview/\" target=\"_blank\" rel=\"noopener\">rtthread的systemview分析工具</a><br>2：CmBacktrace：<a href=\"http://packages.rt-thread.org/detail.html?package=CmBacktrace\" target=\"_blank\" rel=\"noopener\">ARM Cortex-M 系列 MCU 错误追踪库</a><br>3：Pc-lint:<a href=\"https://freertos.blog.csdn.net/article/details/5930634?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&dist_request_id=1328740.41223.16170229474446557&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control\" target=\"_blank\" rel=\"noopener\">静态代码检查工具</a><br>生命不止，BUG不止。发现好的bug工具再来补充。</p>\n<p><strong>后续步——5、 6循环，不断优化。但若发现架构大缺陷，回溯到1-2-3-4</strong></p>\n<p>经过这次的架构培训，我基本上把自己在平常工作中，对应用程序架构设计的这个思考过程描述了一遍。</p>\n<p>佛经里说了：凡是回归原点，不懂就不懂，努力学习。懂了也要相信人外有人，放下架子，谦虚，能力提升方可最大化。</p>\n<p>这篇文章介绍的设计流程，也是一个套路而已。这个套路在面对一个新领域、新项目时，就像一个脚手架一样，告诉我们这一步该做什么，下一步该做什么，应该使用什么样的工具。</p>\n<p>在僵化的运用这个套路之后，你可以继续改造、优化，然后丢掉这个套路，从而形成适合你自己的套路，从此走向思考致富的道路！</p>\n<p>GOOD LUCK</p>\n"},{"title":"上海","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-04-02T15:09:12.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"# 教育经历\n\n* <b>本科 自动化</b>\n\n2020/09 - 现在\n<b>努力小白</b>\n\n\n\n# 联系方式\n\n* <b>电子邮箱</b>\n845343253@qq.com\n* <b>地址</b>\n太阳系地球中国境内\n* <b>微信</b>\n17675443156\n* <b>QQ</b>\n845343253\n\n\n","source":"_posts/2023/04/上海.md","raw":"---\ntitle: 上海\npermalink: 上海\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-04-02 23:09:12\npassword:\nsummary:\ntags:\ncategories:\nkeywords:\ndescription:\n---\n# 教育经历\n\n* <b>本科 自动化</b>\n\n2020/09 - 现在\n<b>努力小白</b>\n\n\n\n# 联系方式\n\n* <b>电子邮箱</b>\n845343253@qq.com\n* <b>地址</b>\n太阳系地球中国境内\n* <b>微信</b>\n17675443156\n* <b>QQ</b>\n845343253\n\n\n","slug":"上海","published":1,"updated":"2023-04-02T15:09:52.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzm4lb2000hzkvqbo8ughvl","content":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>本科 自动化</b></li>\n</ul>\n<p>2020/09 - 现在<br><b>努力小白</b></p>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:845343253@qq.com\" target=\"_blank\" rel=\"noopener\">845343253@qq.com</a></li>\n<li><b>地址</b><br>太阳系地球中国境内</li>\n<li><b>微信</b><br>17675443156</li>\n<li><b>QQ</b><br>845343253</li>\n</ul>\n","site":{"data":{"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>本科 自动化</b></li>\n</ul>\n<p>2020/09 - 现在<br><b>努力小白</b></p>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:845343253@qq.com\" target=\"_blank\" rel=\"noopener\">845343253@qq.com</a></li>\n<li><b>地址</b><br>太阳系地球中国境内</li>\n<li><b>微信</b><br>17675443156</li>\n<li><b>QQ</b><br>845343253</li>\n</ul>\n"},{"title":"新疆","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-04-02T15:09:07.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"![zhaopian](2023/04/新疆/photos/ANKG1449.JPG);","source":"_posts/2023/04/新疆.md","raw":"---\ntitle: 新疆\npermalink: 新疆\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-04-02 23:09:07\npassword:\nsummary:\ntags:\ncategories:\nkeywords:\ndescription:\n---\n![zhaopian](2023/04/新疆/photos/ANKG1449.JPG);","slug":"新疆","published":1,"updated":"2023-04-02T16:23:47.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzm4lb7000lzkvq9nrjsptj","content":"<p><img src=\"/.com//04/%E6%96%B0%E7%96%86/photos/ANKG1449.JPG\" alt=\"zhaopian\">;</p>\n","site":{"data":{"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<p><img src=\"/.com//04/%E6%96%B0%E7%96%86/photos/ANKG1449.JPG\" alt=\"zhaopian\">;</p>\n"},{"title":"Linux input子系统","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-01-01T13:12:46.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"<div>\n<div>\n<ul>\n<li>\n<blockquote>\n<h5>Input driver ：主要实现对硬件设备的读写访问，中断设置，并把硬件产生的事件转换为核心层定义的规范提交给事件处理层。</h5>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<h5>Input core ：承上启下。为设备驱动层提供了规范和接口；通知事件处理层对事件进行处理；</h5>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<h5>Event handler ：提供用户编程的接口（设备节点），并处理驱动层提交的数据处理。</h5>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"Linux-input子系统/2909691-20220819093409715-1604400596.png\" alt=\"\" /></p>\n<h1>1输入子系统框架分析</h1>\n<div>\n<div>\n<h2>1.1设备驱动层（Input driver）</h2>\n<ul>\n<li>device是纯硬件操作层，包含不同的硬件接口处理，如gpio等</li>\n<li>对于每种不同的具体硬件操作，都对应着不同的input_dev结构体</li>\n<li>该结构体内部也包含着一个h_list，指向handle</li>\n</ul>\n</div>\n</div>\n<div>\n<div>\n<div>\n<div>\n<h2>1.2.系统核心层（Input core）</h2>\n<ul>\n<li>申请主设备号;</li>\n<li>提供input_register_device跟input_register_handler函数分别用于注册device跟handler;</li>\n<li>提供input_register_handle函数用于注册一个事件处理，代表一个成功配对的input_dev和input_handler;</li>\n</ul>\n</div>\n</div>\n<h2>1.3.事件处理层（Event handler）</h2>\n<ul>\n<li>不涉及硬件方面的具体操作，handler层是纯软件层，包含不同的解决方案，如键盘，鼠标，游戏手柄等；</li>\n<li>对于不同的解决方案，都包含一个名为input_handler的结构体，该结构体内含的主要成员如下：</li>\n</ul>\n<table>\n<thead>\n<tr><th>成员</th><th>功能</th></tr>\n</thead>\n<tbody>\n<tr>\n<td>.id_table</td>\n<td>一个存放该handler所支持的设备id的表（其实内部存放的是EV_xxx事件,用于判断device是否支持该事件）</td>\n</tr>\n<tr>\n<td>.fops</td>\n<td>该handler的file_operation</td>\n</tr>\n<tr>\n<td>.connect</td>\n<td>连接该handler跟所支持device的函数</td>\n</tr>\n<tr>\n<td>.disconnect</td>\n<td>断开该连接</td>\n</tr>\n<tr>\n<td>.event</td>\n<td>事件处理函数，让device调用</td>\n</tr>\n<tr>\n<td>h_list</td>\n<td>是一个链表，该链表保存着该handler到所支持的所有device的中间站：handle结构体的指针</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1>2.两条链表连接dev和handler</h1>\n<div class=\"cnblogs_code\">\n<pre>#file pwd: drivers/input/input.c<br /><br />MODULE_AUTHOR(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Vojtech Pavlik &lt;vojtech@suse.cz&gt;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\nMODULE_DESCRIPTION(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Input core</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\nMODULE_LICENSE(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">GPL</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n</span><span style=\"color: #0000ff;\">#define</span> INPUT_MAX_CHAR_DEVICES        1024\n<span style=\"color: #0000ff;\">#define</span> INPUT_FIRST_DYNAMIC_DEV        256\n<span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> DEFINE_IDA(input_ida);\n\n</span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> LIST_HEAD(input_dev_list);\n</span><span style=\"color: #0000ff;\">static</span> LIST_HEAD(input_handler_list);</pre>\n</div>\n在input.c文件中两个全局链表input_handler_list和<span style=\"color: #000000;\">input_dev_list</span>，通过handle相互关联：</div>\n<div><img src=\"Linux-input子系统/2909691-20220819094250974-180404869.webp\" alt=\"\" />\n<p>&nbsp;</p>\n<h1>3.输入子系统代码分析</h1>\n<p>文件路径：driver/input/input.c （核心层）</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">int</span> __init input_init(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> err;\n</span><span style=\"color: #008080;\"> 4</span> \n<span style=\"color: #008080;\"> 5</span>     err = class_register(&amp;<span style=\"color: #000000;\">input_class);  <code class=\"  language-cpp\"><span class=\"token comment\">//在/sys/class下创建逻辑（input）类，在类下面挂载input设备</span></code>\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (err) {\n</span><span style=\"color: #008080;\"> 7</span>         pr_err(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">unable to register input_dev class\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> err;\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">10</span> \n<span style=\"color: #008080;\">11</span>     err =<span style=\"color: #000000;\"> input_proc_init();　　<code class=\"  language-cpp\"><span class=\"token punctuation\"><span class=\"token comment\">//在/proc下面建立相关的虚拟文件，proc下创建的文件可以看作是虚拟文件对内核读写的一种操作</span></span></code>\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (err)\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> fail1;\n</span><span style=\"color: #008080;\">14</span> \n<span style=\"color: #008080;\">15</span>     err = register_chrdev_region(MKDEV(INPUT_MAJOR, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">),//在/dev下创建input设备号\n</span><span style=\"color: #008080;\">16</span>                      INPUT_MAX_CHAR_DEVICES, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">input</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">17</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (err) {\n</span><span style=\"color: #008080;\">18</span>         pr_err(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">unable to register char major %d</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, INPUT_MAJOR);\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> fail2;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">21</span> \n<span style=\"color: #008080;\">22</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span> \n<span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\"> fail2:    input_proc_exit();\n</span><span style=\"color: #008080;\">25</span>  fail1:    class_unregister(&amp;<span style=\"color: #000000;\">input_class);\n</span><span style=\"color: #008080;\">26</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> err;\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">28</span> \n<span style=\"color: #008080;\">29</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span> __exit input_exit(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">    input_proc_exit();\n</span><span style=\"color: #008080;\">32</span>     unregister_chrdev_region(MKDEV(INPUT_MAJOR, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">),\n</span><span style=\"color: #008080;\">33</span> <span style=\"color: #000000;\">                 INPUT_MAX_CHAR_DEVICES);\n</span><span style=\"color: #008080;\">34</span>     class_unregister(&amp;<span style=\"color: #000000;\">input_class);\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">36</span> \n<span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">subsys_initcall(input_init);\n</span><span style=\"color: #008080;\">38</span> module_exit(input_exit);</pre>\n</div>\n<p>现在基本框架已经建成，如何往input系统里面注册dev和hanlder呢？</p>\n<h2>3.1注册dev</h2>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\">  2</span> <span style=\"color: #008000;\"> * struct input_dev - represents an input device\n</span><span style=\"color: #008080;\">  3</span> <span style=\"color: #008000;\"> * @name: name of the device\n</span><span style=\"color: #008080;\">  4</span> <span style=\"color: #008000;\"> * @phys: physical path to the device in the system hierarchy\n</span><span style=\"color: #008080;\">  5</span> <span style=\"color: #008000;\"> * @uniq: unique identification code for the device (if device has it)\n</span><span style=\"color: #008080;\">  6</span> <span style=\"color: #008000;\"> * @id: id of the device (struct input_id)\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #008000;\"> * @propbit: bitmap of device properties and quirks\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #008000;\"> * @evbit: bitmap of types of events supported by the device (EV_KEY,\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #008000;\"> *    EV_REL, etc.)\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #008000;\"> * @keybit: bitmap of keys/buttons this device has\n</span><span style=\"color: #008080;\"> 11</span> <span style=\"color: #008000;\"> * @relbit: bitmap of relative axes for the device\n</span><span style=\"color: #008080;\"> 12</span> <span style=\"color: #008000;\"> * @absbit: bitmap of absolute axes for the device\n</span><span style=\"color: #008080;\"> 13</span> <span style=\"color: #008000;\"> * @mscbit: bitmap of miscellaneous events supported by the device\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #008000;\"> * @ledbit: bitmap of leds present on the device\n</span><span style=\"color: #008080;\"> 15</span> <span style=\"color: #008000;\"> * @sndbit: bitmap of sound effects supported by the device\n</span><span style=\"color: #008080;\"> 16</span> <span style=\"color: #008000;\"> * @ffbit: bitmap of force feedback effects supported by the device\n</span><span style=\"color: #008080;\"> 17</span> <span style=\"color: #008000;\"> * @swbit: bitmap of switches present on the device\n</span><span style=\"color: #008080;\"> 18</span> <span style=\"color: #008000;\"> * @hint_events_per_packet: average number of events generated by the\n</span><span style=\"color: #008080;\"> 19</span> <span style=\"color: #008000;\"> *    device in a packet (between EV_SYN/SYN_REPORT events). Used by\n</span><span style=\"color: #008080;\"> 20</span> <span style=\"color: #008000;\"> *    event handlers to estimate size of the buffer needed to hold\n</span><span style=\"color: #008080;\"> 21</span> <span style=\"color: #008000;\"> *    events.\n</span><span style=\"color: #008080;\"> 22</span> <span style=\"color: #008000;\"> * @keycodemax: size of keycode table\n</span><span style=\"color: #008080;\"> 23</span> <span style=\"color: #008000;\"> * @keycodesize: size of elements in keycode table\n</span><span style=\"color: #008080;\"> 24</span> <span style=\"color: #008000;\"> * @keycode: map of scancodes to keycodes for this device\n</span><span style=\"color: #008080;\"> 25</span> <span style=\"color: #008000;\"> * @getkeycode: optional legacy method to retrieve current keymap.\n</span><span style=\"color: #008080;\"> 26</span> <span style=\"color: #008000;\"> * @setkeycode: optional method to alter current keymap, used to implement\n</span><span style=\"color: #008080;\"> 27</span> <span style=\"color: #008000;\"> *    sparse keymaps. If not supplied default mechanism will be used.\n</span><span style=\"color: #008080;\"> 28</span> <span style=\"color: #008000;\"> *    The method is being called while holding event_lock and thus must\n</span><span style=\"color: #008080;\"> 29</span> <span style=\"color: #008000;\"> *    not sleep\n</span><span style=\"color: #008080;\"> 30</span> <span style=\"color: #008000;\"> * @ff: force feedback structure associated with the device if device\n</span><span style=\"color: #008080;\"> 31</span> <span style=\"color: #008000;\"> *    supports force feedback effects\n</span><span style=\"color: #008080;\"> 32</span> <span style=\"color: #008000;\"> * @repeat_key: stores key code of the last key pressed; used to implement\n</span><span style=\"color: #008080;\"> 33</span> <span style=\"color: #008000;\"> *    software autorepeat\n</span><span style=\"color: #008080;\"> 34</span> <span style=\"color: #008000;\"> * @timer: timer for software autorepeat\n</span><span style=\"color: #008080;\"> 35</span> <span style=\"color: #008000;\"> * @rep: current values for autorepeat parameters (delay, rate)\n</span><span style=\"color: #008080;\"> 36</span> <span style=\"color: #008000;\"> * @mt: pointer to multitouch state\n</span><span style=\"color: #008080;\"> 37</span> <span style=\"color: #008000;\"> * @absinfo: array of &amp;struct input_absinfo elements holding information\n</span><span style=\"color: #008080;\"> 38</span> <span style=\"color: #008000;\"> *    about absolute axes (current value, min, max, flat, fuzz,\n</span><span style=\"color: #008080;\"> 39</span> <span style=\"color: #008000;\"> *    resolution)\n</span><span style=\"color: #008080;\"> 40</span> <span style=\"color: #008000;\"> * @key: reflects current state of device's keys/buttons\n</span><span style=\"color: #008080;\"> 41</span> <span style=\"color: #008000;\"> * @led: reflects current state of device's LEDs\n</span><span style=\"color: #008080;\"> 42</span> <span style=\"color: #008000;\"> * @snd: reflects current state of sound effects\n</span><span style=\"color: #008080;\"> 43</span> <span style=\"color: #008000;\"> * @sw: reflects current state of device's switches\n</span><span style=\"color: #008080;\"> 44</span> <span style=\"color: #008000;\"> * @open: this method is called when the very first user calls\n</span><span style=\"color: #008080;\"> 45</span> <span style=\"color: #008000;\"> *    input_open_device(). The driver must prepare the device\n</span><span style=\"color: #008080;\"> 46</span> <span style=\"color: #008000;\"> *    to start generating events (start polling thread,\n</span><span style=\"color: #008080;\"> 47</span> <span style=\"color: #008000;\"> *    request an IRQ, submit URB, etc.)\n</span><span style=\"color: #008080;\"> 48</span> <span style=\"color: #008000;\"> * @close: this method is called when the very last user calls\n</span><span style=\"color: #008080;\"> 49</span> <span style=\"color: #008000;\"> *    input_close_device().\n</span><span style=\"color: #008080;\"> 50</span> <span style=\"color: #008000;\"> * @flush: purges the device. Most commonly used to get rid of force\n</span><span style=\"color: #008080;\"> 51</span> <span style=\"color: #008000;\"> *    feedback effects loaded into the device when disconnecting\n</span><span style=\"color: #008080;\"> 52</span> <span style=\"color: #008000;\"> *    from it\n</span><span style=\"color: #008080;\"> 53</span> <span style=\"color: #008000;\"> * @event: event handler for events sent _to_ the device, like EV_LED\n</span><span style=\"color: #008080;\"> 54</span> <span style=\"color: #008000;\"> *    or EV_SND. The device is expected to carry out the requested\n</span><span style=\"color: #008080;\"> 55</span> <span style=\"color: #008000;\"> *    action (turn on a LED, play sound, etc.) The call is protected\n</span><span style=\"color: #008080;\"> 56</span> <span style=\"color: #008000;\"> *    by @event_lock and must not sleep\n</span><span style=\"color: #008080;\"> 57</span> <span style=\"color: #008000;\"> * @grab: input handle that currently has the device grabbed (via\n</span><span style=\"color: #008080;\"> 58</span> <span style=\"color: #008000;\"> *    EVIOCGRAB ioctl). When a handle grabs a device it becomes sole\n</span><span style=\"color: #008080;\"> 59</span> <span style=\"color: #008000;\"> *    recipient for all input events coming from the device\n</span><span style=\"color: #008080;\"> 60</span> <span style=\"color: #008000;\"> * @event_lock: this spinlock is is taken when input core receives\n</span><span style=\"color: #008080;\"> 61</span> <span style=\"color: #008000;\"> *    and processes a new event for the device (in input_event()).\n</span><span style=\"color: #008080;\"> 62</span> <span style=\"color: #008000;\"> *    Code that accesses and/or modifies parameters of a device\n</span><span style=\"color: #008080;\"> 63</span> <span style=\"color: #008000;\"> *    (such as keymap or absmin, absmax, absfuzz, etc.) after device\n</span><span style=\"color: #008080;\"> 64</span> <span style=\"color: #008000;\"> *    has been registered with input core must take this lock.\n</span><span style=\"color: #008080;\"> 65</span> <span style=\"color: #008000;\"> * @mutex: serializes calls to open(), close() and flush() methods\n</span><span style=\"color: #008080;\"> 66</span> <span style=\"color: #008000;\"> * @users: stores number of users (input handlers) that opened this\n</span><span style=\"color: #008080;\"> 67</span> <span style=\"color: #008000;\"> *    device. It is used by input_open_device() and input_close_device()\n</span><span style=\"color: #008080;\"> 68</span> <span style=\"color: #008000;\"> *    to make sure that dev-&gt;open() is only called when the first\n</span><span style=\"color: #008080;\"> 69</span> <span style=\"color: #008000;\"> *    user opens device and dev-&gt;close() is called when the very\n</span><span style=\"color: #008080;\"> 70</span> <span style=\"color: #008000;\"> *    last user closes the device\n</span><span style=\"color: #008080;\"> 71</span> <span style=\"color: #008000;\"> * @going_away: marks devices that are in a middle of unregistering and\n</span><span style=\"color: #008080;\"> 72</span> <span style=\"color: #008000;\"> *    causes input_open_device*() fail with -ENODEV.\n</span><span style=\"color: #008080;\"> 73</span> <span style=\"color: #008000;\"> * @dev: driver model's view of this device\n</span><span style=\"color: #008080;\"> 74</span> <span style=\"color: #008000;\"> * @h_list: list of input handles associated with the device. When\n</span><span style=\"color: #008080;\"> 75</span> <span style=\"color: #008000;\"> *    accessing the list dev-&gt;mutex must be held\n</span><span style=\"color: #008080;\"> 76</span> <span style=\"color: #008000;\"> * @node: used to place the device onto input_dev_list\n</span><span style=\"color: #008080;\"> 77</span> <span style=\"color: #008000;\"> * @num_vals: number of values queued in the current frame\n</span><span style=\"color: #008080;\"> 78</span> <span style=\"color: #008000;\"> * @max_vals: maximum number of values queued in a frame\n</span><span style=\"color: #008080;\"> 79</span> <span style=\"color: #008000;\"> * @vals: array of values queued in the current frame\n</span><span style=\"color: #008080;\"> 80</span> <span style=\"color: #008000;\"> * @devres_managed: indicates that devices is managed with devres framework\n</span><span style=\"color: #008080;\"> 81</span> <span style=\"color: #008000;\"> *    and needs not be explicitly unregistered or freed.\n</span><span style=\"color: #008080;\"> 82</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 83</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> input_dev {\n</span><span style=\"color: #008080;\"> 84</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">name;\n</span><span style=\"color: #008080;\"> 85</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">phys;\n</span><span style=\"color: #008080;\"> 86</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">uniq;\n</span><span style=\"color: #008080;\"> 87</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> input_id id;\n</span><span style=\"color: #008080;\"> 88</span> \n<span style=\"color: #008080;\"> 89</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> propbit[BITS_TO_LONGS(INPUT_PROP_CNT)];\n</span><span style=\"color: #008080;\"> 90</span> \n<span style=\"color: #008080;\"> 91</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> evbit[BITS_TO_LONGS(EV_CNT)];\n</span><span style=\"color: #008080;\"> 92</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> keybit[BITS_TO_LONGS(KEY_CNT)];\n</span><span style=\"color: #008080;\"> 93</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> relbit[BITS_TO_LONGS(REL_CNT)];\n</span><span style=\"color: #008080;\"> 94</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> absbit[BITS_TO_LONGS(ABS_CNT)];\n</span><span style=\"color: #008080;\"> 95</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> mscbit[BITS_TO_LONGS(MSC_CNT)];\n</span><span style=\"color: #008080;\"> 96</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> ledbit[BITS_TO_LONGS(LED_CNT)];\n</span><span style=\"color: #008080;\"> 97</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> sndbit[BITS_TO_LONGS(SND_CNT)];\n</span><span style=\"color: #008080;\"> 98</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> ffbit[BITS_TO_LONGS(FF_CNT)];\n</span><span style=\"color: #008080;\"> 99</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> swbit[BITS_TO_LONGS(SW_CNT)];\n</span><span style=\"color: #008080;\">100</span> \n<span style=\"color: #008080;\">101</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> hint_events_per_packet;\n</span><span style=\"color: #008080;\">102</span> \n<span style=\"color: #008080;\">103</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> keycodemax;\n</span><span style=\"color: #008080;\">104</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> keycodesize;\n</span><span style=\"color: #008080;\">105</span>     <span style=\"color: #0000ff;\">void</span> *<span style=\"color: #000000;\">keycode;\n</span><span style=\"color: #008080;\">106</span> \n<span style=\"color: #008080;\">107</span>     <span style=\"color: #0000ff;\">int</span> (*setkeycode)(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev,\n</span><span style=\"color: #008080;\">108</span>               <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">struct</span> input_keymap_entry *<span style=\"color: #000000;\">ke,\n</span><span style=\"color: #008080;\">109</span>               unsigned <span style=\"color: #0000ff;\">int</span> *<span style=\"color: #000000;\">old_keycode);\n</span><span style=\"color: #008080;\">110</span>     <span style=\"color: #0000ff;\">int</span> (*getkeycode)(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev,\n</span><span style=\"color: #008080;\">111</span>               <span style=\"color: #0000ff;\">struct</span> input_keymap_entry *<span style=\"color: #000000;\">ke);\n</span><span style=\"color: #008080;\">112</span> \n<span style=\"color: #008080;\">113</span>     <span style=\"color: #0000ff;\">struct</span> ff_device *<span style=\"color: #000000;\">ff;\n</span><span style=\"color: #008080;\">114</span> \n<span style=\"color: #008080;\">115</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> repeat_key;\n</span><span style=\"color: #008080;\">116</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> timer_list timer;\n</span><span style=\"color: #008080;\">117</span> \n<span style=\"color: #008080;\">118</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> rep[REP_CNT];\n</span><span style=\"color: #008080;\">119</span> \n<span style=\"color: #008080;\">120</span>     <span style=\"color: #0000ff;\">struct</span> input_mt *<span style=\"color: #000000;\">mt;\n</span><span style=\"color: #008080;\">121</span> \n<span style=\"color: #008080;\">122</span>     <span style=\"color: #0000ff;\">struct</span> input_absinfo *<span style=\"color: #000000;\">absinfo;\n</span><span style=\"color: #008080;\">123</span> \n<span style=\"color: #008080;\">124</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> key[BITS_TO_LONGS(KEY_CNT)];\n</span><span style=\"color: #008080;\">125</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> led[BITS_TO_LONGS(LED_CNT)];\n</span><span style=\"color: #008080;\">126</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> snd[BITS_TO_LONGS(SND_CNT)];\n</span><span style=\"color: #008080;\">127</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> sw[BITS_TO_LONGS(SW_CNT)];\n</span><span style=\"color: #008080;\">128</span> \n<span style=\"color: #008080;\">129</span>     <span style=\"color: #0000ff;\">int</span> (*open)(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">130</span>     <span style=\"color: #0000ff;\">void</span> (*close)(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">131</span>     <span style=\"color: #0000ff;\">int</span> (*flush)(<span style=\"color: #0000ff;\">struct</span> input_dev *dev, <span style=\"color: #0000ff;\">struct</span> file *<span style=\"color: #000000;\">file);\n</span><span style=\"color: #008080;\">132</span>     <span style=\"color: #0000ff;\">int</span> (*<span style=\"color: #0000ff;\">event</span>)(<span style=\"color: #0000ff;\">struct</span> input_dev *dev, unsigned <span style=\"color: #0000ff;\">int</span> type, unsigned <span style=\"color: #0000ff;\">int</span> code, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> value);\n</span><span style=\"color: #008080;\">133</span> \n<span style=\"color: #008080;\">134</span>     <span style=\"color: #0000ff;\">struct</span> input_handle __rcu *<span style=\"color: #000000;\">grab;\n</span><span style=\"color: #008080;\">135</span> \n<span style=\"color: #008080;\">136</span> <span style=\"color: #000000;\">    spinlock_t event_lock;\n</span><span style=\"color: #008080;\">137</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> mutex mutex;\n</span><span style=\"color: #008080;\">138</span> \n<span style=\"color: #008080;\">139</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> users;\n</span><span style=\"color: #008080;\">140</span>     <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> going_away;\n</span><span style=\"color: #008080;\">141</span> \n<span style=\"color: #008080;\">142</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> device dev;\n</span><span style=\"color: #008080;\">143</span> \n<span style=\"color: #008080;\">144</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> list_head    h_list;\n</span><span style=\"color: #008080;\">145</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> list_head    node;\n</span><span style=\"color: #008080;\">146</span> \n<span style=\"color: #008080;\">147</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> num_vals;\n</span><span style=\"color: #008080;\">148</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> max_vals;\n</span><span style=\"color: #008080;\">149</span>     <span style=\"color: #0000ff;\">struct</span> input_value *<span style=\"color: #000000;\">vals;\n</span><span style=\"color: #008080;\">150</span> \n<span style=\"color: #008080;\">151</span>     <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> devres_managed;\n</span><span style=\"color: #008080;\">152</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">153</span> <span style=\"color: #0000ff;\">#define</span> to_input_dev(d) container_of(d, struct input_dev, dev)</pre>\n</div>\n<p>&nbsp;</p>\n<div>\n<div>&nbsp;</div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\">  2</span> <span style=\"color: #008000;\"> * input_register_device - register device with input core\n</span><span style=\"color: #008080;\">  3</span> <span style=\"color: #008000;\"> * @dev: device to be registered\n</span><span style=\"color: #008080;\">  4</span> <span style=\"color: #008000;\"> *\n</span><span style=\"color: #008080;\">  5</span> <span style=\"color: #008000;\"> * This function registers device with input core. The device must be\n</span><span style=\"color: #008080;\">  6</span> <span style=\"color: #008000;\"> * allocated with input_allocate_device() and all it's capabilities\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #008000;\"> * set up before registering.\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #008000;\"> * If function fails the device must be freed with input_free_device().\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #008000;\"> * Once device has been successfully registered it can be unregistered\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #008000;\"> * with input_unregister_device(); input_free_device() should not be\n</span><span style=\"color: #008080;\"> 11</span> <span style=\"color: #008000;\"> * called in this case.\n</span><span style=\"color: #008080;\"> 12</span> <span style=\"color: #008000;\"> *\n</span><span style=\"color: #008080;\"> 13</span> <span style=\"color: #008000;\"> * Note that this function is also used to register managed input devices\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #008000;\"> * (ones allocated with devm_input_allocate_device()). Such managed input\n</span><span style=\"color: #008080;\"> 15</span> <span style=\"color: #008000;\"> * devices need not be explicitly unregistered or freed, their tear down\n</span><span style=\"color: #008080;\"> 16</span> <span style=\"color: #008000;\"> * is controlled by the devres infrastructure. It is also worth noting\n</span><span style=\"color: #008080;\"> 17</span> <span style=\"color: #008000;\"> * that tear down of managed input devices is internally a 2-step process:\n</span><span style=\"color: #008080;\"> 18</span> <span style=\"color: #008000;\"> * registered managed input device is first unregistered, but stays in\n</span><span style=\"color: #008080;\"> 19</span> <span style=\"color: #008000;\"> * memory and can still handle input_event() calls (although events will\n</span><span style=\"color: #008080;\"> 20</span> <span style=\"color: #008000;\"> * not be delivered anywhere). The freeing of managed input device will\n</span><span style=\"color: #008080;\"> 21</span> <span style=\"color: #008000;\"> * happen later, when devres stack is unwound to the point where device\n</span><span style=\"color: #008080;\"> 22</span> <span style=\"color: #008000;\"> * allocation was made.\n</span><span style=\"color: #008080;\"> 23</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 24</span> <span style=\"color: #0000ff;\">int</span> input_register_device(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev)\n</span><span style=\"color: #008080;\"> 25</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 26</span>     <span style=\"color: #0000ff;\">struct</span> input_devres *devres =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\"> 27</span>      <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 输入事件的处理接口指针，用于和设备的事件类型进行匹配 </span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\"> 28</span>     <span style=\"color: #0000ff;\">struct</span> input_handler *<span style=\"color: #000000;\">handler;\n</span><span style=\"color: #008080;\"> 29</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> packet_size;\n</span><span style=\"color: #008080;\"> 30</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">path;\n</span><span style=\"color: #008080;\"> 31</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\"> 32</span> \n<span style=\"color: #008080;\"> 33</span>     <span style=\"color: #0000ff;\">if</span> (dev-&gt;<span style=\"color: #000000;\">devres_managed) {\n</span><span style=\"color: #008080;\"> 34</span>         devres =<span style=\"color: #000000;\"> devres_alloc(devm_input_device_unregister,\n</span><span style=\"color: #008080;\"> 35</span>                       <span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> input_devres), GFP_KERNEL);\n</span><span style=\"color: #008080;\"> 36</span>         <span style=\"color: #0000ff;\">if</span> (!<span style=\"color: #000000;\">devres)\n</span><span style=\"color: #008080;\"> 37</span>             <span style=\"color: #0000ff;\">return</span> -<span style=\"color: #000000;\">ENOMEM;\n</span><span style=\"color: #008080;\"> 38</span> \n<span style=\"color: #008080;\"> 39</span>         devres-&gt;input =<span style=\"color: #000000;\"> dev;\n</span><span style=\"color: #008080;\"> 40</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 41</span> \n<span style=\"color: #008080;\"> 42</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Every input device generates EV_SYN/SYN_REPORT events. </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 43</span>     __set_bit(EV_SYN, dev-&gt;<span style=\"color: #000000;\">evbit);\n</span><span style=\"color: #008080;\"> 44</span> \n<span style=\"color: #008080;\"> 45</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> KEY_RESERVED is not supposed to be transmitted to userspace. </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 46</span>     __clear_bit(KEY_RESERVED, dev-&gt;<span style=\"color: #000000;\">keybit);\n</span><span style=\"color: #008080;\"> 47</span> \n<span style=\"color: #008080;\"> 48</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Make sure that bitmasks not mentioned in dev-&gt;evbit are clean. </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 49</span> <span style=\"color: #000000;\">    input_cleanse_bitmasks(dev);\n</span><span style=\"color: #008080;\"> 50</span> \n<span style=\"color: #008080;\"> 51</span>     packet_size =<span style=\"color: #000000;\"> input_estimate_events_per_packet(dev);\n</span><span style=\"color: #008080;\"> 52</span>     <span style=\"color: #0000ff;\">if</span> (dev-&gt;hint_events_per_packet &lt;<span style=\"color: #000000;\"> packet_size)\n</span><span style=\"color: #008080;\"> 53</span>         dev-&gt;hint_events_per_packet =<span style=\"color: #000000;\"> packet_size;\n</span><span style=\"color: #008080;\"> 54</span> \n<span style=\"color: #008080;\"> 55</span>     dev-&gt;max_vals = dev-&gt;hint_events_per_packet + <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 56</span>     dev-&gt;vals = kcalloc(dev-&gt;max_vals, <span style=\"color: #0000ff;\">sizeof</span>(*dev-&gt;<span style=\"color: #000000;\">vals), GFP_KERNEL);\n</span><span style=\"color: #008080;\"> 57</span>     <span style=\"color: #0000ff;\">if</span> (!dev-&gt;<span style=\"color: #000000;\">vals) {\n</span><span style=\"color: #008080;\"> 58</span>         error = -<span style=\"color: #000000;\">ENOMEM;\n</span><span style=\"color: #008080;\"> 59</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_devres_free;\n</span><span style=\"color: #008080;\"> 60</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 61</span> \n<span style=\"color: #008080;\"> 62</span>     <span style=\"color: #008000;\">/*</span>\n<span style=\"color: #008080;\"> 63</span> <span style=\"color: #008000;\">     * If delay and period are pre-set by the driver, then autorepeating\n</span><span style=\"color: #008080;\"> 64</span> <span style=\"color: #008000;\">     * is handled by the driver itself and we don't do it in input.c.\n</span><span style=\"color: #008080;\"> 65</span>      <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 66</span>     <span style=\"color: #0000ff;\">if</span> (!dev-&gt;rep[REP_DELAY] &amp;&amp; !dev-&gt;<span style=\"color: #000000;\">rep[REP_PERIOD]) {\n</span><span style=\"color: #008080;\"> 67</span>         dev-&gt;timer.data = (<span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\">) dev;\n</span><span style=\"color: #008080;\"> 68</span>         dev-&gt;timer.function =<span style=\"color: #000000;\"> input_repeat_key;\n</span><span style=\"color: #008080;\"> 69</span>         dev-&gt;rep[REP_DELAY] = <span style=\"color: #800080;\">250</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 70</span>         dev-&gt;rep[REP_PERIOD] = <span style=\"color: #800080;\">33</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 71</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 72</span> \n<span style=\"color: #008080;\"> 73</span>     <span style=\"color: #0000ff;\">if</span> (!dev-&gt;<span style=\"color: #000000;\">getkeycode)\n</span><span style=\"color: #008080;\"> 74</span>         dev-&gt;getkeycode =<span style=\"color: #000000;\"> input_default_getkeycode;\n</span><span style=\"color: #008080;\"> 75</span> \n<span style=\"color: #008080;\"> 76</span>     <span style=\"color: #0000ff;\">if</span> (!dev-&gt;<span style=\"color: #000000;\">setkeycode)\n</span><span style=\"color: #008080;\"> 77</span>         dev-&gt;setkeycode =<span style=\"color: #000000;\"> input_default_setkeycode;\n</span><span style=\"color: #008080;\"> 78</span> \n<span style=\"color: #008080;\"> 79</span>     error = device_add(&amp;dev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\"> 80</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\"> 81</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_free_vals;\n</span><span style=\"color: #008080;\"> 82</span> \n<span style=\"color: #008080;\"> 83</span>     path = kobject_get_path(&amp;dev-&gt;<span style=\"color: #000000;\">dev.kobj, GFP_KERNEL);\n</span><span style=\"color: #008080;\"> 84</span>     pr_info(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%s as %s\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\"> 85</span>         dev-&gt;name ? dev-&gt;name : <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Unspecified device</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\"> 86</span>         path ? path : <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">N/A</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 87</span> <span style=\"color: #000000;\">    kfree(path);\n</span><span style=\"color: #008080;\"> 88</span> \n<span style=\"color: #008080;\"> 89</span>     error = mutex_lock_interruptible(&amp;<span style=\"color: #000000;\">input_mutex);\n</span><span style=\"color: #008080;\"> 90</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\"> 91</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_device_del;\n</span><span style=\"color: #008080;\"> 92</span>     \n<span style=\"color: #008080;\"> 93</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 重要:把设备挂到全局的input子系统设备链表input_dev_list上 </span><span style=\"color: #008000;\">*/</span>    \n<span style=\"color: #008080;\"> 94</span>     list_add_tail(&amp;dev-&gt;node, &amp;<span style=\"color: #000000;\">input_dev_list);\n</span><span style=\"color: #008080;\"> 95</span> \n<span style=\"color: #008080;\"> 96</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 核心重点，input设备在增加到input_dev_list链表上之后，会查找 \n</span><span style=\"color: #008080;\"> 97</span> <span style=\"color: #008000;\">     * input_handler_list事件处理链表上的handler进行匹配，这里的匹配 \n</span><span style=\"color: #008080;\"> 98</span> <span style=\"color: #008000;\">     * 方式与设备模型的device和driver匹配过程很相似</span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\"> 99</span>     list_for_each_entry(handler, &amp;<span style=\"color: #000000;\">input_handler_list, node)\n</span><span style=\"color: #008080;\">100</span>         input_attach_handler(dev, handler);<span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">遍历input_handler_list，通过input_match_device试图与每一个handler进行匹配 匹配上了就使用connect连接</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">101</span>     <span style=\"color: #008000;\">/*</span>\n<span style=\"color: #008080;\">102</span> <span style=\"color: #008000;\">    static int input_attach_handler(struct input_dev *dev, struct input_handler *handler)\n</span><span style=\"color: #008080;\">103</span> <span style=\"color: #008000;\">    {\n</span><span style=\"color: #008080;\">104</span> <span style=\"color: #008000;\">        const struct input_device_id *id;\n</span><span style=\"color: #008080;\">105</span> <span style=\"color: #008000;\">        int error;\n</span><span style=\"color: #008080;\">106</span> \n<span style=\"color: #008080;\">107</span> <span style=\"color: #008000;\">        id = input_match_device(handler, dev);\n</span><span style=\"color: #008080;\">108</span> <span style=\"color: #008000;\">        if (!id)\n</span><span style=\"color: #008080;\">109</span> <span style=\"color: #008000;\">            return -ENODEV;\n</span><span style=\"color: #008080;\">110</span> \n<span style=\"color: #008080;\">111</span> <span style=\"color: #008000;\">        error = handler-&gt;connect(handler, dev, id);\n</span><span style=\"color: #008080;\">112</span> <span style=\"color: #008000;\">        if (error &amp;&amp; error != -ENODEV)\n</span><span style=\"color: #008080;\">113</span> <span style=\"color: #008000;\">            pr_err(\"failed to attach handler %s to device %s, error: %d\\n\",\n</span><span style=\"color: #008080;\">114</span> <span style=\"color: #008000;\">                   handler-&gt;name, kobject_name(&amp;dev-&gt;dev.kobj), error);\n</span><span style=\"color: #008080;\">115</span> \n<span style=\"color: #008080;\">116</span> <span style=\"color: #008000;\">        return error;\n</span><span style=\"color: #008080;\">117</span> <span style=\"color: #008000;\">    }\n</span><span style=\"color: #008080;\">118</span>     <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">119</span>     \n<span style=\"color: #008080;\">120</span> <span style=\"color: #000000;\">    input_wakeup_procfs_readers();\n</span><span style=\"color: #008080;\">121</span> \n<span style=\"color: #008080;\">122</span>     mutex_unlock(&amp;<span style=\"color: #000000;\">input_mutex);\n</span><span style=\"color: #008080;\">123</span> \n<span style=\"color: #008080;\">124</span>     <span style=\"color: #0000ff;\">if</span> (dev-&gt;<span style=\"color: #000000;\">devres_managed) {\n</span><span style=\"color: #008080;\">125</span>         dev_dbg(dev-&gt;dev.parent, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%s: registering %s with devres.\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\">126</span>             __func__, dev_name(&amp;dev-&gt;<span style=\"color: #000000;\">dev));\n</span><span style=\"color: #008080;\">127</span>         devres_add(dev-&gt;<span style=\"color: #000000;\">dev.parent, devres);\n</span><span style=\"color: #008080;\">128</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">129</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">130</span> \n<span style=\"color: #008080;\">131</span> <span style=\"color: #000000;\">err_device_del:\n</span><span style=\"color: #008080;\">132</span>     device_del(&amp;dev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">133</span> <span style=\"color: #000000;\">err_free_vals:\n</span><span style=\"color: #008080;\">134</span>     kfree(dev-&gt;<span style=\"color: #000000;\">vals);\n</span><span style=\"color: #008080;\">135</span>     dev-&gt;vals =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">136</span> <span style=\"color: #000000;\">err_devres_free:\n</span><span style=\"color: #008080;\">137</span> <span style=\"color: #000000;\">    devres_free(devres);\n</span><span style=\"color: #008080;\">138</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">139</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">140</span> EXPORT_SYMBOL(input_register_device);</pre>\n</div>\n<h2>3.2注册handler</h2>\n<p>一般handler不需要我们自己写 内核里面已经有了很多的hanlder基本够用</p>\n下面以Evdev为例，来分析事件处理层。<br />\nvim drivers/input/evdev.c</div>\n<div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">struct</span> input_device_id evdev_ids[] =<span style=\"color: #000000;\"> {\n</span><span style=\"color: #008080;\"> 2</span>     { .driver_info = <span style=\"color: #800080;\">1</span> },    <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Matches all devices </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 3</span>     { },            <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Terminating zero entry </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 4</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 5</span> \n<span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">MODULE_DEVICE_TABLE(input, evdev_ids);\n</span><span style=\"color: #008080;\"> 7</span> \n<span style=\"color: #008080;\"> 8</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">struct</span> input_handler evdev_handler =<span style=\"color: #000000;\"> {\n</span><span style=\"color: #008080;\"> 9</span>     .<span style=\"color: #0000ff;\">event</span>        =<span style=\"color: #000000;\"> evdev_event,\n</span><span style=\"color: #008080;\">10</span>     .events        =<span style=\"color: #000000;\"> evdev_events,\n</span><span style=\"color: #008080;\">11</span>     .connect    =<span style=\"color: #000000;\"> evdev_connect,\n</span><span style=\"color: #008080;\">12</span>     .disconnect    =<span style=\"color: #000000;\"> evdev_disconnect,\n</span><span style=\"color: #008080;\">13</span>     .legacy_minors    = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\">14</span>     .minor        =<span style=\"color: #000000;\"> EVDEV_MINOR_BASE,\n</span><span style=\"color: #008080;\">15</span>     .name        = <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">evdev</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\">16</span>     .id_table    =<span style=\"color: #000000;\"> evdev_ids,\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">18</span> \n<span style=\"color: #008080;\">19</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">int</span> __init evdev_init(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">21</span>     <span style=\"color: #0000ff;\">return</span> input_register_handler(&amp;<span style=\"color: #000000;\">evdev_handler);\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">23</span> \n<span style=\"color: #008080;\">24</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span> __exit evdev_exit(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">26</span>     input_unregister_handler(&amp;<span style=\"color: #000000;\">evdev_handler);\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">28</span> \n<span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">module_init(evdev_init);\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">module_exit(evdev_exit);\n</span><span style=\"color: #008080;\">31</span> \n<span style=\"color: #008080;\">32</span> MODULE_AUTHOR(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Vojtech Pavlik &lt;vojtech@ucw.cz&gt;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">33</span> MODULE_DESCRIPTION(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Input driver event char devices</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">34</span> MODULE_LICENSE(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">GPL</span><span style=\"color: #800000;\">\"</span>);</pre>\n</div>\n<p>注册的handler可以在proc/bus/input/danlder中查看到</p>\n</div>\n<p><img src=\"Linux-input子系统/2909691-20220819102740731-2036281828.png\" alt=\"\" /></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * input_register_handler - register a new input handler\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * @handler: handler to be registered\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> * This function registers a new input handler (interface) for input\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> * devices in the system and attaches it to all input devices that\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * are compatible with the handler.\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">int</span> input_register_handler(<span style=\"color: #0000ff;\">struct</span> input_handler *<span style=\"color: #000000;\">handler)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">11</span>     <span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev;\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">13</span> \n<span style=\"color: #008080;\">14</span>     error = mutex_lock_interruptible(&amp;<span style=\"color: #000000;\">input_mutex);\n</span><span style=\"color: #008080;\">15</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">17</span> \n<span style=\"color: #008080;\">18</span>     INIT_LIST_HEAD(&amp;handler-&gt;<span style=\"color: #000000;\">h_list);\n</span><span style=\"color: #008080;\">19</span> 　　<code class=\"  language-rust\"><span class=\"token comment\">/* `重要`:把设备处理器挂到全局的input子系统设备链表input_handler_list上 */ </span></code>\n<span style=\"color: #008080;\">20</span>     list_add_tail(&amp;handler-&gt;node, &amp;<span style=\"color: #000000;\">input_handler_list);\n</span><span style=\"color: #008080;\">21</span> 　　<code class=\"  language-rust\"><span class=\"token comment\">/*遍历input_dev_list，试图与每一个input_dev进行匹配*/</span></code>\n<span style=\"color: #008080;\">22</span>     list_for_each_entry(dev, &amp;<span style=\"color: #000000;\">input_dev_list, node)\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">        input_attach_handler(dev, handler);<br />　　　　/*<br /></span><code class=\"  language-objectivec\"><span class=\"token keyword\">static <span class=\"token keyword\">int <span class=\"token function\">input_attach_handler<span class=\"token punctuation\">(<span class=\"token keyword\">struct input_dev <span class=\"token operator\">*dev<span class=\"token punctuation\">, <span class=\"token keyword\">struct input_handler <span class=\"token operator\">*handler<span class=\"token punctuation\">)\n<span class=\"token punctuation\">{\n    <span class=\"token keyword\">const <span class=\"token keyword\">struct input_device_id <span class=\"token operator\">*id<span class=\"token punctuation\">;\n    <span class=\"token keyword\">int error<span class=\"token punctuation\">;\n\n    <span class=\"token comment\">/* 利用handler-&gt;id_table和dev进行匹配*/\n    id <span class=\"token operator\">= <span class=\"token function\">input_match_device<span class=\"token punctuation\">(handler<span class=\"token punctuation\">, dev<span class=\"token punctuation\">)<span class=\"token punctuation\">;\n    <span class=\"token keyword\">if <span class=\"token punctuation\">(<span class=\"token operator\">!id<span class=\"token punctuation\">)\n        <span class=\"token keyword\">return <span class=\"token operator\">-ENODEV<span class=\"token punctuation\">;\n      <span class=\"token comment\">/*匹配成功，则调用handler-&gt;connect函数进行连接*/\n    error <span class=\"token operator\">= handler<span class=\"token operator\">-&gt;<span class=\"token function\">connect<span class=\"token punctuation\">(handler<span class=\"token punctuation\">, dev<span class=\"token punctuation\">, id<span class=\"token punctuation\">)<span class=\"token punctuation\">;\n    <span class=\"token keyword\">if <span class=\"token punctuation\">(error <span class=\"token operator\">&amp;&amp; error <span class=\"token operator\">!= <span class=\"token operator\">-ENODEV<span class=\"token punctuation\">)\n        <span class=\"token function\">pr_err<span class=\"token punctuation\">(<span class=\"token string\">\"failed to attach handler %s to device %s, error: %d\\n\"<span class=\"token punctuation\">,\n               handler<span class=\"token operator\">-&gt;name<span class=\"token punctuation\">, <span class=\"token function\">kobject_name<span class=\"token punctuation\">(<span class=\"token operator\">&amp;dev<span class=\"token operator\">-&gt;dev<span class=\"token punctuation\">.kobj<span class=\"token punctuation\">)<span class=\"token punctuation\">, error<span class=\"token punctuation\">)<span class=\"token punctuation\">;\n\n    <span class=\"token keyword\">return error<span class=\"token punctuation\">;\n<span class=\"token punctuation\">}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code><span style=\"color: #000000;\"><br />　　　　　　*/\n</span><span style=\"color: #008080;\">24</span> \n<span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    input_wakeup_procfs_readers();\n</span><span style=\"color: #008080;\">26</span> \n<span style=\"color: #008080;\">27</span>     mutex_unlock(&amp;<span style=\"color: #000000;\">input_mutex);\n</span><span style=\"color: #008080;\">28</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">30</span> EXPORT_SYMBOL(input_register_handler);</pre>\n</div>\n<p>这个过程和注册dev及其相似</p>\n<h2>3.3 handler的connect函数</h2>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">int</span> evdev_connect(<span style=\"color: #0000ff;\">struct</span> input_handler *handler, <span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev,\n</span><span style=\"color: #008080;\"> 2</span>              <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">struct</span> input_device_id *<span style=\"color: #000000;\">id)\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">struct</span> evdev *<span style=\"color: #000000;\">evdev;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> minor;\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> dev_no;\n</span><span style=\"color: #008080;\"> 7</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\"> 8</span>     \n<span style=\"color: #008080;\"> 9</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">申请一个新的次设备号</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span>     minor = input_get_new_minor(EVDEV_MINOR_BASE, EVDEV_MINORS, <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">11</span> \n<span style=\"color: #008080;\">12</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 这说明内核已经没办法再分配这种类型的设备了 </span><span style=\"color: #008000;\">*/</span> \n<span style=\"color: #008080;\">13</span>     <span style=\"color: #0000ff;\">if</span> (minor &lt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">) {\n</span><span style=\"color: #008080;\">14</span>         error =<span style=\"color: #000000;\"> minor;\n</span><span style=\"color: #008080;\">15</span>         pr_err(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">failed to reserve new minor: %d\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, error);\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">18</span> \n<span style=\"color: #008080;\">19</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 开始给evdev事件层驱动分配空间了 </span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\">20</span>     evdev = kzalloc(<span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> evdev), GFP_KERNEL);\n</span><span style=\"color: #008080;\">21</span>     <span style=\"color: #0000ff;\">if</span> (!<span style=\"color: #000000;\">evdev) {\n</span><span style=\"color: #008080;\">22</span>         error = -<span style=\"color: #000000;\">ENOMEM;\n</span><span style=\"color: #008080;\">23</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_free_minor;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">25</span> \n<span style=\"color: #008080;\">26</span>         <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 初始化client_list列表和evdev_wait队列 </span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\">27</span>     INIT_LIST_HEAD(&amp;evdev-&gt;<span style=\"color: #000000;\">client_list);\n</span><span style=\"color: #008080;\">28</span>     spin_lock_init(&amp;evdev-&gt;<span style=\"color: #000000;\">client_lock);\n</span><span style=\"color: #008080;\">29</span>     mutex_init(&amp;evdev-&gt;<span style=\"color: #000000;\">mutex);\n</span><span style=\"color: #008080;\">30</span>     init_waitqueue_head(&amp;evdev-&gt;<span style=\"color: #000000;\">wait);\n</span><span style=\"color: #008080;\">31</span>     evdev-&gt;exist = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">32</span> \n<span style=\"color: #008080;\">33</span>     dev_no =<span style=\"color: #000000;\"> minor;\n</span><span style=\"color: #008080;\">34</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Normalize device number if it falls into legacy range </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">35</span>     <span style=\"color: #0000ff;\">if</span> (dev_no &lt; EVDEV_MINOR_BASE +<span style=\"color: #000000;\"> EVDEV_MINORS)\n</span><span style=\"color: #008080;\">36</span>         dev_no -=<span style=\"color: #000000;\"> EVDEV_MINOR_BASE;\n</span><span style=\"color: #008080;\">37</span>     \n<span style=\"color: #008080;\">38</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">设置设备节点名称，/dev/eventX 就是在此时设置</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">39</span>     dev_set_name(&amp;evdev-&gt;dev, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">event%d</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, dev_no);\n</span><span style=\"color: #008080;\">40</span> \n<span style=\"color: #008080;\">41</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 初始化evdev结构体，其中handle为输入设备和事件处理的关联接口 </span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\">42</span>     evdev-&gt;handle.dev =<span style=\"color: #000000;\"> input_get_device(dev);\n</span><span style=\"color: #008080;\">43</span>     evdev-&gt;handle.name = dev_name(&amp;evdev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">44</span>     evdev-&gt;handle.handler =<span style=\"color: #000000;\"> handler;\n</span><span style=\"color: #008080;\">45</span>     evdev-&gt;handle.<span style=\"color: #0000ff;\">private</span> =<span style=\"color: #000000;\"> evdev;\n</span><span style=\"color: #008080;\">46</span> \n<span style=\"color: #008080;\">47</span>       <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">设置设备号，应用层就是通过设备号，找到该设备的</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">48</span>     evdev-&gt;dev.devt =<span style=\"color: #000000;\"> MKDEV(INPUT_MAJOR, minor);\n</span><span style=\"color: #008080;\">49</span>     evdev-&gt;dev.<span style=\"color: #0000ff;\">class</span> = &amp;<span style=\"color: #000000;\">input_class;\n</span><span style=\"color: #008080;\">50</span>     evdev-&gt;dev.parent = &amp;dev-&gt;<span style=\"color: #000000;\">dev;\n</span><span style=\"color: #008080;\">51</span>     evdev-&gt;dev.release =<span style=\"color: #000000;\"> evdev_free;\n</span><span style=\"color: #008080;\">52</span>     device_initialize(&amp;evdev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">53</span> \n<span style=\"color: #008080;\">54</span>      <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> input_dev设备驱动和handler事件处理层的关联，就在这时由handle完成 </span><span style=\"color: #008000;\">*/</span> \n<span style=\"color: #008080;\">55</span>     error = input_register_handle(&amp;evdev-&gt;<span style=\"color: #000000;\">handle);\n</span><span style=\"color: #008080;\">56</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\">57</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_free_evdev;\n</span><span style=\"color: #008080;\">58</span> \n<span style=\"color: #008080;\">59</span>     cdev_init(&amp;evdev-&gt;cdev, &amp;<span style=\"color: #000000;\">evdev_fops);\n</span><span style=\"color: #008080;\">60</span>     evdev-&gt;cdev.kobj.parent = &amp;evdev-&gt;<span style=\"color: #000000;\">dev.kobj;\n</span><span style=\"color: #008080;\">61</span>     error = cdev_add(&amp;evdev-&gt;cdev, evdev-&gt;dev.devt, <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">62</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\">63</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_unregister_handle;\n</span><span style=\"color: #008080;\">64</span> \n<span style=\"color: #008080;\">65</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">将设备加入到Linux设备模型，它的内部将找到它的bus，然后让它的bus\n</span><span style=\"color: #008080;\">66</span> <span style=\"color: #008000;\">    给它找到它的driver，在驱动或者总线的probe函数中，一般会在/dev/目录\n</span><span style=\"color: #008080;\">67</span> <span style=\"color: #008000;\">    先创建相应的设备节点，这样应用程序就可以通过该设备节点来使用设备了\n</span><span style=\"color: #008080;\">68</span> <span style=\"color: #008000;\">    ，/dev/eventX 设备节点就是在此时生成\n</span><span style=\"color: #008080;\">69</span>     <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">70</span>     error = device_add(&amp;evdev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">71</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\">72</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_cleanup_evdev;\n</span><span style=\"color: #008080;\">73</span> \n<span style=\"color: #008080;\">74</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">75</span> \n<span style=\"color: #008080;\">76</span> <span style=\"color: #000000;\"> err_cleanup_evdev:\n</span><span style=\"color: #008080;\">77</span> <span style=\"color: #000000;\">    evdev_cleanup(evdev);\n</span><span style=\"color: #008080;\">78</span> <span style=\"color: #000000;\"> err_unregister_handle:\n</span><span style=\"color: #008080;\">79</span>     input_unregister_handle(&amp;evdev-&gt;<span style=\"color: #000000;\">handle);\n</span><span style=\"color: #008080;\">80</span> <span style=\"color: #000000;\"> err_free_evdev:\n</span><span style=\"color: #008080;\">81</span>     put_device(&amp;evdev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">82</span> <span style=\"color: #000000;\"> err_free_minor:\n</span><span style=\"color: #008080;\">83</span> <span style=\"color: #000000;\">    input_free_minor(minor);\n</span><span style=\"color: #008080;\">84</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">85</span> }</pre>\n</div>\n<p>over</p>\n<h1>4.应用层的角度分析到底层</h1>\n<p>evdev_read（）---------------------------》wait_event_interruptible(evdev-&gt;wait,client-&gt;packet_head != client-&gt;tail || !evdev-&gt;exist || client-&gt;revoked);等待evdev-&gt;wait唤醒</p>\n<p>　　evdev_pass_values-----------------------》wake_up_interruptible(&amp;evdev-&gt;wait);</p>\n<p>　　　　evdev_events---------------------------》evdev_pass_values(client, vals, count, ev_time);<br />　　　　　　evdev_event----------------------------》evdev_events(handle, vals, 1);</p>\n<p>　　　　　　　　static struct input_handler evdev_handler = {<br />&nbsp;&nbsp; 　　　　　　　　&nbsp;.event&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;= evdev_event,<br />&nbsp;&nbsp; &nbsp;　　　　　　　　.events&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;= evdev_events,<br />&nbsp;&nbsp; 　　　　　　　　&nbsp;.connect&nbsp;&nbsp; &nbsp;= evdev_connect,<br />&nbsp;&nbsp; &nbsp;　　　　　　　　.disconnect&nbsp;&nbsp; &nbsp;= evdev_disconnect,<br />&nbsp;&nbsp; 　　　　　　　　&nbsp;.legacy_minors&nbsp;&nbsp; &nbsp;= true,<br />&nbsp;&nbsp; &nbsp;　　　　　　　　.minor&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;= EVDEV_MINOR_BASE,<br />&nbsp;&nbsp; &nbsp;　　　　　　　　.name&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;= \"evdev\",<br />&nbsp;&nbsp; &nbsp;　　　　　　　　.id_table&nbsp;&nbsp; &nbsp;= evdev_ids,<br />　　　　　　　　};</p>\n<p>　　　　　　　　input_to_handler-----------------------------》　　 if (handler-&gt;events)<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　handler-&gt;events(handle, vals, count);<br />&nbsp;&nbsp; &nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　else if (handler-&gt;event)<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　for (v = vals; v != vals + count; v++)<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　&nbsp;handler-&gt;event(handle, v-&gt;type, v-&gt;code, v-&gt;value);</p>\n<p>　　　　　　input_pass_values--------------------------------》count = input_to_handler(handle, vals, count);</p>\n<p>　　input_handle_event----------------------------》input_pass_values(dev, dev-&gt;vals, dev-&gt;num_vals);</p>\n</div>\n<p>input_event----------------------------------------》input_handle_event(dev, type, code, value);</p>\n<p>显然，就是input_dev通过输入核心为驱动层提供统一的接口，<code>input_event</code>，来向事件处理层上报数据并唤醒。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n</div>\n</div>\n","source":"_posts/2022/01/Linux-input子系统.md","raw":"---\ntitle: Linux input子系统\npermalink: Linux input子系统\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-01-01 21:12:46\npassword:\nsummary:\ntags:\n- linux\n- input\ncategories:\n- linux\nkeywords:\ndescription:\n---\n<div>\n<div>\n<ul>\n<li>\n<blockquote>\n<h5>Input driver ：主要实现对硬件设备的读写访问，中断设置，并把硬件产生的事件转换为核心层定义的规范提交给事件处理层。</h5>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<h5>Input core ：承上启下。为设备驱动层提供了规范和接口；通知事件处理层对事件进行处理；</h5>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<h5>Event handler ：提供用户编程的接口（设备节点），并处理驱动层提交的数据处理。</h5>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"Linux-input子系统/2909691-20220819093409715-1604400596.png\" alt=\"\" /></p>\n<h1>1输入子系统框架分析</h1>\n<div>\n<div>\n<h2>1.1设备驱动层（Input driver）</h2>\n<ul>\n<li>device是纯硬件操作层，包含不同的硬件接口处理，如gpio等</li>\n<li>对于每种不同的具体硬件操作，都对应着不同的input_dev结构体</li>\n<li>该结构体内部也包含着一个h_list，指向handle</li>\n</ul>\n</div>\n</div>\n<div>\n<div>\n<div>\n<div>\n<h2>1.2.系统核心层（Input core）</h2>\n<ul>\n<li>申请主设备号;</li>\n<li>提供input_register_device跟input_register_handler函数分别用于注册device跟handler;</li>\n<li>提供input_register_handle函数用于注册一个事件处理，代表一个成功配对的input_dev和input_handler;</li>\n</ul>\n</div>\n</div>\n<h2>1.3.事件处理层（Event handler）</h2>\n<ul>\n<li>不涉及硬件方面的具体操作，handler层是纯软件层，包含不同的解决方案，如键盘，鼠标，游戏手柄等；</li>\n<li>对于不同的解决方案，都包含一个名为input_handler的结构体，该结构体内含的主要成员如下：</li>\n</ul>\n<table>\n<thead>\n<tr><th>成员</th><th>功能</th></tr>\n</thead>\n<tbody>\n<tr>\n<td>.id_table</td>\n<td>一个存放该handler所支持的设备id的表（其实内部存放的是EV_xxx事件,用于判断device是否支持该事件）</td>\n</tr>\n<tr>\n<td>.fops</td>\n<td>该handler的file_operation</td>\n</tr>\n<tr>\n<td>.connect</td>\n<td>连接该handler跟所支持device的函数</td>\n</tr>\n<tr>\n<td>.disconnect</td>\n<td>断开该连接</td>\n</tr>\n<tr>\n<td>.event</td>\n<td>事件处理函数，让device调用</td>\n</tr>\n<tr>\n<td>h_list</td>\n<td>是一个链表，该链表保存着该handler到所支持的所有device的中间站：handle结构体的指针</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1>2.两条链表连接dev和handler</h1>\n<div class=\"cnblogs_code\">\n<pre>#file pwd: drivers/input/input.c<br /><br />MODULE_AUTHOR(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Vojtech Pavlik &lt;vojtech@suse.cz&gt;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\nMODULE_DESCRIPTION(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Input core</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\nMODULE_LICENSE(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">GPL</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n</span><span style=\"color: #0000ff;\">#define</span> INPUT_MAX_CHAR_DEVICES        1024\n<span style=\"color: #0000ff;\">#define</span> INPUT_FIRST_DYNAMIC_DEV        256\n<span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> DEFINE_IDA(input_ida);\n\n</span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> LIST_HEAD(input_dev_list);\n</span><span style=\"color: #0000ff;\">static</span> LIST_HEAD(input_handler_list);</pre>\n</div>\n在input.c文件中两个全局链表input_handler_list和<span style=\"color: #000000;\">input_dev_list</span>，通过handle相互关联：</div>\n<div><img src=\"Linux-input子系统/2909691-20220819094250974-180404869.webp\" alt=\"\" />\n<p>&nbsp;</p>\n<h1>3.输入子系统代码分析</h1>\n<p>文件路径：driver/input/input.c （核心层）</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">int</span> __init input_init(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> err;\n</span><span style=\"color: #008080;\"> 4</span> \n<span style=\"color: #008080;\"> 5</span>     err = class_register(&amp;<span style=\"color: #000000;\">input_class);  <code class=\"  language-cpp\"><span class=\"token comment\">//在/sys/class下创建逻辑（input）类，在类下面挂载input设备</span></code>\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (err) {\n</span><span style=\"color: #008080;\"> 7</span>         pr_err(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">unable to register input_dev class\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> err;\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">10</span> \n<span style=\"color: #008080;\">11</span>     err =<span style=\"color: #000000;\"> input_proc_init();　　<code class=\"  language-cpp\"><span class=\"token punctuation\"><span class=\"token comment\">//在/proc下面建立相关的虚拟文件，proc下创建的文件可以看作是虚拟文件对内核读写的一种操作</span></span></code>\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (err)\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> fail1;\n</span><span style=\"color: #008080;\">14</span> \n<span style=\"color: #008080;\">15</span>     err = register_chrdev_region(MKDEV(INPUT_MAJOR, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">),//在/dev下创建input设备号\n</span><span style=\"color: #008080;\">16</span>                      INPUT_MAX_CHAR_DEVICES, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">input</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">17</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (err) {\n</span><span style=\"color: #008080;\">18</span>         pr_err(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">unable to register char major %d</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, INPUT_MAJOR);\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> fail2;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">21</span> \n<span style=\"color: #008080;\">22</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span> \n<span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\"> fail2:    input_proc_exit();\n</span><span style=\"color: #008080;\">25</span>  fail1:    class_unregister(&amp;<span style=\"color: #000000;\">input_class);\n</span><span style=\"color: #008080;\">26</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> err;\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">28</span> \n<span style=\"color: #008080;\">29</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span> __exit input_exit(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">    input_proc_exit();\n</span><span style=\"color: #008080;\">32</span>     unregister_chrdev_region(MKDEV(INPUT_MAJOR, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">),\n</span><span style=\"color: #008080;\">33</span> <span style=\"color: #000000;\">                 INPUT_MAX_CHAR_DEVICES);\n</span><span style=\"color: #008080;\">34</span>     class_unregister(&amp;<span style=\"color: #000000;\">input_class);\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">36</span> \n<span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">subsys_initcall(input_init);\n</span><span style=\"color: #008080;\">38</span> module_exit(input_exit);</pre>\n</div>\n<p>现在基本框架已经建成，如何往input系统里面注册dev和hanlder呢？</p>\n<h2>3.1注册dev</h2>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\">  2</span> <span style=\"color: #008000;\"> * struct input_dev - represents an input device\n</span><span style=\"color: #008080;\">  3</span> <span style=\"color: #008000;\"> * @name: name of the device\n</span><span style=\"color: #008080;\">  4</span> <span style=\"color: #008000;\"> * @phys: physical path to the device in the system hierarchy\n</span><span style=\"color: #008080;\">  5</span> <span style=\"color: #008000;\"> * @uniq: unique identification code for the device (if device has it)\n</span><span style=\"color: #008080;\">  6</span> <span style=\"color: #008000;\"> * @id: id of the device (struct input_id)\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #008000;\"> * @propbit: bitmap of device properties and quirks\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #008000;\"> * @evbit: bitmap of types of events supported by the device (EV_KEY,\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #008000;\"> *    EV_REL, etc.)\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #008000;\"> * @keybit: bitmap of keys/buttons this device has\n</span><span style=\"color: #008080;\"> 11</span> <span style=\"color: #008000;\"> * @relbit: bitmap of relative axes for the device\n</span><span style=\"color: #008080;\"> 12</span> <span style=\"color: #008000;\"> * @absbit: bitmap of absolute axes for the device\n</span><span style=\"color: #008080;\"> 13</span> <span style=\"color: #008000;\"> * @mscbit: bitmap of miscellaneous events supported by the device\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #008000;\"> * @ledbit: bitmap of leds present on the device\n</span><span style=\"color: #008080;\"> 15</span> <span style=\"color: #008000;\"> * @sndbit: bitmap of sound effects supported by the device\n</span><span style=\"color: #008080;\"> 16</span> <span style=\"color: #008000;\"> * @ffbit: bitmap of force feedback effects supported by the device\n</span><span style=\"color: #008080;\"> 17</span> <span style=\"color: #008000;\"> * @swbit: bitmap of switches present on the device\n</span><span style=\"color: #008080;\"> 18</span> <span style=\"color: #008000;\"> * @hint_events_per_packet: average number of events generated by the\n</span><span style=\"color: #008080;\"> 19</span> <span style=\"color: #008000;\"> *    device in a packet (between EV_SYN/SYN_REPORT events). Used by\n</span><span style=\"color: #008080;\"> 20</span> <span style=\"color: #008000;\"> *    event handlers to estimate size of the buffer needed to hold\n</span><span style=\"color: #008080;\"> 21</span> <span style=\"color: #008000;\"> *    events.\n</span><span style=\"color: #008080;\"> 22</span> <span style=\"color: #008000;\"> * @keycodemax: size of keycode table\n</span><span style=\"color: #008080;\"> 23</span> <span style=\"color: #008000;\"> * @keycodesize: size of elements in keycode table\n</span><span style=\"color: #008080;\"> 24</span> <span style=\"color: #008000;\"> * @keycode: map of scancodes to keycodes for this device\n</span><span style=\"color: #008080;\"> 25</span> <span style=\"color: #008000;\"> * @getkeycode: optional legacy method to retrieve current keymap.\n</span><span style=\"color: #008080;\"> 26</span> <span style=\"color: #008000;\"> * @setkeycode: optional method to alter current keymap, used to implement\n</span><span style=\"color: #008080;\"> 27</span> <span style=\"color: #008000;\"> *    sparse keymaps. If not supplied default mechanism will be used.\n</span><span style=\"color: #008080;\"> 28</span> <span style=\"color: #008000;\"> *    The method is being called while holding event_lock and thus must\n</span><span style=\"color: #008080;\"> 29</span> <span style=\"color: #008000;\"> *    not sleep\n</span><span style=\"color: #008080;\"> 30</span> <span style=\"color: #008000;\"> * @ff: force feedback structure associated with the device if device\n</span><span style=\"color: #008080;\"> 31</span> <span style=\"color: #008000;\"> *    supports force feedback effects\n</span><span style=\"color: #008080;\"> 32</span> <span style=\"color: #008000;\"> * @repeat_key: stores key code of the last key pressed; used to implement\n</span><span style=\"color: #008080;\"> 33</span> <span style=\"color: #008000;\"> *    software autorepeat\n</span><span style=\"color: #008080;\"> 34</span> <span style=\"color: #008000;\"> * @timer: timer for software autorepeat\n</span><span style=\"color: #008080;\"> 35</span> <span style=\"color: #008000;\"> * @rep: current values for autorepeat parameters (delay, rate)\n</span><span style=\"color: #008080;\"> 36</span> <span style=\"color: #008000;\"> * @mt: pointer to multitouch state\n</span><span style=\"color: #008080;\"> 37</span> <span style=\"color: #008000;\"> * @absinfo: array of &amp;struct input_absinfo elements holding information\n</span><span style=\"color: #008080;\"> 38</span> <span style=\"color: #008000;\"> *    about absolute axes (current value, min, max, flat, fuzz,\n</span><span style=\"color: #008080;\"> 39</span> <span style=\"color: #008000;\"> *    resolution)\n</span><span style=\"color: #008080;\"> 40</span> <span style=\"color: #008000;\"> * @key: reflects current state of device's keys/buttons\n</span><span style=\"color: #008080;\"> 41</span> <span style=\"color: #008000;\"> * @led: reflects current state of device's LEDs\n</span><span style=\"color: #008080;\"> 42</span> <span style=\"color: #008000;\"> * @snd: reflects current state of sound effects\n</span><span style=\"color: #008080;\"> 43</span> <span style=\"color: #008000;\"> * @sw: reflects current state of device's switches\n</span><span style=\"color: #008080;\"> 44</span> <span style=\"color: #008000;\"> * @open: this method is called when the very first user calls\n</span><span style=\"color: #008080;\"> 45</span> <span style=\"color: #008000;\"> *    input_open_device(). The driver must prepare the device\n</span><span style=\"color: #008080;\"> 46</span> <span style=\"color: #008000;\"> *    to start generating events (start polling thread,\n</span><span style=\"color: #008080;\"> 47</span> <span style=\"color: #008000;\"> *    request an IRQ, submit URB, etc.)\n</span><span style=\"color: #008080;\"> 48</span> <span style=\"color: #008000;\"> * @close: this method is called when the very last user calls\n</span><span style=\"color: #008080;\"> 49</span> <span style=\"color: #008000;\"> *    input_close_device().\n</span><span style=\"color: #008080;\"> 50</span> <span style=\"color: #008000;\"> * @flush: purges the device. Most commonly used to get rid of force\n</span><span style=\"color: #008080;\"> 51</span> <span style=\"color: #008000;\"> *    feedback effects loaded into the device when disconnecting\n</span><span style=\"color: #008080;\"> 52</span> <span style=\"color: #008000;\"> *    from it\n</span><span style=\"color: #008080;\"> 53</span> <span style=\"color: #008000;\"> * @event: event handler for events sent _to_ the device, like EV_LED\n</span><span style=\"color: #008080;\"> 54</span> <span style=\"color: #008000;\"> *    or EV_SND. The device is expected to carry out the requested\n</span><span style=\"color: #008080;\"> 55</span> <span style=\"color: #008000;\"> *    action (turn on a LED, play sound, etc.) The call is protected\n</span><span style=\"color: #008080;\"> 56</span> <span style=\"color: #008000;\"> *    by @event_lock and must not sleep\n</span><span style=\"color: #008080;\"> 57</span> <span style=\"color: #008000;\"> * @grab: input handle that currently has the device grabbed (via\n</span><span style=\"color: #008080;\"> 58</span> <span style=\"color: #008000;\"> *    EVIOCGRAB ioctl). When a handle grabs a device it becomes sole\n</span><span style=\"color: #008080;\"> 59</span> <span style=\"color: #008000;\"> *    recipient for all input events coming from the device\n</span><span style=\"color: #008080;\"> 60</span> <span style=\"color: #008000;\"> * @event_lock: this spinlock is is taken when input core receives\n</span><span style=\"color: #008080;\"> 61</span> <span style=\"color: #008000;\"> *    and processes a new event for the device (in input_event()).\n</span><span style=\"color: #008080;\"> 62</span> <span style=\"color: #008000;\"> *    Code that accesses and/or modifies parameters of a device\n</span><span style=\"color: #008080;\"> 63</span> <span style=\"color: #008000;\"> *    (such as keymap or absmin, absmax, absfuzz, etc.) after device\n</span><span style=\"color: #008080;\"> 64</span> <span style=\"color: #008000;\"> *    has been registered with input core must take this lock.\n</span><span style=\"color: #008080;\"> 65</span> <span style=\"color: #008000;\"> * @mutex: serializes calls to open(), close() and flush() methods\n</span><span style=\"color: #008080;\"> 66</span> <span style=\"color: #008000;\"> * @users: stores number of users (input handlers) that opened this\n</span><span style=\"color: #008080;\"> 67</span> <span style=\"color: #008000;\"> *    device. It is used by input_open_device() and input_close_device()\n</span><span style=\"color: #008080;\"> 68</span> <span style=\"color: #008000;\"> *    to make sure that dev-&gt;open() is only called when the first\n</span><span style=\"color: #008080;\"> 69</span> <span style=\"color: #008000;\"> *    user opens device and dev-&gt;close() is called when the very\n</span><span style=\"color: #008080;\"> 70</span> <span style=\"color: #008000;\"> *    last user closes the device\n</span><span style=\"color: #008080;\"> 71</span> <span style=\"color: #008000;\"> * @going_away: marks devices that are in a middle of unregistering and\n</span><span style=\"color: #008080;\"> 72</span> <span style=\"color: #008000;\"> *    causes input_open_device*() fail with -ENODEV.\n</span><span style=\"color: #008080;\"> 73</span> <span style=\"color: #008000;\"> * @dev: driver model's view of this device\n</span><span style=\"color: #008080;\"> 74</span> <span style=\"color: #008000;\"> * @h_list: list of input handles associated with the device. When\n</span><span style=\"color: #008080;\"> 75</span> <span style=\"color: #008000;\"> *    accessing the list dev-&gt;mutex must be held\n</span><span style=\"color: #008080;\"> 76</span> <span style=\"color: #008000;\"> * @node: used to place the device onto input_dev_list\n</span><span style=\"color: #008080;\"> 77</span> <span style=\"color: #008000;\"> * @num_vals: number of values queued in the current frame\n</span><span style=\"color: #008080;\"> 78</span> <span style=\"color: #008000;\"> * @max_vals: maximum number of values queued in a frame\n</span><span style=\"color: #008080;\"> 79</span> <span style=\"color: #008000;\"> * @vals: array of values queued in the current frame\n</span><span style=\"color: #008080;\"> 80</span> <span style=\"color: #008000;\"> * @devres_managed: indicates that devices is managed with devres framework\n</span><span style=\"color: #008080;\"> 81</span> <span style=\"color: #008000;\"> *    and needs not be explicitly unregistered or freed.\n</span><span style=\"color: #008080;\"> 82</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 83</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> input_dev {\n</span><span style=\"color: #008080;\"> 84</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">name;\n</span><span style=\"color: #008080;\"> 85</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">phys;\n</span><span style=\"color: #008080;\"> 86</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">uniq;\n</span><span style=\"color: #008080;\"> 87</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> input_id id;\n</span><span style=\"color: #008080;\"> 88</span> \n<span style=\"color: #008080;\"> 89</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> propbit[BITS_TO_LONGS(INPUT_PROP_CNT)];\n</span><span style=\"color: #008080;\"> 90</span> \n<span style=\"color: #008080;\"> 91</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> evbit[BITS_TO_LONGS(EV_CNT)];\n</span><span style=\"color: #008080;\"> 92</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> keybit[BITS_TO_LONGS(KEY_CNT)];\n</span><span style=\"color: #008080;\"> 93</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> relbit[BITS_TO_LONGS(REL_CNT)];\n</span><span style=\"color: #008080;\"> 94</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> absbit[BITS_TO_LONGS(ABS_CNT)];\n</span><span style=\"color: #008080;\"> 95</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> mscbit[BITS_TO_LONGS(MSC_CNT)];\n</span><span style=\"color: #008080;\"> 96</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> ledbit[BITS_TO_LONGS(LED_CNT)];\n</span><span style=\"color: #008080;\"> 97</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> sndbit[BITS_TO_LONGS(SND_CNT)];\n</span><span style=\"color: #008080;\"> 98</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> ffbit[BITS_TO_LONGS(FF_CNT)];\n</span><span style=\"color: #008080;\"> 99</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> swbit[BITS_TO_LONGS(SW_CNT)];\n</span><span style=\"color: #008080;\">100</span> \n<span style=\"color: #008080;\">101</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> hint_events_per_packet;\n</span><span style=\"color: #008080;\">102</span> \n<span style=\"color: #008080;\">103</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> keycodemax;\n</span><span style=\"color: #008080;\">104</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> keycodesize;\n</span><span style=\"color: #008080;\">105</span>     <span style=\"color: #0000ff;\">void</span> *<span style=\"color: #000000;\">keycode;\n</span><span style=\"color: #008080;\">106</span> \n<span style=\"color: #008080;\">107</span>     <span style=\"color: #0000ff;\">int</span> (*setkeycode)(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev,\n</span><span style=\"color: #008080;\">108</span>               <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">struct</span> input_keymap_entry *<span style=\"color: #000000;\">ke,\n</span><span style=\"color: #008080;\">109</span>               unsigned <span style=\"color: #0000ff;\">int</span> *<span style=\"color: #000000;\">old_keycode);\n</span><span style=\"color: #008080;\">110</span>     <span style=\"color: #0000ff;\">int</span> (*getkeycode)(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev,\n</span><span style=\"color: #008080;\">111</span>               <span style=\"color: #0000ff;\">struct</span> input_keymap_entry *<span style=\"color: #000000;\">ke);\n</span><span style=\"color: #008080;\">112</span> \n<span style=\"color: #008080;\">113</span>     <span style=\"color: #0000ff;\">struct</span> ff_device *<span style=\"color: #000000;\">ff;\n</span><span style=\"color: #008080;\">114</span> \n<span style=\"color: #008080;\">115</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> repeat_key;\n</span><span style=\"color: #008080;\">116</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> timer_list timer;\n</span><span style=\"color: #008080;\">117</span> \n<span style=\"color: #008080;\">118</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> rep[REP_CNT];\n</span><span style=\"color: #008080;\">119</span> \n<span style=\"color: #008080;\">120</span>     <span style=\"color: #0000ff;\">struct</span> input_mt *<span style=\"color: #000000;\">mt;\n</span><span style=\"color: #008080;\">121</span> \n<span style=\"color: #008080;\">122</span>     <span style=\"color: #0000ff;\">struct</span> input_absinfo *<span style=\"color: #000000;\">absinfo;\n</span><span style=\"color: #008080;\">123</span> \n<span style=\"color: #008080;\">124</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> key[BITS_TO_LONGS(KEY_CNT)];\n</span><span style=\"color: #008080;\">125</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> led[BITS_TO_LONGS(LED_CNT)];\n</span><span style=\"color: #008080;\">126</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> snd[BITS_TO_LONGS(SND_CNT)];\n</span><span style=\"color: #008080;\">127</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> sw[BITS_TO_LONGS(SW_CNT)];\n</span><span style=\"color: #008080;\">128</span> \n<span style=\"color: #008080;\">129</span>     <span style=\"color: #0000ff;\">int</span> (*open)(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">130</span>     <span style=\"color: #0000ff;\">void</span> (*close)(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">131</span>     <span style=\"color: #0000ff;\">int</span> (*flush)(<span style=\"color: #0000ff;\">struct</span> input_dev *dev, <span style=\"color: #0000ff;\">struct</span> file *<span style=\"color: #000000;\">file);\n</span><span style=\"color: #008080;\">132</span>     <span style=\"color: #0000ff;\">int</span> (*<span style=\"color: #0000ff;\">event</span>)(<span style=\"color: #0000ff;\">struct</span> input_dev *dev, unsigned <span style=\"color: #0000ff;\">int</span> type, unsigned <span style=\"color: #0000ff;\">int</span> code, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> value);\n</span><span style=\"color: #008080;\">133</span> \n<span style=\"color: #008080;\">134</span>     <span style=\"color: #0000ff;\">struct</span> input_handle __rcu *<span style=\"color: #000000;\">grab;\n</span><span style=\"color: #008080;\">135</span> \n<span style=\"color: #008080;\">136</span> <span style=\"color: #000000;\">    spinlock_t event_lock;\n</span><span style=\"color: #008080;\">137</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> mutex mutex;\n</span><span style=\"color: #008080;\">138</span> \n<span style=\"color: #008080;\">139</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> users;\n</span><span style=\"color: #008080;\">140</span>     <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> going_away;\n</span><span style=\"color: #008080;\">141</span> \n<span style=\"color: #008080;\">142</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> device dev;\n</span><span style=\"color: #008080;\">143</span> \n<span style=\"color: #008080;\">144</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> list_head    h_list;\n</span><span style=\"color: #008080;\">145</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> list_head    node;\n</span><span style=\"color: #008080;\">146</span> \n<span style=\"color: #008080;\">147</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> num_vals;\n</span><span style=\"color: #008080;\">148</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> max_vals;\n</span><span style=\"color: #008080;\">149</span>     <span style=\"color: #0000ff;\">struct</span> input_value *<span style=\"color: #000000;\">vals;\n</span><span style=\"color: #008080;\">150</span> \n<span style=\"color: #008080;\">151</span>     <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> devres_managed;\n</span><span style=\"color: #008080;\">152</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">153</span> <span style=\"color: #0000ff;\">#define</span> to_input_dev(d) container_of(d, struct input_dev, dev)</pre>\n</div>\n<p>&nbsp;</p>\n<div>\n<div>&nbsp;</div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\">  2</span> <span style=\"color: #008000;\"> * input_register_device - register device with input core\n</span><span style=\"color: #008080;\">  3</span> <span style=\"color: #008000;\"> * @dev: device to be registered\n</span><span style=\"color: #008080;\">  4</span> <span style=\"color: #008000;\"> *\n</span><span style=\"color: #008080;\">  5</span> <span style=\"color: #008000;\"> * This function registers device with input core. The device must be\n</span><span style=\"color: #008080;\">  6</span> <span style=\"color: #008000;\"> * allocated with input_allocate_device() and all it's capabilities\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #008000;\"> * set up before registering.\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #008000;\"> * If function fails the device must be freed with input_free_device().\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #008000;\"> * Once device has been successfully registered it can be unregistered\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #008000;\"> * with input_unregister_device(); input_free_device() should not be\n</span><span style=\"color: #008080;\"> 11</span> <span style=\"color: #008000;\"> * called in this case.\n</span><span style=\"color: #008080;\"> 12</span> <span style=\"color: #008000;\"> *\n</span><span style=\"color: #008080;\"> 13</span> <span style=\"color: #008000;\"> * Note that this function is also used to register managed input devices\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #008000;\"> * (ones allocated with devm_input_allocate_device()). Such managed input\n</span><span style=\"color: #008080;\"> 15</span> <span style=\"color: #008000;\"> * devices need not be explicitly unregistered or freed, their tear down\n</span><span style=\"color: #008080;\"> 16</span> <span style=\"color: #008000;\"> * is controlled by the devres infrastructure. It is also worth noting\n</span><span style=\"color: #008080;\"> 17</span> <span style=\"color: #008000;\"> * that tear down of managed input devices is internally a 2-step process:\n</span><span style=\"color: #008080;\"> 18</span> <span style=\"color: #008000;\"> * registered managed input device is first unregistered, but stays in\n</span><span style=\"color: #008080;\"> 19</span> <span style=\"color: #008000;\"> * memory and can still handle input_event() calls (although events will\n</span><span style=\"color: #008080;\"> 20</span> <span style=\"color: #008000;\"> * not be delivered anywhere). The freeing of managed input device will\n</span><span style=\"color: #008080;\"> 21</span> <span style=\"color: #008000;\"> * happen later, when devres stack is unwound to the point where device\n</span><span style=\"color: #008080;\"> 22</span> <span style=\"color: #008000;\"> * allocation was made.\n</span><span style=\"color: #008080;\"> 23</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 24</span> <span style=\"color: #0000ff;\">int</span> input_register_device(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev)\n</span><span style=\"color: #008080;\"> 25</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 26</span>     <span style=\"color: #0000ff;\">struct</span> input_devres *devres =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\"> 27</span>      <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 输入事件的处理接口指针，用于和设备的事件类型进行匹配 </span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\"> 28</span>     <span style=\"color: #0000ff;\">struct</span> input_handler *<span style=\"color: #000000;\">handler;\n</span><span style=\"color: #008080;\"> 29</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> packet_size;\n</span><span style=\"color: #008080;\"> 30</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">path;\n</span><span style=\"color: #008080;\"> 31</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\"> 32</span> \n<span style=\"color: #008080;\"> 33</span>     <span style=\"color: #0000ff;\">if</span> (dev-&gt;<span style=\"color: #000000;\">devres_managed) {\n</span><span style=\"color: #008080;\"> 34</span>         devres =<span style=\"color: #000000;\"> devres_alloc(devm_input_device_unregister,\n</span><span style=\"color: #008080;\"> 35</span>                       <span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> input_devres), GFP_KERNEL);\n</span><span style=\"color: #008080;\"> 36</span>         <span style=\"color: #0000ff;\">if</span> (!<span style=\"color: #000000;\">devres)\n</span><span style=\"color: #008080;\"> 37</span>             <span style=\"color: #0000ff;\">return</span> -<span style=\"color: #000000;\">ENOMEM;\n</span><span style=\"color: #008080;\"> 38</span> \n<span style=\"color: #008080;\"> 39</span>         devres-&gt;input =<span style=\"color: #000000;\"> dev;\n</span><span style=\"color: #008080;\"> 40</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 41</span> \n<span style=\"color: #008080;\"> 42</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Every input device generates EV_SYN/SYN_REPORT events. </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 43</span>     __set_bit(EV_SYN, dev-&gt;<span style=\"color: #000000;\">evbit);\n</span><span style=\"color: #008080;\"> 44</span> \n<span style=\"color: #008080;\"> 45</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> KEY_RESERVED is not supposed to be transmitted to userspace. </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 46</span>     __clear_bit(KEY_RESERVED, dev-&gt;<span style=\"color: #000000;\">keybit);\n</span><span style=\"color: #008080;\"> 47</span> \n<span style=\"color: #008080;\"> 48</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Make sure that bitmasks not mentioned in dev-&gt;evbit are clean. </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 49</span> <span style=\"color: #000000;\">    input_cleanse_bitmasks(dev);\n</span><span style=\"color: #008080;\"> 50</span> \n<span style=\"color: #008080;\"> 51</span>     packet_size =<span style=\"color: #000000;\"> input_estimate_events_per_packet(dev);\n</span><span style=\"color: #008080;\"> 52</span>     <span style=\"color: #0000ff;\">if</span> (dev-&gt;hint_events_per_packet &lt;<span style=\"color: #000000;\"> packet_size)\n</span><span style=\"color: #008080;\"> 53</span>         dev-&gt;hint_events_per_packet =<span style=\"color: #000000;\"> packet_size;\n</span><span style=\"color: #008080;\"> 54</span> \n<span style=\"color: #008080;\"> 55</span>     dev-&gt;max_vals = dev-&gt;hint_events_per_packet + <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 56</span>     dev-&gt;vals = kcalloc(dev-&gt;max_vals, <span style=\"color: #0000ff;\">sizeof</span>(*dev-&gt;<span style=\"color: #000000;\">vals), GFP_KERNEL);\n</span><span style=\"color: #008080;\"> 57</span>     <span style=\"color: #0000ff;\">if</span> (!dev-&gt;<span style=\"color: #000000;\">vals) {\n</span><span style=\"color: #008080;\"> 58</span>         error = -<span style=\"color: #000000;\">ENOMEM;\n</span><span style=\"color: #008080;\"> 59</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_devres_free;\n</span><span style=\"color: #008080;\"> 60</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 61</span> \n<span style=\"color: #008080;\"> 62</span>     <span style=\"color: #008000;\">/*</span>\n<span style=\"color: #008080;\"> 63</span> <span style=\"color: #008000;\">     * If delay and period are pre-set by the driver, then autorepeating\n</span><span style=\"color: #008080;\"> 64</span> <span style=\"color: #008000;\">     * is handled by the driver itself and we don't do it in input.c.\n</span><span style=\"color: #008080;\"> 65</span>      <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 66</span>     <span style=\"color: #0000ff;\">if</span> (!dev-&gt;rep[REP_DELAY] &amp;&amp; !dev-&gt;<span style=\"color: #000000;\">rep[REP_PERIOD]) {\n</span><span style=\"color: #008080;\"> 67</span>         dev-&gt;timer.data = (<span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\">) dev;\n</span><span style=\"color: #008080;\"> 68</span>         dev-&gt;timer.function =<span style=\"color: #000000;\"> input_repeat_key;\n</span><span style=\"color: #008080;\"> 69</span>         dev-&gt;rep[REP_DELAY] = <span style=\"color: #800080;\">250</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 70</span>         dev-&gt;rep[REP_PERIOD] = <span style=\"color: #800080;\">33</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 71</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 72</span> \n<span style=\"color: #008080;\"> 73</span>     <span style=\"color: #0000ff;\">if</span> (!dev-&gt;<span style=\"color: #000000;\">getkeycode)\n</span><span style=\"color: #008080;\"> 74</span>         dev-&gt;getkeycode =<span style=\"color: #000000;\"> input_default_getkeycode;\n</span><span style=\"color: #008080;\"> 75</span> \n<span style=\"color: #008080;\"> 76</span>     <span style=\"color: #0000ff;\">if</span> (!dev-&gt;<span style=\"color: #000000;\">setkeycode)\n</span><span style=\"color: #008080;\"> 77</span>         dev-&gt;setkeycode =<span style=\"color: #000000;\"> input_default_setkeycode;\n</span><span style=\"color: #008080;\"> 78</span> \n<span style=\"color: #008080;\"> 79</span>     error = device_add(&amp;dev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\"> 80</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\"> 81</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_free_vals;\n</span><span style=\"color: #008080;\"> 82</span> \n<span style=\"color: #008080;\"> 83</span>     path = kobject_get_path(&amp;dev-&gt;<span style=\"color: #000000;\">dev.kobj, GFP_KERNEL);\n</span><span style=\"color: #008080;\"> 84</span>     pr_info(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%s as %s\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\"> 85</span>         dev-&gt;name ? dev-&gt;name : <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Unspecified device</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\"> 86</span>         path ? path : <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">N/A</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 87</span> <span style=\"color: #000000;\">    kfree(path);\n</span><span style=\"color: #008080;\"> 88</span> \n<span style=\"color: #008080;\"> 89</span>     error = mutex_lock_interruptible(&amp;<span style=\"color: #000000;\">input_mutex);\n</span><span style=\"color: #008080;\"> 90</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\"> 91</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_device_del;\n</span><span style=\"color: #008080;\"> 92</span>     \n<span style=\"color: #008080;\"> 93</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 重要:把设备挂到全局的input子系统设备链表input_dev_list上 </span><span style=\"color: #008000;\">*/</span>    \n<span style=\"color: #008080;\"> 94</span>     list_add_tail(&amp;dev-&gt;node, &amp;<span style=\"color: #000000;\">input_dev_list);\n</span><span style=\"color: #008080;\"> 95</span> \n<span style=\"color: #008080;\"> 96</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 核心重点，input设备在增加到input_dev_list链表上之后，会查找 \n</span><span style=\"color: #008080;\"> 97</span> <span style=\"color: #008000;\">     * input_handler_list事件处理链表上的handler进行匹配，这里的匹配 \n</span><span style=\"color: #008080;\"> 98</span> <span style=\"color: #008000;\">     * 方式与设备模型的device和driver匹配过程很相似</span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\"> 99</span>     list_for_each_entry(handler, &amp;<span style=\"color: #000000;\">input_handler_list, node)\n</span><span style=\"color: #008080;\">100</span>         input_attach_handler(dev, handler);<span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">遍历input_handler_list，通过input_match_device试图与每一个handler进行匹配 匹配上了就使用connect连接</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">101</span>     <span style=\"color: #008000;\">/*</span>\n<span style=\"color: #008080;\">102</span> <span style=\"color: #008000;\">    static int input_attach_handler(struct input_dev *dev, struct input_handler *handler)\n</span><span style=\"color: #008080;\">103</span> <span style=\"color: #008000;\">    {\n</span><span style=\"color: #008080;\">104</span> <span style=\"color: #008000;\">        const struct input_device_id *id;\n</span><span style=\"color: #008080;\">105</span> <span style=\"color: #008000;\">        int error;\n</span><span style=\"color: #008080;\">106</span> \n<span style=\"color: #008080;\">107</span> <span style=\"color: #008000;\">        id = input_match_device(handler, dev);\n</span><span style=\"color: #008080;\">108</span> <span style=\"color: #008000;\">        if (!id)\n</span><span style=\"color: #008080;\">109</span> <span style=\"color: #008000;\">            return -ENODEV;\n</span><span style=\"color: #008080;\">110</span> \n<span style=\"color: #008080;\">111</span> <span style=\"color: #008000;\">        error = handler-&gt;connect(handler, dev, id);\n</span><span style=\"color: #008080;\">112</span> <span style=\"color: #008000;\">        if (error &amp;&amp; error != -ENODEV)\n</span><span style=\"color: #008080;\">113</span> <span style=\"color: #008000;\">            pr_err(\"failed to attach handler %s to device %s, error: %d\\n\",\n</span><span style=\"color: #008080;\">114</span> <span style=\"color: #008000;\">                   handler-&gt;name, kobject_name(&amp;dev-&gt;dev.kobj), error);\n</span><span style=\"color: #008080;\">115</span> \n<span style=\"color: #008080;\">116</span> <span style=\"color: #008000;\">        return error;\n</span><span style=\"color: #008080;\">117</span> <span style=\"color: #008000;\">    }\n</span><span style=\"color: #008080;\">118</span>     <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">119</span>     \n<span style=\"color: #008080;\">120</span> <span style=\"color: #000000;\">    input_wakeup_procfs_readers();\n</span><span style=\"color: #008080;\">121</span> \n<span style=\"color: #008080;\">122</span>     mutex_unlock(&amp;<span style=\"color: #000000;\">input_mutex);\n</span><span style=\"color: #008080;\">123</span> \n<span style=\"color: #008080;\">124</span>     <span style=\"color: #0000ff;\">if</span> (dev-&gt;<span style=\"color: #000000;\">devres_managed) {\n</span><span style=\"color: #008080;\">125</span>         dev_dbg(dev-&gt;dev.parent, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%s: registering %s with devres.\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\">126</span>             __func__, dev_name(&amp;dev-&gt;<span style=\"color: #000000;\">dev));\n</span><span style=\"color: #008080;\">127</span>         devres_add(dev-&gt;<span style=\"color: #000000;\">dev.parent, devres);\n</span><span style=\"color: #008080;\">128</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">129</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">130</span> \n<span style=\"color: #008080;\">131</span> <span style=\"color: #000000;\">err_device_del:\n</span><span style=\"color: #008080;\">132</span>     device_del(&amp;dev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">133</span> <span style=\"color: #000000;\">err_free_vals:\n</span><span style=\"color: #008080;\">134</span>     kfree(dev-&gt;<span style=\"color: #000000;\">vals);\n</span><span style=\"color: #008080;\">135</span>     dev-&gt;vals =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">136</span> <span style=\"color: #000000;\">err_devres_free:\n</span><span style=\"color: #008080;\">137</span> <span style=\"color: #000000;\">    devres_free(devres);\n</span><span style=\"color: #008080;\">138</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">139</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">140</span> EXPORT_SYMBOL(input_register_device);</pre>\n</div>\n<h2>3.2注册handler</h2>\n<p>一般handler不需要我们自己写 内核里面已经有了很多的hanlder基本够用</p>\n下面以Evdev为例，来分析事件处理层。<br />\nvim drivers/input/evdev.c</div>\n<div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">struct</span> input_device_id evdev_ids[] =<span style=\"color: #000000;\"> {\n</span><span style=\"color: #008080;\"> 2</span>     { .driver_info = <span style=\"color: #800080;\">1</span> },    <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Matches all devices </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 3</span>     { },            <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Terminating zero entry </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 4</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 5</span> \n<span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">MODULE_DEVICE_TABLE(input, evdev_ids);\n</span><span style=\"color: #008080;\"> 7</span> \n<span style=\"color: #008080;\"> 8</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">struct</span> input_handler evdev_handler =<span style=\"color: #000000;\"> {\n</span><span style=\"color: #008080;\"> 9</span>     .<span style=\"color: #0000ff;\">event</span>        =<span style=\"color: #000000;\"> evdev_event,\n</span><span style=\"color: #008080;\">10</span>     .events        =<span style=\"color: #000000;\"> evdev_events,\n</span><span style=\"color: #008080;\">11</span>     .connect    =<span style=\"color: #000000;\"> evdev_connect,\n</span><span style=\"color: #008080;\">12</span>     .disconnect    =<span style=\"color: #000000;\"> evdev_disconnect,\n</span><span style=\"color: #008080;\">13</span>     .legacy_minors    = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\">14</span>     .minor        =<span style=\"color: #000000;\"> EVDEV_MINOR_BASE,\n</span><span style=\"color: #008080;\">15</span>     .name        = <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">evdev</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\">16</span>     .id_table    =<span style=\"color: #000000;\"> evdev_ids,\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">18</span> \n<span style=\"color: #008080;\">19</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">int</span> __init evdev_init(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">21</span>     <span style=\"color: #0000ff;\">return</span> input_register_handler(&amp;<span style=\"color: #000000;\">evdev_handler);\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">23</span> \n<span style=\"color: #008080;\">24</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span> __exit evdev_exit(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">26</span>     input_unregister_handler(&amp;<span style=\"color: #000000;\">evdev_handler);\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">28</span> \n<span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">module_init(evdev_init);\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">module_exit(evdev_exit);\n</span><span style=\"color: #008080;\">31</span> \n<span style=\"color: #008080;\">32</span> MODULE_AUTHOR(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Vojtech Pavlik &lt;vojtech@ucw.cz&gt;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">33</span> MODULE_DESCRIPTION(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Input driver event char devices</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">34</span> MODULE_LICENSE(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">GPL</span><span style=\"color: #800000;\">\"</span>);</pre>\n</div>\n<p>注册的handler可以在proc/bus/input/danlder中查看到</p>\n</div>\n<p><img src=\"Linux-input子系统/2909691-20220819102740731-2036281828.png\" alt=\"\" /></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * input_register_handler - register a new input handler\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * @handler: handler to be registered\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> * This function registers a new input handler (interface) for input\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> * devices in the system and attaches it to all input devices that\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * are compatible with the handler.\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">int</span> input_register_handler(<span style=\"color: #0000ff;\">struct</span> input_handler *<span style=\"color: #000000;\">handler)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">11</span>     <span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev;\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">13</span> \n<span style=\"color: #008080;\">14</span>     error = mutex_lock_interruptible(&amp;<span style=\"color: #000000;\">input_mutex);\n</span><span style=\"color: #008080;\">15</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">17</span> \n<span style=\"color: #008080;\">18</span>     INIT_LIST_HEAD(&amp;handler-&gt;<span style=\"color: #000000;\">h_list);\n</span><span style=\"color: #008080;\">19</span> 　　<code class=\"  language-rust\"><span class=\"token comment\">/* `重要`:把设备处理器挂到全局的input子系统设备链表input_handler_list上 */ </span></code>\n<span style=\"color: #008080;\">20</span>     list_add_tail(&amp;handler-&gt;node, &amp;<span style=\"color: #000000;\">input_handler_list);\n</span><span style=\"color: #008080;\">21</span> 　　<code class=\"  language-rust\"><span class=\"token comment\">/*遍历input_dev_list，试图与每一个input_dev进行匹配*/</span></code>\n<span style=\"color: #008080;\">22</span>     list_for_each_entry(dev, &amp;<span style=\"color: #000000;\">input_dev_list, node)\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">        input_attach_handler(dev, handler);<br />　　　　/*<br /></span><code class=\"  language-objectivec\"><span class=\"token keyword\">static <span class=\"token keyword\">int <span class=\"token function\">input_attach_handler<span class=\"token punctuation\">(<span class=\"token keyword\">struct input_dev <span class=\"token operator\">*dev<span class=\"token punctuation\">, <span class=\"token keyword\">struct input_handler <span class=\"token operator\">*handler<span class=\"token punctuation\">)\n<span class=\"token punctuation\">{\n    <span class=\"token keyword\">const <span class=\"token keyword\">struct input_device_id <span class=\"token operator\">*id<span class=\"token punctuation\">;\n    <span class=\"token keyword\">int error<span class=\"token punctuation\">;\n\n    <span class=\"token comment\">/* 利用handler-&gt;id_table和dev进行匹配*/\n    id <span class=\"token operator\">= <span class=\"token function\">input_match_device<span class=\"token punctuation\">(handler<span class=\"token punctuation\">, dev<span class=\"token punctuation\">)<span class=\"token punctuation\">;\n    <span class=\"token keyword\">if <span class=\"token punctuation\">(<span class=\"token operator\">!id<span class=\"token punctuation\">)\n        <span class=\"token keyword\">return <span class=\"token operator\">-ENODEV<span class=\"token punctuation\">;\n      <span class=\"token comment\">/*匹配成功，则调用handler-&gt;connect函数进行连接*/\n    error <span class=\"token operator\">= handler<span class=\"token operator\">-&gt;<span class=\"token function\">connect<span class=\"token punctuation\">(handler<span class=\"token punctuation\">, dev<span class=\"token punctuation\">, id<span class=\"token punctuation\">)<span class=\"token punctuation\">;\n    <span class=\"token keyword\">if <span class=\"token punctuation\">(error <span class=\"token operator\">&amp;&amp; error <span class=\"token operator\">!= <span class=\"token operator\">-ENODEV<span class=\"token punctuation\">)\n        <span class=\"token function\">pr_err<span class=\"token punctuation\">(<span class=\"token string\">\"failed to attach handler %s to device %s, error: %d\\n\"<span class=\"token punctuation\">,\n               handler<span class=\"token operator\">-&gt;name<span class=\"token punctuation\">, <span class=\"token function\">kobject_name<span class=\"token punctuation\">(<span class=\"token operator\">&amp;dev<span class=\"token operator\">-&gt;dev<span class=\"token punctuation\">.kobj<span class=\"token punctuation\">)<span class=\"token punctuation\">, error<span class=\"token punctuation\">)<span class=\"token punctuation\">;\n\n    <span class=\"token keyword\">return error<span class=\"token punctuation\">;\n<span class=\"token punctuation\">}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code><span style=\"color: #000000;\"><br />　　　　　　*/\n</span><span style=\"color: #008080;\">24</span> \n<span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    input_wakeup_procfs_readers();\n</span><span style=\"color: #008080;\">26</span> \n<span style=\"color: #008080;\">27</span>     mutex_unlock(&amp;<span style=\"color: #000000;\">input_mutex);\n</span><span style=\"color: #008080;\">28</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">30</span> EXPORT_SYMBOL(input_register_handler);</pre>\n</div>\n<p>这个过程和注册dev及其相似</p>\n<h2>3.3 handler的connect函数</h2>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">int</span> evdev_connect(<span style=\"color: #0000ff;\">struct</span> input_handler *handler, <span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev,\n</span><span style=\"color: #008080;\"> 2</span>              <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">struct</span> input_device_id *<span style=\"color: #000000;\">id)\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">struct</span> evdev *<span style=\"color: #000000;\">evdev;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> minor;\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> dev_no;\n</span><span style=\"color: #008080;\"> 7</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\"> 8</span>     \n<span style=\"color: #008080;\"> 9</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">申请一个新的次设备号</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span>     minor = input_get_new_minor(EVDEV_MINOR_BASE, EVDEV_MINORS, <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">11</span> \n<span style=\"color: #008080;\">12</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 这说明内核已经没办法再分配这种类型的设备了 </span><span style=\"color: #008000;\">*/</span> \n<span style=\"color: #008080;\">13</span>     <span style=\"color: #0000ff;\">if</span> (minor &lt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">) {\n</span><span style=\"color: #008080;\">14</span>         error =<span style=\"color: #000000;\"> minor;\n</span><span style=\"color: #008080;\">15</span>         pr_err(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">failed to reserve new minor: %d\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, error);\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">18</span> \n<span style=\"color: #008080;\">19</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 开始给evdev事件层驱动分配空间了 </span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\">20</span>     evdev = kzalloc(<span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> evdev), GFP_KERNEL);\n</span><span style=\"color: #008080;\">21</span>     <span style=\"color: #0000ff;\">if</span> (!<span style=\"color: #000000;\">evdev) {\n</span><span style=\"color: #008080;\">22</span>         error = -<span style=\"color: #000000;\">ENOMEM;\n</span><span style=\"color: #008080;\">23</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_free_minor;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">25</span> \n<span style=\"color: #008080;\">26</span>         <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 初始化client_list列表和evdev_wait队列 </span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\">27</span>     INIT_LIST_HEAD(&amp;evdev-&gt;<span style=\"color: #000000;\">client_list);\n</span><span style=\"color: #008080;\">28</span>     spin_lock_init(&amp;evdev-&gt;<span style=\"color: #000000;\">client_lock);\n</span><span style=\"color: #008080;\">29</span>     mutex_init(&amp;evdev-&gt;<span style=\"color: #000000;\">mutex);\n</span><span style=\"color: #008080;\">30</span>     init_waitqueue_head(&amp;evdev-&gt;<span style=\"color: #000000;\">wait);\n</span><span style=\"color: #008080;\">31</span>     evdev-&gt;exist = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">32</span> \n<span style=\"color: #008080;\">33</span>     dev_no =<span style=\"color: #000000;\"> minor;\n</span><span style=\"color: #008080;\">34</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Normalize device number if it falls into legacy range </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">35</span>     <span style=\"color: #0000ff;\">if</span> (dev_no &lt; EVDEV_MINOR_BASE +<span style=\"color: #000000;\"> EVDEV_MINORS)\n</span><span style=\"color: #008080;\">36</span>         dev_no -=<span style=\"color: #000000;\"> EVDEV_MINOR_BASE;\n</span><span style=\"color: #008080;\">37</span>     \n<span style=\"color: #008080;\">38</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">设置设备节点名称，/dev/eventX 就是在此时设置</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">39</span>     dev_set_name(&amp;evdev-&gt;dev, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">event%d</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, dev_no);\n</span><span style=\"color: #008080;\">40</span> \n<span style=\"color: #008080;\">41</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 初始化evdev结构体，其中handle为输入设备和事件处理的关联接口 </span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\">42</span>     evdev-&gt;handle.dev =<span style=\"color: #000000;\"> input_get_device(dev);\n</span><span style=\"color: #008080;\">43</span>     evdev-&gt;handle.name = dev_name(&amp;evdev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">44</span>     evdev-&gt;handle.handler =<span style=\"color: #000000;\"> handler;\n</span><span style=\"color: #008080;\">45</span>     evdev-&gt;handle.<span style=\"color: #0000ff;\">private</span> =<span style=\"color: #000000;\"> evdev;\n</span><span style=\"color: #008080;\">46</span> \n<span style=\"color: #008080;\">47</span>       <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">设置设备号，应用层就是通过设备号，找到该设备的</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">48</span>     evdev-&gt;dev.devt =<span style=\"color: #000000;\"> MKDEV(INPUT_MAJOR, minor);\n</span><span style=\"color: #008080;\">49</span>     evdev-&gt;dev.<span style=\"color: #0000ff;\">class</span> = &amp;<span style=\"color: #000000;\">input_class;\n</span><span style=\"color: #008080;\">50</span>     evdev-&gt;dev.parent = &amp;dev-&gt;<span style=\"color: #000000;\">dev;\n</span><span style=\"color: #008080;\">51</span>     evdev-&gt;dev.release =<span style=\"color: #000000;\"> evdev_free;\n</span><span style=\"color: #008080;\">52</span>     device_initialize(&amp;evdev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">53</span> \n<span style=\"color: #008080;\">54</span>      <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> input_dev设备驱动和handler事件处理层的关联，就在这时由handle完成 </span><span style=\"color: #008000;\">*/</span> \n<span style=\"color: #008080;\">55</span>     error = input_register_handle(&amp;evdev-&gt;<span style=\"color: #000000;\">handle);\n</span><span style=\"color: #008080;\">56</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\">57</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_free_evdev;\n</span><span style=\"color: #008080;\">58</span> \n<span style=\"color: #008080;\">59</span>     cdev_init(&amp;evdev-&gt;cdev, &amp;<span style=\"color: #000000;\">evdev_fops);\n</span><span style=\"color: #008080;\">60</span>     evdev-&gt;cdev.kobj.parent = &amp;evdev-&gt;<span style=\"color: #000000;\">dev.kobj;\n</span><span style=\"color: #008080;\">61</span>     error = cdev_add(&amp;evdev-&gt;cdev, evdev-&gt;dev.devt, <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">62</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\">63</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_unregister_handle;\n</span><span style=\"color: #008080;\">64</span> \n<span style=\"color: #008080;\">65</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">将设备加入到Linux设备模型，它的内部将找到它的bus，然后让它的bus\n</span><span style=\"color: #008080;\">66</span> <span style=\"color: #008000;\">    给它找到它的driver，在驱动或者总线的probe函数中，一般会在/dev/目录\n</span><span style=\"color: #008080;\">67</span> <span style=\"color: #008000;\">    先创建相应的设备节点，这样应用程序就可以通过该设备节点来使用设备了\n</span><span style=\"color: #008080;\">68</span> <span style=\"color: #008000;\">    ，/dev/eventX 设备节点就是在此时生成\n</span><span style=\"color: #008080;\">69</span>     <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">70</span>     error = device_add(&amp;evdev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">71</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\">72</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_cleanup_evdev;\n</span><span style=\"color: #008080;\">73</span> \n<span style=\"color: #008080;\">74</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">75</span> \n<span style=\"color: #008080;\">76</span> <span style=\"color: #000000;\"> err_cleanup_evdev:\n</span><span style=\"color: #008080;\">77</span> <span style=\"color: #000000;\">    evdev_cleanup(evdev);\n</span><span style=\"color: #008080;\">78</span> <span style=\"color: #000000;\"> err_unregister_handle:\n</span><span style=\"color: #008080;\">79</span>     input_unregister_handle(&amp;evdev-&gt;<span style=\"color: #000000;\">handle);\n</span><span style=\"color: #008080;\">80</span> <span style=\"color: #000000;\"> err_free_evdev:\n</span><span style=\"color: #008080;\">81</span>     put_device(&amp;evdev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">82</span> <span style=\"color: #000000;\"> err_free_minor:\n</span><span style=\"color: #008080;\">83</span> <span style=\"color: #000000;\">    input_free_minor(minor);\n</span><span style=\"color: #008080;\">84</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">85</span> }</pre>\n</div>\n<p>over</p>\n<h1>4.应用层的角度分析到底层</h1>\n<p>evdev_read（）---------------------------》wait_event_interruptible(evdev-&gt;wait,client-&gt;packet_head != client-&gt;tail || !evdev-&gt;exist || client-&gt;revoked);等待evdev-&gt;wait唤醒</p>\n<p>　　evdev_pass_values-----------------------》wake_up_interruptible(&amp;evdev-&gt;wait);</p>\n<p>　　　　evdev_events---------------------------》evdev_pass_values(client, vals, count, ev_time);<br />　　　　　　evdev_event----------------------------》evdev_events(handle, vals, 1);</p>\n<p>　　　　　　　　static struct input_handler evdev_handler = {<br />&nbsp;&nbsp; 　　　　　　　　&nbsp;.event&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;= evdev_event,<br />&nbsp;&nbsp; &nbsp;　　　　　　　　.events&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;= evdev_events,<br />&nbsp;&nbsp; 　　　　　　　　&nbsp;.connect&nbsp;&nbsp; &nbsp;= evdev_connect,<br />&nbsp;&nbsp; &nbsp;　　　　　　　　.disconnect&nbsp;&nbsp; &nbsp;= evdev_disconnect,<br />&nbsp;&nbsp; 　　　　　　　　&nbsp;.legacy_minors&nbsp;&nbsp; &nbsp;= true,<br />&nbsp;&nbsp; &nbsp;　　　　　　　　.minor&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;= EVDEV_MINOR_BASE,<br />&nbsp;&nbsp; &nbsp;　　　　　　　　.name&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;= \"evdev\",<br />&nbsp;&nbsp; &nbsp;　　　　　　　　.id_table&nbsp;&nbsp; &nbsp;= evdev_ids,<br />　　　　　　　　};</p>\n<p>　　　　　　　　input_to_handler-----------------------------》　　 if (handler-&gt;events)<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　handler-&gt;events(handle, vals, count);<br />&nbsp;&nbsp; &nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　else if (handler-&gt;event)<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　for (v = vals; v != vals + count; v++)<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　&nbsp;handler-&gt;event(handle, v-&gt;type, v-&gt;code, v-&gt;value);</p>\n<p>　　　　　　input_pass_values--------------------------------》count = input_to_handler(handle, vals, count);</p>\n<p>　　input_handle_event----------------------------》input_pass_values(dev, dev-&gt;vals, dev-&gt;num_vals);</p>\n</div>\n<p>input_event----------------------------------------》input_handle_event(dev, type, code, value);</p>\n<p>显然，就是input_dev通过输入核心为驱动层提供统一的接口，<code>input_event</code>，来向事件处理层上报数据并唤醒。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n</div>\n</div>\n","slug":"Linux input子系统","published":1,"updated":"2023-04-02T15:13:55.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzm4lbw0017zkvqk8a5gldv","content":"<div>\n<div>\n<ul>\n<li>\n<blockquote>\n<h5>Input driver ：主要实现对硬件设备的读写访问，中断设置，并把硬件产生的事件转换为核心层定义的规范提交给事件处理层。</h5>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<h5>Input core ：承上启下。为设备驱动层提供了规范和接口；通知事件处理层对事件进行处理；</h5>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<h5>Event handler ：提供用户编程的接口（设备节点），并处理驱动层提交的数据处理。</h5>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/.com//2909691-20220819093409715-1604400596.png\" alt></p>\n<h1>1输入子系统框架分析</h1>\n<div>\n<div>\n<h2>1.1设备驱动层（Input driver）</h2>\n<ul>\n<li>device是纯硬件操作层，包含不同的硬件接口处理，如gpio等</li>\n<li>对于每种不同的具体硬件操作，都对应着不同的input_dev结构体</li>\n<li>该结构体内部也包含着一个h_list，指向handle</li>\n</ul>\n</div>\n</div>\n<div>\n<div>\n<div>\n<div>\n<h2>1.2.系统核心层（Input core）</h2>\n<ul>\n<li>申请主设备号;</li>\n<li>提供input_register_device跟input_register_handler函数分别用于注册device跟handler;</li>\n<li>提供input_register_handle函数用于注册一个事件处理，代表一个成功配对的input_dev和input_handler;</li>\n</ul>\n</div>\n</div>\n<h2>1.3.事件处理层（Event handler）</h2>\n<ul>\n<li>不涉及硬件方面的具体操作，handler层是纯软件层，包含不同的解决方案，如键盘，鼠标，游戏手柄等；</li>\n<li>对于不同的解决方案，都包含一个名为input_handler的结构体，该结构体内含的主要成员如下：</li>\n</ul>\n<table>\n<thead>\n<tr><th>成员</th><th>功能</th></tr>\n</thead>\n<tbody>\n<tr>\n<td>.id_table</td>\n<td>一个存放该handler所支持的设备id的表（其实内部存放的是EV_xxx事件,用于判断device是否支持该事件）</td>\n</tr>\n<tr>\n<td>.fops</td>\n<td>该handler的file_operation</td>\n</tr>\n<tr>\n<td>.connect</td>\n<td>连接该handler跟所支持device的函数</td>\n</tr>\n<tr>\n<td>.disconnect</td>\n<td>断开该连接</td>\n</tr>\n<tr>\n<td>.event</td>\n<td>事件处理函数，让device调用</td>\n</tr>\n<tr>\n<td>h_list</td>\n<td>是一个链表，该链表保存着该handler到所支持的所有device的中间站：handle结构体的指针</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1>2.两条链表连接dev和handler</h1>\n<div class=\"cnblogs_code\">\n<pre>#file pwd: drivers/input/input.c<br><br>MODULE_AUTHOR(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Vojtech Pavlik &lt;vojtech@suse.cz&gt;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\nMODULE_DESCRIPTION(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Input core</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\nMODULE_LICENSE(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">GPL</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n<p></p></span><span style=\"color: #0000ff;\">#define</span> INPUT_MAX_CHAR_DEVICES        1024<br><span style=\"color: #0000ff;\">#define</span> INPUT_FIRST_DYNAMIC_DEV        256<br><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> DEFINE_IDA(input_ida);<p></p>\n<p></p></span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> LIST_HEAD(input_dev_list);<br></span><span style=\"color: #0000ff;\">static</span> LIST_HEAD(input_handler_list);</pre><p></p>\n</div>\n在input.c文件中两个全局链表input_handler_list和<span style=\"color: #000000;\">input_dev_list</span>，通过handle相互关联：</div>\n<div><img src=\"/.com//2909691-20220819094250974-180404869.webp\" alt>\n<p>&nbsp;</p>\n<h1>3.输入子系统代码分析</h1>\n<p>文件路径：driver/input/input.c （核心层）</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">int</span> __init input_init(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> err;\n</span><span style=\"color: #008080;\"> 4</span> \n<span style=\"color: #008080;\"> 5</span>     err = class_register(&amp;<span style=\"color: #000000;\">input_class);  <code class=\"  language-cpp\"><span class=\"token comment\">//在/sys/class下创建逻辑（input）类，在类下面挂载input设备</span></code>\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (err) {\n</span><span style=\"color: #008080;\"> 7</span>         pr_err(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">unable to register input_dev class\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> err;\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">10</span> \n<span style=\"color: #008080;\">11</span>     err =<span style=\"color: #000000;\"> input_proc_init();　　<code class=\"  language-cpp\"><span class=\"token punctuation\"><span class=\"token comment\">//在/proc下面建立相关的虚拟文件，proc下创建的文件可以看作是虚拟文件对内核读写的一种操作</span></span></code>\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (err)\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> fail1;\n</span><span style=\"color: #008080;\">14</span> \n<span style=\"color: #008080;\">15</span>     err = register_chrdev_region(MKDEV(INPUT_MAJOR, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">),//在/dev下创建input设备号\n</span><span style=\"color: #008080;\">16</span>                      INPUT_MAX_CHAR_DEVICES, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">input</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">17</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (err) {\n</span><span style=\"color: #008080;\">18</span>         pr_err(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">unable to register char major %d</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, INPUT_MAJOR);\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> fail2;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">21</span> \n<span style=\"color: #008080;\">22</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span> \n<span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\"> fail2:    input_proc_exit();\n</span><span style=\"color: #008080;\">25</span>  fail1:    class_unregister(&amp;<span style=\"color: #000000;\">input_class);\n</span><span style=\"color: #008080;\">26</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> err;\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">28</span> \n<span style=\"color: #008080;\">29</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span> __exit input_exit(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">    input_proc_exit();\n</span><span style=\"color: #008080;\">32</span>     unregister_chrdev_region(MKDEV(INPUT_MAJOR, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">),\n</span><span style=\"color: #008080;\">33</span> <span style=\"color: #000000;\">                 INPUT_MAX_CHAR_DEVICES);\n</span><span style=\"color: #008080;\">34</span>     class_unregister(&amp;<span style=\"color: #000000;\">input_class);\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">36</span> \n<span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">subsys_initcall(input_init);\n</span><span style=\"color: #008080;\">38</span> module_exit(input_exit);</pre>\n</div>\n<p>现在基本框架已经建成，如何往input系统里面注册dev和hanlder呢？</p>\n<h2>3.1注册dev</h2>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\">  2</span> <span style=\"color: #008000;\"> * struct input_dev - represents an input device\n</span><span style=\"color: #008080;\">  3</span> <span style=\"color: #008000;\"> * @name: name of the device\n</span><span style=\"color: #008080;\">  4</span> <span style=\"color: #008000;\"> * @phys: physical path to the device in the system hierarchy\n</span><span style=\"color: #008080;\">  5</span> <span style=\"color: #008000;\"> * @uniq: unique identification code for the device (if device has it)\n</span><span style=\"color: #008080;\">  6</span> <span style=\"color: #008000;\"> * @id: id of the device (struct input_id)\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #008000;\"> * @propbit: bitmap of device properties and quirks\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #008000;\"> * @evbit: bitmap of types of events supported by the device (EV_KEY,\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #008000;\"> *    EV_REL, etc.)\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #008000;\"> * @keybit: bitmap of keys/buttons this device has\n</span><span style=\"color: #008080;\"> 11</span> <span style=\"color: #008000;\"> * @relbit: bitmap of relative axes for the device\n</span><span style=\"color: #008080;\"> 12</span> <span style=\"color: #008000;\"> * @absbit: bitmap of absolute axes for the device\n</span><span style=\"color: #008080;\"> 13</span> <span style=\"color: #008000;\"> * @mscbit: bitmap of miscellaneous events supported by the device\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #008000;\"> * @ledbit: bitmap of leds present on the device\n</span><span style=\"color: #008080;\"> 15</span> <span style=\"color: #008000;\"> * @sndbit: bitmap of sound effects supported by the device\n</span><span style=\"color: #008080;\"> 16</span> <span style=\"color: #008000;\"> * @ffbit: bitmap of force feedback effects supported by the device\n</span><span style=\"color: #008080;\"> 17</span> <span style=\"color: #008000;\"> * @swbit: bitmap of switches present on the device\n</span><span style=\"color: #008080;\"> 18</span> <span style=\"color: #008000;\"> * @hint_events_per_packet: average number of events generated by the\n</span><span style=\"color: #008080;\"> 19</span> <span style=\"color: #008000;\"> *    device in a packet (between EV_SYN/SYN_REPORT events). Used by\n</span><span style=\"color: #008080;\"> 20</span> <span style=\"color: #008000;\"> *    event handlers to estimate size of the buffer needed to hold\n</span><span style=\"color: #008080;\"> 21</span> <span style=\"color: #008000;\"> *    events.\n</span><span style=\"color: #008080;\"> 22</span> <span style=\"color: #008000;\"> * @keycodemax: size of keycode table\n</span><span style=\"color: #008080;\"> 23</span> <span style=\"color: #008000;\"> * @keycodesize: size of elements in keycode table\n</span><span style=\"color: #008080;\"> 24</span> <span style=\"color: #008000;\"> * @keycode: map of scancodes to keycodes for this device\n</span><span style=\"color: #008080;\"> 25</span> <span style=\"color: #008000;\"> * @getkeycode: optional legacy method to retrieve current keymap.\n</span><span style=\"color: #008080;\"> 26</span> <span style=\"color: #008000;\"> * @setkeycode: optional method to alter current keymap, used to implement\n</span><span style=\"color: #008080;\"> 27</span> <span style=\"color: #008000;\"> *    sparse keymaps. If not supplied default mechanism will be used.\n</span><span style=\"color: #008080;\"> 28</span> <span style=\"color: #008000;\"> *    The method is being called while holding event_lock and thus must\n</span><span style=\"color: #008080;\"> 29</span> <span style=\"color: #008000;\"> *    not sleep\n</span><span style=\"color: #008080;\"> 30</span> <span style=\"color: #008000;\"> * @ff: force feedback structure associated with the device if device\n</span><span style=\"color: #008080;\"> 31</span> <span style=\"color: #008000;\"> *    supports force feedback effects\n</span><span style=\"color: #008080;\"> 32</span> <span style=\"color: #008000;\"> * @repeat_key: stores key code of the last key pressed; used to implement\n</span><span style=\"color: #008080;\"> 33</span> <span style=\"color: #008000;\"> *    software autorepeat\n</span><span style=\"color: #008080;\"> 34</span> <span style=\"color: #008000;\"> * @timer: timer for software autorepeat\n</span><span style=\"color: #008080;\"> 35</span> <span style=\"color: #008000;\"> * @rep: current values for autorepeat parameters (delay, rate)\n</span><span style=\"color: #008080;\"> 36</span> <span style=\"color: #008000;\"> * @mt: pointer to multitouch state\n</span><span style=\"color: #008080;\"> 37</span> <span style=\"color: #008000;\"> * @absinfo: array of &amp;struct input_absinfo elements holding information\n</span><span style=\"color: #008080;\"> 38</span> <span style=\"color: #008000;\"> *    about absolute axes (current value, min, max, flat, fuzz,\n</span><span style=\"color: #008080;\"> 39</span> <span style=\"color: #008000;\"> *    resolution)\n</span><span style=\"color: #008080;\"> 40</span> <span style=\"color: #008000;\"> * @key: reflects current state of device's keys/buttons\n</span><span style=\"color: #008080;\"> 41</span> <span style=\"color: #008000;\"> * @led: reflects current state of device's LEDs\n</span><span style=\"color: #008080;\"> 42</span> <span style=\"color: #008000;\"> * @snd: reflects current state of sound effects\n</span><span style=\"color: #008080;\"> 43</span> <span style=\"color: #008000;\"> * @sw: reflects current state of device's switches\n</span><span style=\"color: #008080;\"> 44</span> <span style=\"color: #008000;\"> * @open: this method is called when the very first user calls\n</span><span style=\"color: #008080;\"> 45</span> <span style=\"color: #008000;\"> *    input_open_device(). The driver must prepare the device\n</span><span style=\"color: #008080;\"> 46</span> <span style=\"color: #008000;\"> *    to start generating events (start polling thread,\n</span><span style=\"color: #008080;\"> 47</span> <span style=\"color: #008000;\"> *    request an IRQ, submit URB, etc.)\n</span><span style=\"color: #008080;\"> 48</span> <span style=\"color: #008000;\"> * @close: this method is called when the very last user calls\n</span><span style=\"color: #008080;\"> 49</span> <span style=\"color: #008000;\"> *    input_close_device().\n</span><span style=\"color: #008080;\"> 50</span> <span style=\"color: #008000;\"> * @flush: purges the device. Most commonly used to get rid of force\n</span><span style=\"color: #008080;\"> 51</span> <span style=\"color: #008000;\"> *    feedback effects loaded into the device when disconnecting\n</span><span style=\"color: #008080;\"> 52</span> <span style=\"color: #008000;\"> *    from it\n</span><span style=\"color: #008080;\"> 53</span> <span style=\"color: #008000;\"> * @event: event handler for events sent _to_ the device, like EV_LED\n</span><span style=\"color: #008080;\"> 54</span> <span style=\"color: #008000;\"> *    or EV_SND. The device is expected to carry out the requested\n</span><span style=\"color: #008080;\"> 55</span> <span style=\"color: #008000;\"> *    action (turn on a LED, play sound, etc.) The call is protected\n</span><span style=\"color: #008080;\"> 56</span> <span style=\"color: #008000;\"> *    by @event_lock and must not sleep\n</span><span style=\"color: #008080;\"> 57</span> <span style=\"color: #008000;\"> * @grab: input handle that currently has the device grabbed (via\n</span><span style=\"color: #008080;\"> 58</span> <span style=\"color: #008000;\"> *    EVIOCGRAB ioctl). When a handle grabs a device it becomes sole\n</span><span style=\"color: #008080;\"> 59</span> <span style=\"color: #008000;\"> *    recipient for all input events coming from the device\n</span><span style=\"color: #008080;\"> 60</span> <span style=\"color: #008000;\"> * @event_lock: this spinlock is is taken when input core receives\n</span><span style=\"color: #008080;\"> 61</span> <span style=\"color: #008000;\"> *    and processes a new event for the device (in input_event()).\n</span><span style=\"color: #008080;\"> 62</span> <span style=\"color: #008000;\"> *    Code that accesses and/or modifies parameters of a device\n</span><span style=\"color: #008080;\"> 63</span> <span style=\"color: #008000;\"> *    (such as keymap or absmin, absmax, absfuzz, etc.) after device\n</span><span style=\"color: #008080;\"> 64</span> <span style=\"color: #008000;\"> *    has been registered with input core must take this lock.\n</span><span style=\"color: #008080;\"> 65</span> <span style=\"color: #008000;\"> * @mutex: serializes calls to open(), close() and flush() methods\n</span><span style=\"color: #008080;\"> 66</span> <span style=\"color: #008000;\"> * @users: stores number of users (input handlers) that opened this\n</span><span style=\"color: #008080;\"> 67</span> <span style=\"color: #008000;\"> *    device. It is used by input_open_device() and input_close_device()\n</span><span style=\"color: #008080;\"> 68</span> <span style=\"color: #008000;\"> *    to make sure that dev-&gt;open() is only called when the first\n</span><span style=\"color: #008080;\"> 69</span> <span style=\"color: #008000;\"> *    user opens device and dev-&gt;close() is called when the very\n</span><span style=\"color: #008080;\"> 70</span> <span style=\"color: #008000;\"> *    last user closes the device\n</span><span style=\"color: #008080;\"> 71</span> <span style=\"color: #008000;\"> * @going_away: marks devices that are in a middle of unregistering and\n</span><span style=\"color: #008080;\"> 72</span> <span style=\"color: #008000;\"> *    causes input_open_device*() fail with -ENODEV.\n</span><span style=\"color: #008080;\"> 73</span> <span style=\"color: #008000;\"> * @dev: driver model's view of this device\n</span><span style=\"color: #008080;\"> 74</span> <span style=\"color: #008000;\"> * @h_list: list of input handles associated with the device. When\n</span><span style=\"color: #008080;\"> 75</span> <span style=\"color: #008000;\"> *    accessing the list dev-&gt;mutex must be held\n</span><span style=\"color: #008080;\"> 76</span> <span style=\"color: #008000;\"> * @node: used to place the device onto input_dev_list\n</span><span style=\"color: #008080;\"> 77</span> <span style=\"color: #008000;\"> * @num_vals: number of values queued in the current frame\n</span><span style=\"color: #008080;\"> 78</span> <span style=\"color: #008000;\"> * @max_vals: maximum number of values queued in a frame\n</span><span style=\"color: #008080;\"> 79</span> <span style=\"color: #008000;\"> * @vals: array of values queued in the current frame\n</span><span style=\"color: #008080;\"> 80</span> <span style=\"color: #008000;\"> * @devres_managed: indicates that devices is managed with devres framework\n</span><span style=\"color: #008080;\"> 81</span> <span style=\"color: #008000;\"> *    and needs not be explicitly unregistered or freed.\n</span><span style=\"color: #008080;\"> 82</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 83</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> input_dev {\n</span><span style=\"color: #008080;\"> 84</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">name;\n</span><span style=\"color: #008080;\"> 85</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">phys;\n</span><span style=\"color: #008080;\"> 86</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">uniq;\n</span><span style=\"color: #008080;\"> 87</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> input_id id;\n</span><span style=\"color: #008080;\"> 88</span> \n<span style=\"color: #008080;\"> 89</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> propbit[BITS_TO_LONGS(INPUT_PROP_CNT)];\n</span><span style=\"color: #008080;\"> 90</span> \n<span style=\"color: #008080;\"> 91</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> evbit[BITS_TO_LONGS(EV_CNT)];\n</span><span style=\"color: #008080;\"> 92</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> keybit[BITS_TO_LONGS(KEY_CNT)];\n</span><span style=\"color: #008080;\"> 93</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> relbit[BITS_TO_LONGS(REL_CNT)];\n</span><span style=\"color: #008080;\"> 94</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> absbit[BITS_TO_LONGS(ABS_CNT)];\n</span><span style=\"color: #008080;\"> 95</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> mscbit[BITS_TO_LONGS(MSC_CNT)];\n</span><span style=\"color: #008080;\"> 96</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> ledbit[BITS_TO_LONGS(LED_CNT)];\n</span><span style=\"color: #008080;\"> 97</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> sndbit[BITS_TO_LONGS(SND_CNT)];\n</span><span style=\"color: #008080;\"> 98</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> ffbit[BITS_TO_LONGS(FF_CNT)];\n</span><span style=\"color: #008080;\"> 99</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> swbit[BITS_TO_LONGS(SW_CNT)];\n</span><span style=\"color: #008080;\">100</span> \n<span style=\"color: #008080;\">101</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> hint_events_per_packet;\n</span><span style=\"color: #008080;\">102</span> \n<span style=\"color: #008080;\">103</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> keycodemax;\n</span><span style=\"color: #008080;\">104</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> keycodesize;\n</span><span style=\"color: #008080;\">105</span>     <span style=\"color: #0000ff;\">void</span> *<span style=\"color: #000000;\">keycode;\n</span><span style=\"color: #008080;\">106</span> \n<span style=\"color: #008080;\">107</span>     <span style=\"color: #0000ff;\">int</span> (*setkeycode)(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev,\n</span><span style=\"color: #008080;\">108</span>               <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">struct</span> input_keymap_entry *<span style=\"color: #000000;\">ke,\n</span><span style=\"color: #008080;\">109</span>               unsigned <span style=\"color: #0000ff;\">int</span> *<span style=\"color: #000000;\">old_keycode);\n</span><span style=\"color: #008080;\">110</span>     <span style=\"color: #0000ff;\">int</span> (*getkeycode)(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev,\n</span><span style=\"color: #008080;\">111</span>               <span style=\"color: #0000ff;\">struct</span> input_keymap_entry *<span style=\"color: #000000;\">ke);\n</span><span style=\"color: #008080;\">112</span> \n<span style=\"color: #008080;\">113</span>     <span style=\"color: #0000ff;\">struct</span> ff_device *<span style=\"color: #000000;\">ff;\n</span><span style=\"color: #008080;\">114</span> \n<span style=\"color: #008080;\">115</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> repeat_key;\n</span><span style=\"color: #008080;\">116</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> timer_list timer;\n</span><span style=\"color: #008080;\">117</span> \n<span style=\"color: #008080;\">118</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> rep[REP_CNT];\n</span><span style=\"color: #008080;\">119</span> \n<span style=\"color: #008080;\">120</span>     <span style=\"color: #0000ff;\">struct</span> input_mt *<span style=\"color: #000000;\">mt;\n</span><span style=\"color: #008080;\">121</span> \n<span style=\"color: #008080;\">122</span>     <span style=\"color: #0000ff;\">struct</span> input_absinfo *<span style=\"color: #000000;\">absinfo;\n</span><span style=\"color: #008080;\">123</span> \n<span style=\"color: #008080;\">124</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> key[BITS_TO_LONGS(KEY_CNT)];\n</span><span style=\"color: #008080;\">125</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> led[BITS_TO_LONGS(LED_CNT)];\n</span><span style=\"color: #008080;\">126</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> snd[BITS_TO_LONGS(SND_CNT)];\n</span><span style=\"color: #008080;\">127</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> sw[BITS_TO_LONGS(SW_CNT)];\n</span><span style=\"color: #008080;\">128</span> \n<span style=\"color: #008080;\">129</span>     <span style=\"color: #0000ff;\">int</span> (*open)(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">130</span>     <span style=\"color: #0000ff;\">void</span> (*close)(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">131</span>     <span style=\"color: #0000ff;\">int</span> (*flush)(<span style=\"color: #0000ff;\">struct</span> input_dev *dev, <span style=\"color: #0000ff;\">struct</span> file *<span style=\"color: #000000;\">file);\n</span><span style=\"color: #008080;\">132</span>     <span style=\"color: #0000ff;\">int</span> (*<span style=\"color: #0000ff;\">event</span>)(<span style=\"color: #0000ff;\">struct</span> input_dev *dev, unsigned <span style=\"color: #0000ff;\">int</span> type, unsigned <span style=\"color: #0000ff;\">int</span> code, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> value);\n</span><span style=\"color: #008080;\">133</span> \n<span style=\"color: #008080;\">134</span>     <span style=\"color: #0000ff;\">struct</span> input_handle __rcu *<span style=\"color: #000000;\">grab;\n</span><span style=\"color: #008080;\">135</span> \n<span style=\"color: #008080;\">136</span> <span style=\"color: #000000;\">    spinlock_t event_lock;\n</span><span style=\"color: #008080;\">137</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> mutex mutex;\n</span><span style=\"color: #008080;\">138</span> \n<span style=\"color: #008080;\">139</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> users;\n</span><span style=\"color: #008080;\">140</span>     <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> going_away;\n</span><span style=\"color: #008080;\">141</span> \n<span style=\"color: #008080;\">142</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> device dev;\n</span><span style=\"color: #008080;\">143</span> \n<span style=\"color: #008080;\">144</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> list_head    h_list;\n</span><span style=\"color: #008080;\">145</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> list_head    node;\n</span><span style=\"color: #008080;\">146</span> \n<span style=\"color: #008080;\">147</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> num_vals;\n</span><span style=\"color: #008080;\">148</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> max_vals;\n</span><span style=\"color: #008080;\">149</span>     <span style=\"color: #0000ff;\">struct</span> input_value *<span style=\"color: #000000;\">vals;\n</span><span style=\"color: #008080;\">150</span> \n<span style=\"color: #008080;\">151</span>     <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> devres_managed;\n</span><span style=\"color: #008080;\">152</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">153</span> <span style=\"color: #0000ff;\">#define</span> to_input_dev(d) container_of(d, struct input_dev, dev)</pre>\n</div>\n<p>&nbsp;</p>\n<div>\n<div>&nbsp;</div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\">  2</span> <span style=\"color: #008000;\"> * input_register_device - register device with input core\n</span><span style=\"color: #008080;\">  3</span> <span style=\"color: #008000;\"> * @dev: device to be registered\n</span><span style=\"color: #008080;\">  4</span> <span style=\"color: #008000;\"> *\n</span><span style=\"color: #008080;\">  5</span> <span style=\"color: #008000;\"> * This function registers device with input core. The device must be\n</span><span style=\"color: #008080;\">  6</span> <span style=\"color: #008000;\"> * allocated with input_allocate_device() and all it's capabilities\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #008000;\"> * set up before registering.\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #008000;\"> * If function fails the device must be freed with input_free_device().\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #008000;\"> * Once device has been successfully registered it can be unregistered\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #008000;\"> * with input_unregister_device(); input_free_device() should not be\n</span><span style=\"color: #008080;\"> 11</span> <span style=\"color: #008000;\"> * called in this case.\n</span><span style=\"color: #008080;\"> 12</span> <span style=\"color: #008000;\"> *\n</span><span style=\"color: #008080;\"> 13</span> <span style=\"color: #008000;\"> * Note that this function is also used to register managed input devices\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #008000;\"> * (ones allocated with devm_input_allocate_device()). Such managed input\n</span><span style=\"color: #008080;\"> 15</span> <span style=\"color: #008000;\"> * devices need not be explicitly unregistered or freed, their tear down\n</span><span style=\"color: #008080;\"> 16</span> <span style=\"color: #008000;\"> * is controlled by the devres infrastructure. It is also worth noting\n</span><span style=\"color: #008080;\"> 17</span> <span style=\"color: #008000;\"> * that tear down of managed input devices is internally a 2-step process:\n</span><span style=\"color: #008080;\"> 18</span> <span style=\"color: #008000;\"> * registered managed input device is first unregistered, but stays in\n</span><span style=\"color: #008080;\"> 19</span> <span style=\"color: #008000;\"> * memory and can still handle input_event() calls (although events will\n</span><span style=\"color: #008080;\"> 20</span> <span style=\"color: #008000;\"> * not be delivered anywhere). The freeing of managed input device will\n</span><span style=\"color: #008080;\"> 21</span> <span style=\"color: #008000;\"> * happen later, when devres stack is unwound to the point where device\n</span><span style=\"color: #008080;\"> 22</span> <span style=\"color: #008000;\"> * allocation was made.\n</span><span style=\"color: #008080;\"> 23</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 24</span> <span style=\"color: #0000ff;\">int</span> input_register_device(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev)\n</span><span style=\"color: #008080;\"> 25</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 26</span>     <span style=\"color: #0000ff;\">struct</span> input_devres *devres =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\"> 27</span>      <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 输入事件的处理接口指针，用于和设备的事件类型进行匹配 </span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\"> 28</span>     <span style=\"color: #0000ff;\">struct</span> input_handler *<span style=\"color: #000000;\">handler;\n</span><span style=\"color: #008080;\"> 29</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> packet_size;\n</span><span style=\"color: #008080;\"> 30</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">path;\n</span><span style=\"color: #008080;\"> 31</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\"> 32</span> \n<span style=\"color: #008080;\"> 33</span>     <span style=\"color: #0000ff;\">if</span> (dev-&gt;<span style=\"color: #000000;\">devres_managed) {\n</span><span style=\"color: #008080;\"> 34</span>         devres =<span style=\"color: #000000;\"> devres_alloc(devm_input_device_unregister,\n</span><span style=\"color: #008080;\"> 35</span>                       <span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> input_devres), GFP_KERNEL);\n</span><span style=\"color: #008080;\"> 36</span>         <span style=\"color: #0000ff;\">if</span> (!<span style=\"color: #000000;\">devres)\n</span><span style=\"color: #008080;\"> 37</span>             <span style=\"color: #0000ff;\">return</span> -<span style=\"color: #000000;\">ENOMEM;\n</span><span style=\"color: #008080;\"> 38</span> \n<span style=\"color: #008080;\"> 39</span>         devres-&gt;input =<span style=\"color: #000000;\"> dev;\n</span><span style=\"color: #008080;\"> 40</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 41</span> \n<span style=\"color: #008080;\"> 42</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Every input device generates EV_SYN/SYN_REPORT events. </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 43</span>     __set_bit(EV_SYN, dev-&gt;<span style=\"color: #000000;\">evbit);\n</span><span style=\"color: #008080;\"> 44</span> \n<span style=\"color: #008080;\"> 45</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> KEY_RESERVED is not supposed to be transmitted to userspace. </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 46</span>     __clear_bit(KEY_RESERVED, dev-&gt;<span style=\"color: #000000;\">keybit);\n</span><span style=\"color: #008080;\"> 47</span> \n<span style=\"color: #008080;\"> 48</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Make sure that bitmasks not mentioned in dev-&gt;evbit are clean. </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 49</span> <span style=\"color: #000000;\">    input_cleanse_bitmasks(dev);\n</span><span style=\"color: #008080;\"> 50</span> \n<span style=\"color: #008080;\"> 51</span>     packet_size =<span style=\"color: #000000;\"> input_estimate_events_per_packet(dev);\n</span><span style=\"color: #008080;\"> 52</span>     <span style=\"color: #0000ff;\">if</span> (dev-&gt;hint_events_per_packet &lt;<span style=\"color: #000000;\"> packet_size)\n</span><span style=\"color: #008080;\"> 53</span>         dev-&gt;hint_events_per_packet =<span style=\"color: #000000;\"> packet_size;\n</span><span style=\"color: #008080;\"> 54</span> \n<span style=\"color: #008080;\"> 55</span>     dev-&gt;max_vals = dev-&gt;hint_events_per_packet + <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 56</span>     dev-&gt;vals = kcalloc(dev-&gt;max_vals, <span style=\"color: #0000ff;\">sizeof</span>(*dev-&gt;<span style=\"color: #000000;\">vals), GFP_KERNEL);\n</span><span style=\"color: #008080;\"> 57</span>     <span style=\"color: #0000ff;\">if</span> (!dev-&gt;<span style=\"color: #000000;\">vals) {\n</span><span style=\"color: #008080;\"> 58</span>         error = -<span style=\"color: #000000;\">ENOMEM;\n</span><span style=\"color: #008080;\"> 59</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_devres_free;\n</span><span style=\"color: #008080;\"> 60</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 61</span> \n<span style=\"color: #008080;\"> 62</span>     <span style=\"color: #008000;\">/*</span>\n<span style=\"color: #008080;\"> 63</span> <span style=\"color: #008000;\">     * If delay and period are pre-set by the driver, then autorepeating\n</span><span style=\"color: #008080;\"> 64</span> <span style=\"color: #008000;\">     * is handled by the driver itself and we don't do it in input.c.\n</span><span style=\"color: #008080;\"> 65</span>      <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 66</span>     <span style=\"color: #0000ff;\">if</span> (!dev-&gt;rep[REP_DELAY] &amp;&amp; !dev-&gt;<span style=\"color: #000000;\">rep[REP_PERIOD]) {\n</span><span style=\"color: #008080;\"> 67</span>         dev-&gt;timer.data = (<span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\">) dev;\n</span><span style=\"color: #008080;\"> 68</span>         dev-&gt;timer.function =<span style=\"color: #000000;\"> input_repeat_key;\n</span><span style=\"color: #008080;\"> 69</span>         dev-&gt;rep[REP_DELAY] = <span style=\"color: #800080;\">250</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 70</span>         dev-&gt;rep[REP_PERIOD] = <span style=\"color: #800080;\">33</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 71</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 72</span> \n<span style=\"color: #008080;\"> 73</span>     <span style=\"color: #0000ff;\">if</span> (!dev-&gt;<span style=\"color: #000000;\">getkeycode)\n</span><span style=\"color: #008080;\"> 74</span>         dev-&gt;getkeycode =<span style=\"color: #000000;\"> input_default_getkeycode;\n</span><span style=\"color: #008080;\"> 75</span> \n<span style=\"color: #008080;\"> 76</span>     <span style=\"color: #0000ff;\">if</span> (!dev-&gt;<span style=\"color: #000000;\">setkeycode)\n</span><span style=\"color: #008080;\"> 77</span>         dev-&gt;setkeycode =<span style=\"color: #000000;\"> input_default_setkeycode;\n</span><span style=\"color: #008080;\"> 78</span> \n<span style=\"color: #008080;\"> 79</span>     error = device_add(&amp;dev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\"> 80</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\"> 81</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_free_vals;\n</span><span style=\"color: #008080;\"> 82</span> \n<span style=\"color: #008080;\"> 83</span>     path = kobject_get_path(&amp;dev-&gt;<span style=\"color: #000000;\">dev.kobj, GFP_KERNEL);\n</span><span style=\"color: #008080;\"> 84</span>     pr_info(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%s as %s\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\"> 85</span>         dev-&gt;name ? dev-&gt;name : <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Unspecified device</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\"> 86</span>         path ? path : <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">N/A</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 87</span> <span style=\"color: #000000;\">    kfree(path);\n</span><span style=\"color: #008080;\"> 88</span> \n<span style=\"color: #008080;\"> 89</span>     error = mutex_lock_interruptible(&amp;<span style=\"color: #000000;\">input_mutex);\n</span><span style=\"color: #008080;\"> 90</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\"> 91</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_device_del;\n</span><span style=\"color: #008080;\"> 92</span>     \n<span style=\"color: #008080;\"> 93</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 重要:把设备挂到全局的input子系统设备链表input_dev_list上 </span><span style=\"color: #008000;\">*/</span>    \n<span style=\"color: #008080;\"> 94</span>     list_add_tail(&amp;dev-&gt;node, &amp;<span style=\"color: #000000;\">input_dev_list);\n</span><span style=\"color: #008080;\"> 95</span> \n<span style=\"color: #008080;\"> 96</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 核心重点，input设备在增加到input_dev_list链表上之后，会查找 \n</span><span style=\"color: #008080;\"> 97</span> <span style=\"color: #008000;\">     * input_handler_list事件处理链表上的handler进行匹配，这里的匹配 \n</span><span style=\"color: #008080;\"> 98</span> <span style=\"color: #008000;\">     * 方式与设备模型的device和driver匹配过程很相似</span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\"> 99</span>     list_for_each_entry(handler, &amp;<span style=\"color: #000000;\">input_handler_list, node)\n</span><span style=\"color: #008080;\">100</span>         input_attach_handler(dev, handler);<span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">遍历input_handler_list，通过input_match_device试图与每一个handler进行匹配 匹配上了就使用connect连接</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">101</span>     <span style=\"color: #008000;\">/*</span>\n<span style=\"color: #008080;\">102</span> <span style=\"color: #008000;\">    static int input_attach_handler(struct input_dev *dev, struct input_handler *handler)\n</span><span style=\"color: #008080;\">103</span> <span style=\"color: #008000;\">    {\n</span><span style=\"color: #008080;\">104</span> <span style=\"color: #008000;\">        const struct input_device_id *id;\n</span><span style=\"color: #008080;\">105</span> <span style=\"color: #008000;\">        int error;\n</span><span style=\"color: #008080;\">106</span> \n<span style=\"color: #008080;\">107</span> <span style=\"color: #008000;\">        id = input_match_device(handler, dev);\n</span><span style=\"color: #008080;\">108</span> <span style=\"color: #008000;\">        if (!id)\n</span><span style=\"color: #008080;\">109</span> <span style=\"color: #008000;\">            return -ENODEV;\n</span><span style=\"color: #008080;\">110</span> \n<span style=\"color: #008080;\">111</span> <span style=\"color: #008000;\">        error = handler-&gt;connect(handler, dev, id);\n</span><span style=\"color: #008080;\">112</span> <span style=\"color: #008000;\">        if (error &amp;&amp; error != -ENODEV)\n</span><span style=\"color: #008080;\">113</span> <span style=\"color: #008000;\">            pr_err(\"failed to attach handler %s to device %s, error: %d\\n\",\n</span><span style=\"color: #008080;\">114</span> <span style=\"color: #008000;\">                   handler-&gt;name, kobject_name(&amp;dev-&gt;dev.kobj), error);\n</span><span style=\"color: #008080;\">115</span> \n<span style=\"color: #008080;\">116</span> <span style=\"color: #008000;\">        return error;\n</span><span style=\"color: #008080;\">117</span> <span style=\"color: #008000;\">    }\n</span><span style=\"color: #008080;\">118</span>     <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">119</span>     \n<span style=\"color: #008080;\">120</span> <span style=\"color: #000000;\">    input_wakeup_procfs_readers();\n</span><span style=\"color: #008080;\">121</span> \n<span style=\"color: #008080;\">122</span>     mutex_unlock(&amp;<span style=\"color: #000000;\">input_mutex);\n</span><span style=\"color: #008080;\">123</span> \n<span style=\"color: #008080;\">124</span>     <span style=\"color: #0000ff;\">if</span> (dev-&gt;<span style=\"color: #000000;\">devres_managed) {\n</span><span style=\"color: #008080;\">125</span>         dev_dbg(dev-&gt;dev.parent, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%s: registering %s with devres.\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\">126</span>             __func__, dev_name(&amp;dev-&gt;<span style=\"color: #000000;\">dev));\n</span><span style=\"color: #008080;\">127</span>         devres_add(dev-&gt;<span style=\"color: #000000;\">dev.parent, devres);\n</span><span style=\"color: #008080;\">128</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">129</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">130</span> \n<span style=\"color: #008080;\">131</span> <span style=\"color: #000000;\">err_device_del:\n</span><span style=\"color: #008080;\">132</span>     device_del(&amp;dev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">133</span> <span style=\"color: #000000;\">err_free_vals:\n</span><span style=\"color: #008080;\">134</span>     kfree(dev-&gt;<span style=\"color: #000000;\">vals);\n</span><span style=\"color: #008080;\">135</span>     dev-&gt;vals =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">136</span> <span style=\"color: #000000;\">err_devres_free:\n</span><span style=\"color: #008080;\">137</span> <span style=\"color: #000000;\">    devres_free(devres);\n</span><span style=\"color: #008080;\">138</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">139</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">140</span> EXPORT_SYMBOL(input_register_device);</pre>\n</div>\n<h2>3.2注册handler</h2>\n<p>一般handler不需要我们自己写 内核里面已经有了很多的hanlder基本够用</p>\n下面以Evdev为例，来分析事件处理层。<br>\nvim drivers/input/evdev.c</div>\n<div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">struct</span> input_device_id evdev_ids[] =<span style=\"color: #000000;\"> {\n</span><span style=\"color: #008080;\"> 2</span>     { .driver_info = <span style=\"color: #800080;\">1</span> },    <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Matches all devices </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 3</span>     { },            <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Terminating zero entry </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 4</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 5</span> \n<span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">MODULE_DEVICE_TABLE(input, evdev_ids);\n</span><span style=\"color: #008080;\"> 7</span> \n<span style=\"color: #008080;\"> 8</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">struct</span> input_handler evdev_handler =<span style=\"color: #000000;\"> {\n</span><span style=\"color: #008080;\"> 9</span>     .<span style=\"color: #0000ff;\">event</span>        =<span style=\"color: #000000;\"> evdev_event,\n</span><span style=\"color: #008080;\">10</span>     .events        =<span style=\"color: #000000;\"> evdev_events,\n</span><span style=\"color: #008080;\">11</span>     .connect    =<span style=\"color: #000000;\"> evdev_connect,\n</span><span style=\"color: #008080;\">12</span>     .disconnect    =<span style=\"color: #000000;\"> evdev_disconnect,\n</span><span style=\"color: #008080;\">13</span>     .legacy_minors    = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\">14</span>     .minor        =<span style=\"color: #000000;\"> EVDEV_MINOR_BASE,\n</span><span style=\"color: #008080;\">15</span>     .name        = <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">evdev</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\">16</span>     .id_table    =<span style=\"color: #000000;\"> evdev_ids,\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">18</span> \n<span style=\"color: #008080;\">19</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">int</span> __init evdev_init(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">21</span>     <span style=\"color: #0000ff;\">return</span> input_register_handler(&amp;<span style=\"color: #000000;\">evdev_handler);\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">23</span> \n<span style=\"color: #008080;\">24</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span> __exit evdev_exit(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">26</span>     input_unregister_handler(&amp;<span style=\"color: #000000;\">evdev_handler);\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">28</span> \n<span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">module_init(evdev_init);\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">module_exit(evdev_exit);\n</span><span style=\"color: #008080;\">31</span> \n<span style=\"color: #008080;\">32</span> MODULE_AUTHOR(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Vojtech Pavlik &lt;vojtech@ucw.cz&gt;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">33</span> MODULE_DESCRIPTION(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Input driver event char devices</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">34</span> MODULE_LICENSE(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">GPL</span><span style=\"color: #800000;\">\"</span>);</pre>\n</div>\n<p>注册的handler可以在proc/bus/input/danlder中查看到</p>\n</div>\n<p><img src=\"/.com//2909691-20220819102740731-2036281828.png\" alt></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * input_register_handler - register a new input handler\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * @handler: handler to be registered\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> * This function registers a new input handler (interface) for input\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> * devices in the system and attaches it to all input devices that\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * are compatible with the handler.\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">int</span> input_register_handler(<span style=\"color: #0000ff;\">struct</span> input_handler *<span style=\"color: #000000;\">handler)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">11</span>     <span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev;\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">13</span> \n<span style=\"color: #008080;\">14</span>     error = mutex_lock_interruptible(&amp;<span style=\"color: #000000;\">input_mutex);\n</span><span style=\"color: #008080;\">15</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">17</span> \n<span style=\"color: #008080;\">18</span>     INIT_LIST_HEAD(&amp;handler-&gt;<span style=\"color: #000000;\">h_list);\n</span><span style=\"color: #008080;\">19</span> 　　<code class=\"  language-rust\"><span class=\"token comment\">/* `重要`:把设备处理器挂到全局的input子系统设备链表input_handler_list上 */ </span></code>\n<span style=\"color: #008080;\">20</span>     list_add_tail(&amp;handler-&gt;node, &amp;<span style=\"color: #000000;\">input_handler_list);\n</span><span style=\"color: #008080;\">21</span> 　　<code class=\"  language-rust\"><span class=\"token comment\">/*遍历input_dev_list，试图与每一个input_dev进行匹配*/</span></code>\n<span style=\"color: #008080;\">22</span>     list_for_each_entry(dev, &amp;<span style=\"color: #000000;\">input_dev_list, node)\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">        input_attach_handler(dev, handler);<br>　　　　/*<br></span><code class=\"  language-objectivec\"><span class=\"token keyword\">static <span class=\"token keyword\">int <span class=\"token function\">input_attach_handler<span class=\"token punctuation\">(<span class=\"token keyword\">struct input_dev <span class=\"token operator\">*dev<span class=\"token punctuation\">, <span class=\"token keyword\">struct input_handler <span class=\"token operator\">*handler<span class=\"token punctuation\">)\n<span class=\"token punctuation\">{\n    <span class=\"token keyword\">const <span class=\"token keyword\">struct input_device_id <span class=\"token operator\">*id<span class=\"token punctuation\">;\n    <span class=\"token keyword\">int error<span class=\"token punctuation\">;\n\n<pre><code>&lt;span class=&quot;token comment&quot;&gt;/* 利用handler-&amp;gt;id_table和dev进行匹配*/\nid &lt;span class=&quot;token operator&quot;&gt;= &lt;span class=&quot;token function&quot;&gt;input_match_device&lt;span class=&quot;token punctuation&quot;&gt;(handler&lt;span class=&quot;token punctuation&quot;&gt;, dev&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;;\n&lt;span class=&quot;token keyword&quot;&gt;if &lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token operator&quot;&gt;!id&lt;span class=&quot;token punctuation&quot;&gt;)\n    &lt;span class=&quot;token keyword&quot;&gt;return &lt;span class=&quot;token operator&quot;&gt;-ENODEV&lt;span class=&quot;token punctuation&quot;&gt;;\n  &lt;span class=&quot;token comment&quot;&gt;/*匹配成功，则调用handler-&amp;gt;connect函数进行连接*/\nerror &lt;span class=&quot;token operator&quot;&gt;= handler&lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;span class=&quot;token function&quot;&gt;connect&lt;span class=&quot;token punctuation&quot;&gt;(handler&lt;span class=&quot;token punctuation&quot;&gt;, dev&lt;span class=&quot;token punctuation&quot;&gt;, id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;;\n&lt;span class=&quot;token keyword&quot;&gt;if &lt;span class=&quot;token punctuation&quot;&gt;(error &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp; error &lt;span class=&quot;token operator&quot;&gt;!= &lt;span class=&quot;token operator&quot;&gt;-ENODEV&lt;span class=&quot;token punctuation&quot;&gt;)\n    &lt;span class=&quot;token function&quot;&gt;pr_err&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token string&quot;&gt;&quot;failed to attach handler %s to device %s, error: %d\\n&quot;&lt;span class=&quot;token punctuation&quot;&gt;,\n           handler&lt;span class=&quot;token operator&quot;&gt;-&amp;gt;name&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token function&quot;&gt;kobject_name&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token operator&quot;&gt;&amp;amp;dev&lt;span class=&quot;token operator&quot;&gt;-&amp;gt;dev&lt;span class=&quot;token punctuation&quot;&gt;.kobj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;, error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;;\n\n&lt;span class=&quot;token keyword&quot;&gt;return error&lt;span class=&quot;token punctuation&quot;&gt;;</code></pre><p><span class=\"token punctuation\">}</span></p></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code><span style=\"color: #000000;\"><br>　　　　　　*/<br></span><span style=\"color: #008080;\">24</span><br><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    input_wakeup_procfs_readers();<br></span><span style=\"color: #008080;\">26</span><br><span style=\"color: #008080;\">27</span>     mutex_unlock(&amp;<span style=\"color: #000000;\">input_mutex);<br></span><span style=\"color: #008080;\">28</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;<br></span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">}<br></span><span style=\"color: #008080;\">30</span> EXPORT_SYMBOL(input_register_handler);</pre><p></p>\n</div>\n<p>这个过程和注册dev及其相似</p>\n<h2>3.3 handler的connect函数</h2>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">int</span> evdev_connect(<span style=\"color: #0000ff;\">struct</span> input_handler *handler, <span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev,\n</span><span style=\"color: #008080;\"> 2</span>              <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">struct</span> input_device_id *<span style=\"color: #000000;\">id)\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">struct</span> evdev *<span style=\"color: #000000;\">evdev;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> minor;\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> dev_no;\n</span><span style=\"color: #008080;\"> 7</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\"> 8</span>     \n<span style=\"color: #008080;\"> 9</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">申请一个新的次设备号</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span>     minor = input_get_new_minor(EVDEV_MINOR_BASE, EVDEV_MINORS, <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">11</span> \n<span style=\"color: #008080;\">12</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 这说明内核已经没办法再分配这种类型的设备了 </span><span style=\"color: #008000;\">*/</span> \n<span style=\"color: #008080;\">13</span>     <span style=\"color: #0000ff;\">if</span> (minor &lt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">) {\n</span><span style=\"color: #008080;\">14</span>         error =<span style=\"color: #000000;\"> minor;\n</span><span style=\"color: #008080;\">15</span>         pr_err(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">failed to reserve new minor: %d\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, error);\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">18</span> \n<span style=\"color: #008080;\">19</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 开始给evdev事件层驱动分配空间了 </span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\">20</span>     evdev = kzalloc(<span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> evdev), GFP_KERNEL);\n</span><span style=\"color: #008080;\">21</span>     <span style=\"color: #0000ff;\">if</span> (!<span style=\"color: #000000;\">evdev) {\n</span><span style=\"color: #008080;\">22</span>         error = -<span style=\"color: #000000;\">ENOMEM;\n</span><span style=\"color: #008080;\">23</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_free_minor;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">25</span> \n<span style=\"color: #008080;\">26</span>         <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 初始化client_list列表和evdev_wait队列 </span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\">27</span>     INIT_LIST_HEAD(&amp;evdev-&gt;<span style=\"color: #000000;\">client_list);\n</span><span style=\"color: #008080;\">28</span>     spin_lock_init(&amp;evdev-&gt;<span style=\"color: #000000;\">client_lock);\n</span><span style=\"color: #008080;\">29</span>     mutex_init(&amp;evdev-&gt;<span style=\"color: #000000;\">mutex);\n</span><span style=\"color: #008080;\">30</span>     init_waitqueue_head(&amp;evdev-&gt;<span style=\"color: #000000;\">wait);\n</span><span style=\"color: #008080;\">31</span>     evdev-&gt;exist = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">32</span> \n<span style=\"color: #008080;\">33</span>     dev_no =<span style=\"color: #000000;\"> minor;\n</span><span style=\"color: #008080;\">34</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Normalize device number if it falls into legacy range </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">35</span>     <span style=\"color: #0000ff;\">if</span> (dev_no &lt; EVDEV_MINOR_BASE +<span style=\"color: #000000;\"> EVDEV_MINORS)\n</span><span style=\"color: #008080;\">36</span>         dev_no -=<span style=\"color: #000000;\"> EVDEV_MINOR_BASE;\n</span><span style=\"color: #008080;\">37</span>     \n<span style=\"color: #008080;\">38</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">设置设备节点名称，/dev/eventX 就是在此时设置</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">39</span>     dev_set_name(&amp;evdev-&gt;dev, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">event%d</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, dev_no);\n</span><span style=\"color: #008080;\">40</span> \n<span style=\"color: #008080;\">41</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 初始化evdev结构体，其中handle为输入设备和事件处理的关联接口 </span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\">42</span>     evdev-&gt;handle.dev =<span style=\"color: #000000;\"> input_get_device(dev);\n</span><span style=\"color: #008080;\">43</span>     evdev-&gt;handle.name = dev_name(&amp;evdev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">44</span>     evdev-&gt;handle.handler =<span style=\"color: #000000;\"> handler;\n</span><span style=\"color: #008080;\">45</span>     evdev-&gt;handle.<span style=\"color: #0000ff;\">private</span> =<span style=\"color: #000000;\"> evdev;\n</span><span style=\"color: #008080;\">46</span> \n<span style=\"color: #008080;\">47</span>       <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">设置设备号，应用层就是通过设备号，找到该设备的</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">48</span>     evdev-&gt;dev.devt =<span style=\"color: #000000;\"> MKDEV(INPUT_MAJOR, minor);\n</span><span style=\"color: #008080;\">49</span>     evdev-&gt;dev.<span style=\"color: #0000ff;\">class</span> = &amp;<span style=\"color: #000000;\">input_class;\n</span><span style=\"color: #008080;\">50</span>     evdev-&gt;dev.parent = &amp;dev-&gt;<span style=\"color: #000000;\">dev;\n</span><span style=\"color: #008080;\">51</span>     evdev-&gt;dev.release =<span style=\"color: #000000;\"> evdev_free;\n</span><span style=\"color: #008080;\">52</span>     device_initialize(&amp;evdev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">53</span> \n<span style=\"color: #008080;\">54</span>      <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> input_dev设备驱动和handler事件处理层的关联，就在这时由handle完成 </span><span style=\"color: #008000;\">*/</span> \n<span style=\"color: #008080;\">55</span>     error = input_register_handle(&amp;evdev-&gt;<span style=\"color: #000000;\">handle);\n</span><span style=\"color: #008080;\">56</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\">57</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_free_evdev;\n</span><span style=\"color: #008080;\">58</span> \n<span style=\"color: #008080;\">59</span>     cdev_init(&amp;evdev-&gt;cdev, &amp;<span style=\"color: #000000;\">evdev_fops);\n</span><span style=\"color: #008080;\">60</span>     evdev-&gt;cdev.kobj.parent = &amp;evdev-&gt;<span style=\"color: #000000;\">dev.kobj;\n</span><span style=\"color: #008080;\">61</span>     error = cdev_add(&amp;evdev-&gt;cdev, evdev-&gt;dev.devt, <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">62</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\">63</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_unregister_handle;\n</span><span style=\"color: #008080;\">64</span> \n<span style=\"color: #008080;\">65</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">将设备加入到Linux设备模型，它的内部将找到它的bus，然后让它的bus\n</span><span style=\"color: #008080;\">66</span> <span style=\"color: #008000;\">    给它找到它的driver，在驱动或者总线的probe函数中，一般会在/dev/目录\n</span><span style=\"color: #008080;\">67</span> <span style=\"color: #008000;\">    先创建相应的设备节点，这样应用程序就可以通过该设备节点来使用设备了\n</span><span style=\"color: #008080;\">68</span> <span style=\"color: #008000;\">    ，/dev/eventX 设备节点就是在此时生成\n</span><span style=\"color: #008080;\">69</span>     <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">70</span>     error = device_add(&amp;evdev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">71</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\">72</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_cleanup_evdev;\n</span><span style=\"color: #008080;\">73</span> \n<span style=\"color: #008080;\">74</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">75</span> \n<span style=\"color: #008080;\">76</span> <span style=\"color: #000000;\"> err_cleanup_evdev:\n</span><span style=\"color: #008080;\">77</span> <span style=\"color: #000000;\">    evdev_cleanup(evdev);\n</span><span style=\"color: #008080;\">78</span> <span style=\"color: #000000;\"> err_unregister_handle:\n</span><span style=\"color: #008080;\">79</span>     input_unregister_handle(&amp;evdev-&gt;<span style=\"color: #000000;\">handle);\n</span><span style=\"color: #008080;\">80</span> <span style=\"color: #000000;\"> err_free_evdev:\n</span><span style=\"color: #008080;\">81</span>     put_device(&amp;evdev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">82</span> <span style=\"color: #000000;\"> err_free_minor:\n</span><span style=\"color: #008080;\">83</span> <span style=\"color: #000000;\">    input_free_minor(minor);\n</span><span style=\"color: #008080;\">84</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">85</span> }</pre>\n</div>\n<p>over</p>\n<h1>4.应用层的角度分析到底层</h1>\n<p>evdev_read（）---------------------------》wait_event_interruptible(evdev-&gt;wait,client-&gt;packet_head != client-&gt;tail || !evdev-&gt;exist || client-&gt;revoked);等待evdev-&gt;wait唤醒</p>\n<p>　　evdev_pass_values-----------------------》wake_up_interruptible(&amp;evdev-&gt;wait);</p>\n<p>　　　　evdev_events---------------------------》evdev_pass_values(client, vals, count, ev_time);<br>　　　　　　evdev_event----------------------------》evdev_events(handle, vals, 1);</p>\n<p>　　　　　　　　static struct input_handler evdev_handler = {<br>&nbsp;&nbsp; 　　　　　　　　&nbsp;.event&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;= evdev_event,<br>&nbsp;&nbsp; &nbsp;　　　　　　　　.events&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;= evdev_events,<br>&nbsp;&nbsp; 　　　　　　　　&nbsp;.connect&nbsp;&nbsp; &nbsp;= evdev_connect,<br>&nbsp;&nbsp; &nbsp;　　　　　　　　.disconnect&nbsp;&nbsp; &nbsp;= evdev_disconnect,<br>&nbsp;&nbsp; 　　　　　　　　&nbsp;.legacy_minors&nbsp;&nbsp; &nbsp;= true,<br>&nbsp;&nbsp; &nbsp;　　　　　　　　.minor&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;= EVDEV_MINOR_BASE,<br>&nbsp;&nbsp; &nbsp;　　　　　　　　.name&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;= \"evdev\",<br>&nbsp;&nbsp; &nbsp;　　　　　　　　.id_table&nbsp;&nbsp; &nbsp;= evdev_ids,<br>　　　　　　　　};</p>\n<p>　　　　　　　　input_to_handler-----------------------------》　　 if (handler-&gt;events)<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　handler-&gt;events(handle, vals, count);<br>&nbsp;&nbsp; &nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　else if (handler-&gt;event)<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　for (v = vals; v != vals + count; v++)<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　&nbsp;handler-&gt;event(handle, v-&gt;type, v-&gt;code, v-&gt;value);</p>\n<p>　　　　　　input_pass_values--------------------------------》count = input_to_handler(handle, vals, count);</p>\n<p>　　input_handle_event----------------------------》input_pass_values(dev, dev-&gt;vals, dev-&gt;num_vals);</p>\n</div>\n<p>input_event----------------------------------------》input_handle_event(dev, type, code, value);</p>\n<p>显然，就是input_dev通过输入核心为驱动层提供统一的接口，<code>input_event</code>，来向事件处理层上报数据并唤醒。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n</div>\n</div>\n","site":{"data":{"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<div>\n<div>\n<ul>\n<li>\n<blockquote>\n<h5>Input driver ：主要实现对硬件设备的读写访问，中断设置，并把硬件产生的事件转换为核心层定义的规范提交给事件处理层。</h5>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<h5>Input core ：承上启下。为设备驱动层提供了规范和接口；通知事件处理层对事件进行处理；</h5>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<h5>Event handler ：提供用户编程的接口（设备节点），并处理驱动层提交的数据处理。</h5>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/.com//2909691-20220819093409715-1604400596.png\" alt></p>\n<h1>1输入子系统框架分析</h1>\n<div>\n<div>\n<h2>1.1设备驱动层（Input driver）</h2>\n<ul>\n<li>device是纯硬件操作层，包含不同的硬件接口处理，如gpio等</li>\n<li>对于每种不同的具体硬件操作，都对应着不同的input_dev结构体</li>\n<li>该结构体内部也包含着一个h_list，指向handle</li>\n</ul>\n</div>\n</div>\n<div>\n<div>\n<div>\n<div>\n<h2>1.2.系统核心层（Input core）</h2>\n<ul>\n<li>申请主设备号;</li>\n<li>提供input_register_device跟input_register_handler函数分别用于注册device跟handler;</li>\n<li>提供input_register_handle函数用于注册一个事件处理，代表一个成功配对的input_dev和input_handler;</li>\n</ul>\n</div>\n</div>\n<h2>1.3.事件处理层（Event handler）</h2>\n<ul>\n<li>不涉及硬件方面的具体操作，handler层是纯软件层，包含不同的解决方案，如键盘，鼠标，游戏手柄等；</li>\n<li>对于不同的解决方案，都包含一个名为input_handler的结构体，该结构体内含的主要成员如下：</li>\n</ul>\n<table>\n<thead>\n<tr><th>成员</th><th>功能</th></tr>\n</thead>\n<tbody>\n<tr>\n<td>.id_table</td>\n<td>一个存放该handler所支持的设备id的表（其实内部存放的是EV_xxx事件,用于判断device是否支持该事件）</td>\n</tr>\n<tr>\n<td>.fops</td>\n<td>该handler的file_operation</td>\n</tr>\n<tr>\n<td>.connect</td>\n<td>连接该handler跟所支持device的函数</td>\n</tr>\n<tr>\n<td>.disconnect</td>\n<td>断开该连接</td>\n</tr>\n<tr>\n<td>.event</td>\n<td>事件处理函数，让device调用</td>\n</tr>\n<tr>\n<td>h_list</td>\n<td>是一个链表，该链表保存着该handler到所支持的所有device的中间站：handle结构体的指针</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1>2.两条链表连接dev和handler</h1>\n<div class=\"cnblogs_code\">\n<pre>#file pwd: drivers/input/input.c<br><br>MODULE_AUTHOR(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Vojtech Pavlik &lt;vojtech@suse.cz&gt;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\nMODULE_DESCRIPTION(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Input core</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\nMODULE_LICENSE(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">GPL</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n\n<p></p></span><span style=\"color: #0000ff;\">#define</span> INPUT_MAX_CHAR_DEVICES        1024<br><span style=\"color: #0000ff;\">#define</span> INPUT_FIRST_DYNAMIC_DEV        256<br><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> DEFINE_IDA(input_ida);<p></p>\n<p></p></span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> LIST_HEAD(input_dev_list);<br></span><span style=\"color: #0000ff;\">static</span> LIST_HEAD(input_handler_list);</pre><p></p>\n</div>\n在input.c文件中两个全局链表input_handler_list和<span style=\"color: #000000;\">input_dev_list</span>，通过handle相互关联：</div>\n<div><img src=\"/.com//2909691-20220819094250974-180404869.webp\" alt>\n<p>&nbsp;</p>\n<h1>3.输入子系统代码分析</h1>\n<p>文件路径：driver/input/input.c （核心层）</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">int</span> __init input_init(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> err;\n</span><span style=\"color: #008080;\"> 4</span> \n<span style=\"color: #008080;\"> 5</span>     err = class_register(&amp;<span style=\"color: #000000;\">input_class);  <code class=\"  language-cpp\"><span class=\"token comment\">//在/sys/class下创建逻辑（input）类，在类下面挂载input设备</span></code>\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (err) {\n</span><span style=\"color: #008080;\"> 7</span>         pr_err(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">unable to register input_dev class\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> err;\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">10</span> \n<span style=\"color: #008080;\">11</span>     err =<span style=\"color: #000000;\"> input_proc_init();　　<code class=\"  language-cpp\"><span class=\"token punctuation\"><span class=\"token comment\">//在/proc下面建立相关的虚拟文件，proc下创建的文件可以看作是虚拟文件对内核读写的一种操作</span></span></code>\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (err)\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> fail1;\n</span><span style=\"color: #008080;\">14</span> \n<span style=\"color: #008080;\">15</span>     err = register_chrdev_region(MKDEV(INPUT_MAJOR, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">),//在/dev下创建input设备号\n</span><span style=\"color: #008080;\">16</span>                      INPUT_MAX_CHAR_DEVICES, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">input</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">17</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (err) {\n</span><span style=\"color: #008080;\">18</span>         pr_err(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">unable to register char major %d</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, INPUT_MAJOR);\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> fail2;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">21</span> \n<span style=\"color: #008080;\">22</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span> \n<span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\"> fail2:    input_proc_exit();\n</span><span style=\"color: #008080;\">25</span>  fail1:    class_unregister(&amp;<span style=\"color: #000000;\">input_class);\n</span><span style=\"color: #008080;\">26</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> err;\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">28</span> \n<span style=\"color: #008080;\">29</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span> __exit input_exit(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">    input_proc_exit();\n</span><span style=\"color: #008080;\">32</span>     unregister_chrdev_region(MKDEV(INPUT_MAJOR, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">),\n</span><span style=\"color: #008080;\">33</span> <span style=\"color: #000000;\">                 INPUT_MAX_CHAR_DEVICES);\n</span><span style=\"color: #008080;\">34</span>     class_unregister(&amp;<span style=\"color: #000000;\">input_class);\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">36</span> \n<span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">subsys_initcall(input_init);\n</span><span style=\"color: #008080;\">38</span> module_exit(input_exit);</pre>\n</div>\n<p>现在基本框架已经建成，如何往input系统里面注册dev和hanlder呢？</p>\n<h2>3.1注册dev</h2>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\">  2</span> <span style=\"color: #008000;\"> * struct input_dev - represents an input device\n</span><span style=\"color: #008080;\">  3</span> <span style=\"color: #008000;\"> * @name: name of the device\n</span><span style=\"color: #008080;\">  4</span> <span style=\"color: #008000;\"> * @phys: physical path to the device in the system hierarchy\n</span><span style=\"color: #008080;\">  5</span> <span style=\"color: #008000;\"> * @uniq: unique identification code for the device (if device has it)\n</span><span style=\"color: #008080;\">  6</span> <span style=\"color: #008000;\"> * @id: id of the device (struct input_id)\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #008000;\"> * @propbit: bitmap of device properties and quirks\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #008000;\"> * @evbit: bitmap of types of events supported by the device (EV_KEY,\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #008000;\"> *    EV_REL, etc.)\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #008000;\"> * @keybit: bitmap of keys/buttons this device has\n</span><span style=\"color: #008080;\"> 11</span> <span style=\"color: #008000;\"> * @relbit: bitmap of relative axes for the device\n</span><span style=\"color: #008080;\"> 12</span> <span style=\"color: #008000;\"> * @absbit: bitmap of absolute axes for the device\n</span><span style=\"color: #008080;\"> 13</span> <span style=\"color: #008000;\"> * @mscbit: bitmap of miscellaneous events supported by the device\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #008000;\"> * @ledbit: bitmap of leds present on the device\n</span><span style=\"color: #008080;\"> 15</span> <span style=\"color: #008000;\"> * @sndbit: bitmap of sound effects supported by the device\n</span><span style=\"color: #008080;\"> 16</span> <span style=\"color: #008000;\"> * @ffbit: bitmap of force feedback effects supported by the device\n</span><span style=\"color: #008080;\"> 17</span> <span style=\"color: #008000;\"> * @swbit: bitmap of switches present on the device\n</span><span style=\"color: #008080;\"> 18</span> <span style=\"color: #008000;\"> * @hint_events_per_packet: average number of events generated by the\n</span><span style=\"color: #008080;\"> 19</span> <span style=\"color: #008000;\"> *    device in a packet (between EV_SYN/SYN_REPORT events). Used by\n</span><span style=\"color: #008080;\"> 20</span> <span style=\"color: #008000;\"> *    event handlers to estimate size of the buffer needed to hold\n</span><span style=\"color: #008080;\"> 21</span> <span style=\"color: #008000;\"> *    events.\n</span><span style=\"color: #008080;\"> 22</span> <span style=\"color: #008000;\"> * @keycodemax: size of keycode table\n</span><span style=\"color: #008080;\"> 23</span> <span style=\"color: #008000;\"> * @keycodesize: size of elements in keycode table\n</span><span style=\"color: #008080;\"> 24</span> <span style=\"color: #008000;\"> * @keycode: map of scancodes to keycodes for this device\n</span><span style=\"color: #008080;\"> 25</span> <span style=\"color: #008000;\"> * @getkeycode: optional legacy method to retrieve current keymap.\n</span><span style=\"color: #008080;\"> 26</span> <span style=\"color: #008000;\"> * @setkeycode: optional method to alter current keymap, used to implement\n</span><span style=\"color: #008080;\"> 27</span> <span style=\"color: #008000;\"> *    sparse keymaps. If not supplied default mechanism will be used.\n</span><span style=\"color: #008080;\"> 28</span> <span style=\"color: #008000;\"> *    The method is being called while holding event_lock and thus must\n</span><span style=\"color: #008080;\"> 29</span> <span style=\"color: #008000;\"> *    not sleep\n</span><span style=\"color: #008080;\"> 30</span> <span style=\"color: #008000;\"> * @ff: force feedback structure associated with the device if device\n</span><span style=\"color: #008080;\"> 31</span> <span style=\"color: #008000;\"> *    supports force feedback effects\n</span><span style=\"color: #008080;\"> 32</span> <span style=\"color: #008000;\"> * @repeat_key: stores key code of the last key pressed; used to implement\n</span><span style=\"color: #008080;\"> 33</span> <span style=\"color: #008000;\"> *    software autorepeat\n</span><span style=\"color: #008080;\"> 34</span> <span style=\"color: #008000;\"> * @timer: timer for software autorepeat\n</span><span style=\"color: #008080;\"> 35</span> <span style=\"color: #008000;\"> * @rep: current values for autorepeat parameters (delay, rate)\n</span><span style=\"color: #008080;\"> 36</span> <span style=\"color: #008000;\"> * @mt: pointer to multitouch state\n</span><span style=\"color: #008080;\"> 37</span> <span style=\"color: #008000;\"> * @absinfo: array of &amp;struct input_absinfo elements holding information\n</span><span style=\"color: #008080;\"> 38</span> <span style=\"color: #008000;\"> *    about absolute axes (current value, min, max, flat, fuzz,\n</span><span style=\"color: #008080;\"> 39</span> <span style=\"color: #008000;\"> *    resolution)\n</span><span style=\"color: #008080;\"> 40</span> <span style=\"color: #008000;\"> * @key: reflects current state of device's keys/buttons\n</span><span style=\"color: #008080;\"> 41</span> <span style=\"color: #008000;\"> * @led: reflects current state of device's LEDs\n</span><span style=\"color: #008080;\"> 42</span> <span style=\"color: #008000;\"> * @snd: reflects current state of sound effects\n</span><span style=\"color: #008080;\"> 43</span> <span style=\"color: #008000;\"> * @sw: reflects current state of device's switches\n</span><span style=\"color: #008080;\"> 44</span> <span style=\"color: #008000;\"> * @open: this method is called when the very first user calls\n</span><span style=\"color: #008080;\"> 45</span> <span style=\"color: #008000;\"> *    input_open_device(). The driver must prepare the device\n</span><span style=\"color: #008080;\"> 46</span> <span style=\"color: #008000;\"> *    to start generating events (start polling thread,\n</span><span style=\"color: #008080;\"> 47</span> <span style=\"color: #008000;\"> *    request an IRQ, submit URB, etc.)\n</span><span style=\"color: #008080;\"> 48</span> <span style=\"color: #008000;\"> * @close: this method is called when the very last user calls\n</span><span style=\"color: #008080;\"> 49</span> <span style=\"color: #008000;\"> *    input_close_device().\n</span><span style=\"color: #008080;\"> 50</span> <span style=\"color: #008000;\"> * @flush: purges the device. Most commonly used to get rid of force\n</span><span style=\"color: #008080;\"> 51</span> <span style=\"color: #008000;\"> *    feedback effects loaded into the device when disconnecting\n</span><span style=\"color: #008080;\"> 52</span> <span style=\"color: #008000;\"> *    from it\n</span><span style=\"color: #008080;\"> 53</span> <span style=\"color: #008000;\"> * @event: event handler for events sent _to_ the device, like EV_LED\n</span><span style=\"color: #008080;\"> 54</span> <span style=\"color: #008000;\"> *    or EV_SND. The device is expected to carry out the requested\n</span><span style=\"color: #008080;\"> 55</span> <span style=\"color: #008000;\"> *    action (turn on a LED, play sound, etc.) The call is protected\n</span><span style=\"color: #008080;\"> 56</span> <span style=\"color: #008000;\"> *    by @event_lock and must not sleep\n</span><span style=\"color: #008080;\"> 57</span> <span style=\"color: #008000;\"> * @grab: input handle that currently has the device grabbed (via\n</span><span style=\"color: #008080;\"> 58</span> <span style=\"color: #008000;\"> *    EVIOCGRAB ioctl). When a handle grabs a device it becomes sole\n</span><span style=\"color: #008080;\"> 59</span> <span style=\"color: #008000;\"> *    recipient for all input events coming from the device\n</span><span style=\"color: #008080;\"> 60</span> <span style=\"color: #008000;\"> * @event_lock: this spinlock is is taken when input core receives\n</span><span style=\"color: #008080;\"> 61</span> <span style=\"color: #008000;\"> *    and processes a new event for the device (in input_event()).\n</span><span style=\"color: #008080;\"> 62</span> <span style=\"color: #008000;\"> *    Code that accesses and/or modifies parameters of a device\n</span><span style=\"color: #008080;\"> 63</span> <span style=\"color: #008000;\"> *    (such as keymap or absmin, absmax, absfuzz, etc.) after device\n</span><span style=\"color: #008080;\"> 64</span> <span style=\"color: #008000;\"> *    has been registered with input core must take this lock.\n</span><span style=\"color: #008080;\"> 65</span> <span style=\"color: #008000;\"> * @mutex: serializes calls to open(), close() and flush() methods\n</span><span style=\"color: #008080;\"> 66</span> <span style=\"color: #008000;\"> * @users: stores number of users (input handlers) that opened this\n</span><span style=\"color: #008080;\"> 67</span> <span style=\"color: #008000;\"> *    device. It is used by input_open_device() and input_close_device()\n</span><span style=\"color: #008080;\"> 68</span> <span style=\"color: #008000;\"> *    to make sure that dev-&gt;open() is only called when the first\n</span><span style=\"color: #008080;\"> 69</span> <span style=\"color: #008000;\"> *    user opens device and dev-&gt;close() is called when the very\n</span><span style=\"color: #008080;\"> 70</span> <span style=\"color: #008000;\"> *    last user closes the device\n</span><span style=\"color: #008080;\"> 71</span> <span style=\"color: #008000;\"> * @going_away: marks devices that are in a middle of unregistering and\n</span><span style=\"color: #008080;\"> 72</span> <span style=\"color: #008000;\"> *    causes input_open_device*() fail with -ENODEV.\n</span><span style=\"color: #008080;\"> 73</span> <span style=\"color: #008000;\"> * @dev: driver model's view of this device\n</span><span style=\"color: #008080;\"> 74</span> <span style=\"color: #008000;\"> * @h_list: list of input handles associated with the device. When\n</span><span style=\"color: #008080;\"> 75</span> <span style=\"color: #008000;\"> *    accessing the list dev-&gt;mutex must be held\n</span><span style=\"color: #008080;\"> 76</span> <span style=\"color: #008000;\"> * @node: used to place the device onto input_dev_list\n</span><span style=\"color: #008080;\"> 77</span> <span style=\"color: #008000;\"> * @num_vals: number of values queued in the current frame\n</span><span style=\"color: #008080;\"> 78</span> <span style=\"color: #008000;\"> * @max_vals: maximum number of values queued in a frame\n</span><span style=\"color: #008080;\"> 79</span> <span style=\"color: #008000;\"> * @vals: array of values queued in the current frame\n</span><span style=\"color: #008080;\"> 80</span> <span style=\"color: #008000;\"> * @devres_managed: indicates that devices is managed with devres framework\n</span><span style=\"color: #008080;\"> 81</span> <span style=\"color: #008000;\"> *    and needs not be explicitly unregistered or freed.\n</span><span style=\"color: #008080;\"> 82</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 83</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> input_dev {\n</span><span style=\"color: #008080;\"> 84</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">name;\n</span><span style=\"color: #008080;\"> 85</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">phys;\n</span><span style=\"color: #008080;\"> 86</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">uniq;\n</span><span style=\"color: #008080;\"> 87</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> input_id id;\n</span><span style=\"color: #008080;\"> 88</span> \n<span style=\"color: #008080;\"> 89</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> propbit[BITS_TO_LONGS(INPUT_PROP_CNT)];\n</span><span style=\"color: #008080;\"> 90</span> \n<span style=\"color: #008080;\"> 91</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> evbit[BITS_TO_LONGS(EV_CNT)];\n</span><span style=\"color: #008080;\"> 92</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> keybit[BITS_TO_LONGS(KEY_CNT)];\n</span><span style=\"color: #008080;\"> 93</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> relbit[BITS_TO_LONGS(REL_CNT)];\n</span><span style=\"color: #008080;\"> 94</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> absbit[BITS_TO_LONGS(ABS_CNT)];\n</span><span style=\"color: #008080;\"> 95</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> mscbit[BITS_TO_LONGS(MSC_CNT)];\n</span><span style=\"color: #008080;\"> 96</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> ledbit[BITS_TO_LONGS(LED_CNT)];\n</span><span style=\"color: #008080;\"> 97</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> sndbit[BITS_TO_LONGS(SND_CNT)];\n</span><span style=\"color: #008080;\"> 98</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> ffbit[BITS_TO_LONGS(FF_CNT)];\n</span><span style=\"color: #008080;\"> 99</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> swbit[BITS_TO_LONGS(SW_CNT)];\n</span><span style=\"color: #008080;\">100</span> \n<span style=\"color: #008080;\">101</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> hint_events_per_packet;\n</span><span style=\"color: #008080;\">102</span> \n<span style=\"color: #008080;\">103</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> keycodemax;\n</span><span style=\"color: #008080;\">104</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> keycodesize;\n</span><span style=\"color: #008080;\">105</span>     <span style=\"color: #0000ff;\">void</span> *<span style=\"color: #000000;\">keycode;\n</span><span style=\"color: #008080;\">106</span> \n<span style=\"color: #008080;\">107</span>     <span style=\"color: #0000ff;\">int</span> (*setkeycode)(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev,\n</span><span style=\"color: #008080;\">108</span>               <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">struct</span> input_keymap_entry *<span style=\"color: #000000;\">ke,\n</span><span style=\"color: #008080;\">109</span>               unsigned <span style=\"color: #0000ff;\">int</span> *<span style=\"color: #000000;\">old_keycode);\n</span><span style=\"color: #008080;\">110</span>     <span style=\"color: #0000ff;\">int</span> (*getkeycode)(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev,\n</span><span style=\"color: #008080;\">111</span>               <span style=\"color: #0000ff;\">struct</span> input_keymap_entry *<span style=\"color: #000000;\">ke);\n</span><span style=\"color: #008080;\">112</span> \n<span style=\"color: #008080;\">113</span>     <span style=\"color: #0000ff;\">struct</span> ff_device *<span style=\"color: #000000;\">ff;\n</span><span style=\"color: #008080;\">114</span> \n<span style=\"color: #008080;\">115</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> repeat_key;\n</span><span style=\"color: #008080;\">116</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> timer_list timer;\n</span><span style=\"color: #008080;\">117</span> \n<span style=\"color: #008080;\">118</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> rep[REP_CNT];\n</span><span style=\"color: #008080;\">119</span> \n<span style=\"color: #008080;\">120</span>     <span style=\"color: #0000ff;\">struct</span> input_mt *<span style=\"color: #000000;\">mt;\n</span><span style=\"color: #008080;\">121</span> \n<span style=\"color: #008080;\">122</span>     <span style=\"color: #0000ff;\">struct</span> input_absinfo *<span style=\"color: #000000;\">absinfo;\n</span><span style=\"color: #008080;\">123</span> \n<span style=\"color: #008080;\">124</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> key[BITS_TO_LONGS(KEY_CNT)];\n</span><span style=\"color: #008080;\">125</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> led[BITS_TO_LONGS(LED_CNT)];\n</span><span style=\"color: #008080;\">126</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> snd[BITS_TO_LONGS(SND_CNT)];\n</span><span style=\"color: #008080;\">127</span>     unsigned <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> sw[BITS_TO_LONGS(SW_CNT)];\n</span><span style=\"color: #008080;\">128</span> \n<span style=\"color: #008080;\">129</span>     <span style=\"color: #0000ff;\">int</span> (*open)(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">130</span>     <span style=\"color: #0000ff;\">void</span> (*close)(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">131</span>     <span style=\"color: #0000ff;\">int</span> (*flush)(<span style=\"color: #0000ff;\">struct</span> input_dev *dev, <span style=\"color: #0000ff;\">struct</span> file *<span style=\"color: #000000;\">file);\n</span><span style=\"color: #008080;\">132</span>     <span style=\"color: #0000ff;\">int</span> (*<span style=\"color: #0000ff;\">event</span>)(<span style=\"color: #0000ff;\">struct</span> input_dev *dev, unsigned <span style=\"color: #0000ff;\">int</span> type, unsigned <span style=\"color: #0000ff;\">int</span> code, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> value);\n</span><span style=\"color: #008080;\">133</span> \n<span style=\"color: #008080;\">134</span>     <span style=\"color: #0000ff;\">struct</span> input_handle __rcu *<span style=\"color: #000000;\">grab;\n</span><span style=\"color: #008080;\">135</span> \n<span style=\"color: #008080;\">136</span> <span style=\"color: #000000;\">    spinlock_t event_lock;\n</span><span style=\"color: #008080;\">137</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> mutex mutex;\n</span><span style=\"color: #008080;\">138</span> \n<span style=\"color: #008080;\">139</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> users;\n</span><span style=\"color: #008080;\">140</span>     <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> going_away;\n</span><span style=\"color: #008080;\">141</span> \n<span style=\"color: #008080;\">142</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> device dev;\n</span><span style=\"color: #008080;\">143</span> \n<span style=\"color: #008080;\">144</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> list_head    h_list;\n</span><span style=\"color: #008080;\">145</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> list_head    node;\n</span><span style=\"color: #008080;\">146</span> \n<span style=\"color: #008080;\">147</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> num_vals;\n</span><span style=\"color: #008080;\">148</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> max_vals;\n</span><span style=\"color: #008080;\">149</span>     <span style=\"color: #0000ff;\">struct</span> input_value *<span style=\"color: #000000;\">vals;\n</span><span style=\"color: #008080;\">150</span> \n<span style=\"color: #008080;\">151</span>     <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> devres_managed;\n</span><span style=\"color: #008080;\">152</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">153</span> <span style=\"color: #0000ff;\">#define</span> to_input_dev(d) container_of(d, struct input_dev, dev)</pre>\n</div>\n<p>&nbsp;</p>\n<div>\n<div>&nbsp;</div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\">  2</span> <span style=\"color: #008000;\"> * input_register_device - register device with input core\n</span><span style=\"color: #008080;\">  3</span> <span style=\"color: #008000;\"> * @dev: device to be registered\n</span><span style=\"color: #008080;\">  4</span> <span style=\"color: #008000;\"> *\n</span><span style=\"color: #008080;\">  5</span> <span style=\"color: #008000;\"> * This function registers device with input core. The device must be\n</span><span style=\"color: #008080;\">  6</span> <span style=\"color: #008000;\"> * allocated with input_allocate_device() and all it's capabilities\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #008000;\"> * set up before registering.\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #008000;\"> * If function fails the device must be freed with input_free_device().\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #008000;\"> * Once device has been successfully registered it can be unregistered\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #008000;\"> * with input_unregister_device(); input_free_device() should not be\n</span><span style=\"color: #008080;\"> 11</span> <span style=\"color: #008000;\"> * called in this case.\n</span><span style=\"color: #008080;\"> 12</span> <span style=\"color: #008000;\"> *\n</span><span style=\"color: #008080;\"> 13</span> <span style=\"color: #008000;\"> * Note that this function is also used to register managed input devices\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #008000;\"> * (ones allocated with devm_input_allocate_device()). Such managed input\n</span><span style=\"color: #008080;\"> 15</span> <span style=\"color: #008000;\"> * devices need not be explicitly unregistered or freed, their tear down\n</span><span style=\"color: #008080;\"> 16</span> <span style=\"color: #008000;\"> * is controlled by the devres infrastructure. It is also worth noting\n</span><span style=\"color: #008080;\"> 17</span> <span style=\"color: #008000;\"> * that tear down of managed input devices is internally a 2-step process:\n</span><span style=\"color: #008080;\"> 18</span> <span style=\"color: #008000;\"> * registered managed input device is first unregistered, but stays in\n</span><span style=\"color: #008080;\"> 19</span> <span style=\"color: #008000;\"> * memory and can still handle input_event() calls (although events will\n</span><span style=\"color: #008080;\"> 20</span> <span style=\"color: #008000;\"> * not be delivered anywhere). The freeing of managed input device will\n</span><span style=\"color: #008080;\"> 21</span> <span style=\"color: #008000;\"> * happen later, when devres stack is unwound to the point where device\n</span><span style=\"color: #008080;\"> 22</span> <span style=\"color: #008000;\"> * allocation was made.\n</span><span style=\"color: #008080;\"> 23</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 24</span> <span style=\"color: #0000ff;\">int</span> input_register_device(<span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev)\n</span><span style=\"color: #008080;\"> 25</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 26</span>     <span style=\"color: #0000ff;\">struct</span> input_devres *devres =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\"> 27</span>      <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 输入事件的处理接口指针，用于和设备的事件类型进行匹配 </span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\"> 28</span>     <span style=\"color: #0000ff;\">struct</span> input_handler *<span style=\"color: #000000;\">handler;\n</span><span style=\"color: #008080;\"> 29</span>     unsigned <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> packet_size;\n</span><span style=\"color: #008080;\"> 30</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">path;\n</span><span style=\"color: #008080;\"> 31</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\"> 32</span> \n<span style=\"color: #008080;\"> 33</span>     <span style=\"color: #0000ff;\">if</span> (dev-&gt;<span style=\"color: #000000;\">devres_managed) {\n</span><span style=\"color: #008080;\"> 34</span>         devres =<span style=\"color: #000000;\"> devres_alloc(devm_input_device_unregister,\n</span><span style=\"color: #008080;\"> 35</span>                       <span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> input_devres), GFP_KERNEL);\n</span><span style=\"color: #008080;\"> 36</span>         <span style=\"color: #0000ff;\">if</span> (!<span style=\"color: #000000;\">devres)\n</span><span style=\"color: #008080;\"> 37</span>             <span style=\"color: #0000ff;\">return</span> -<span style=\"color: #000000;\">ENOMEM;\n</span><span style=\"color: #008080;\"> 38</span> \n<span style=\"color: #008080;\"> 39</span>         devres-&gt;input =<span style=\"color: #000000;\"> dev;\n</span><span style=\"color: #008080;\"> 40</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 41</span> \n<span style=\"color: #008080;\"> 42</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Every input device generates EV_SYN/SYN_REPORT events. </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 43</span>     __set_bit(EV_SYN, dev-&gt;<span style=\"color: #000000;\">evbit);\n</span><span style=\"color: #008080;\"> 44</span> \n<span style=\"color: #008080;\"> 45</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> KEY_RESERVED is not supposed to be transmitted to userspace. </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 46</span>     __clear_bit(KEY_RESERVED, dev-&gt;<span style=\"color: #000000;\">keybit);\n</span><span style=\"color: #008080;\"> 47</span> \n<span style=\"color: #008080;\"> 48</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Make sure that bitmasks not mentioned in dev-&gt;evbit are clean. </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 49</span> <span style=\"color: #000000;\">    input_cleanse_bitmasks(dev);\n</span><span style=\"color: #008080;\"> 50</span> \n<span style=\"color: #008080;\"> 51</span>     packet_size =<span style=\"color: #000000;\"> input_estimate_events_per_packet(dev);\n</span><span style=\"color: #008080;\"> 52</span>     <span style=\"color: #0000ff;\">if</span> (dev-&gt;hint_events_per_packet &lt;<span style=\"color: #000000;\"> packet_size)\n</span><span style=\"color: #008080;\"> 53</span>         dev-&gt;hint_events_per_packet =<span style=\"color: #000000;\"> packet_size;\n</span><span style=\"color: #008080;\"> 54</span> \n<span style=\"color: #008080;\"> 55</span>     dev-&gt;max_vals = dev-&gt;hint_events_per_packet + <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 56</span>     dev-&gt;vals = kcalloc(dev-&gt;max_vals, <span style=\"color: #0000ff;\">sizeof</span>(*dev-&gt;<span style=\"color: #000000;\">vals), GFP_KERNEL);\n</span><span style=\"color: #008080;\"> 57</span>     <span style=\"color: #0000ff;\">if</span> (!dev-&gt;<span style=\"color: #000000;\">vals) {\n</span><span style=\"color: #008080;\"> 58</span>         error = -<span style=\"color: #000000;\">ENOMEM;\n</span><span style=\"color: #008080;\"> 59</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_devres_free;\n</span><span style=\"color: #008080;\"> 60</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 61</span> \n<span style=\"color: #008080;\"> 62</span>     <span style=\"color: #008000;\">/*</span>\n<span style=\"color: #008080;\"> 63</span> <span style=\"color: #008000;\">     * If delay and period are pre-set by the driver, then autorepeating\n</span><span style=\"color: #008080;\"> 64</span> <span style=\"color: #008000;\">     * is handled by the driver itself and we don't do it in input.c.\n</span><span style=\"color: #008080;\"> 65</span>      <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 66</span>     <span style=\"color: #0000ff;\">if</span> (!dev-&gt;rep[REP_DELAY] &amp;&amp; !dev-&gt;<span style=\"color: #000000;\">rep[REP_PERIOD]) {\n</span><span style=\"color: #008080;\"> 67</span>         dev-&gt;timer.data = (<span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\">) dev;\n</span><span style=\"color: #008080;\"> 68</span>         dev-&gt;timer.function =<span style=\"color: #000000;\"> input_repeat_key;\n</span><span style=\"color: #008080;\"> 69</span>         dev-&gt;rep[REP_DELAY] = <span style=\"color: #800080;\">250</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 70</span>         dev-&gt;rep[REP_PERIOD] = <span style=\"color: #800080;\">33</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 71</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 72</span> \n<span style=\"color: #008080;\"> 73</span>     <span style=\"color: #0000ff;\">if</span> (!dev-&gt;<span style=\"color: #000000;\">getkeycode)\n</span><span style=\"color: #008080;\"> 74</span>         dev-&gt;getkeycode =<span style=\"color: #000000;\"> input_default_getkeycode;\n</span><span style=\"color: #008080;\"> 75</span> \n<span style=\"color: #008080;\"> 76</span>     <span style=\"color: #0000ff;\">if</span> (!dev-&gt;<span style=\"color: #000000;\">setkeycode)\n</span><span style=\"color: #008080;\"> 77</span>         dev-&gt;setkeycode =<span style=\"color: #000000;\"> input_default_setkeycode;\n</span><span style=\"color: #008080;\"> 78</span> \n<span style=\"color: #008080;\"> 79</span>     error = device_add(&amp;dev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\"> 80</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\"> 81</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_free_vals;\n</span><span style=\"color: #008080;\"> 82</span> \n<span style=\"color: #008080;\"> 83</span>     path = kobject_get_path(&amp;dev-&gt;<span style=\"color: #000000;\">dev.kobj, GFP_KERNEL);\n</span><span style=\"color: #008080;\"> 84</span>     pr_info(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%s as %s\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\"> 85</span>         dev-&gt;name ? dev-&gt;name : <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Unspecified device</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\"> 86</span>         path ? path : <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">N/A</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 87</span> <span style=\"color: #000000;\">    kfree(path);\n</span><span style=\"color: #008080;\"> 88</span> \n<span style=\"color: #008080;\"> 89</span>     error = mutex_lock_interruptible(&amp;<span style=\"color: #000000;\">input_mutex);\n</span><span style=\"color: #008080;\"> 90</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\"> 91</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_device_del;\n</span><span style=\"color: #008080;\"> 92</span>     \n<span style=\"color: #008080;\"> 93</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 重要:把设备挂到全局的input子系统设备链表input_dev_list上 </span><span style=\"color: #008000;\">*/</span>    \n<span style=\"color: #008080;\"> 94</span>     list_add_tail(&amp;dev-&gt;node, &amp;<span style=\"color: #000000;\">input_dev_list);\n</span><span style=\"color: #008080;\"> 95</span> \n<span style=\"color: #008080;\"> 96</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 核心重点，input设备在增加到input_dev_list链表上之后，会查找 \n</span><span style=\"color: #008080;\"> 97</span> <span style=\"color: #008000;\">     * input_handler_list事件处理链表上的handler进行匹配，这里的匹配 \n</span><span style=\"color: #008080;\"> 98</span> <span style=\"color: #008000;\">     * 方式与设备模型的device和driver匹配过程很相似</span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\"> 99</span>     list_for_each_entry(handler, &amp;<span style=\"color: #000000;\">input_handler_list, node)\n</span><span style=\"color: #008080;\">100</span>         input_attach_handler(dev, handler);<span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">遍历input_handler_list，通过input_match_device试图与每一个handler进行匹配 匹配上了就使用connect连接</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">101</span>     <span style=\"color: #008000;\">/*</span>\n<span style=\"color: #008080;\">102</span> <span style=\"color: #008000;\">    static int input_attach_handler(struct input_dev *dev, struct input_handler *handler)\n</span><span style=\"color: #008080;\">103</span> <span style=\"color: #008000;\">    {\n</span><span style=\"color: #008080;\">104</span> <span style=\"color: #008000;\">        const struct input_device_id *id;\n</span><span style=\"color: #008080;\">105</span> <span style=\"color: #008000;\">        int error;\n</span><span style=\"color: #008080;\">106</span> \n<span style=\"color: #008080;\">107</span> <span style=\"color: #008000;\">        id = input_match_device(handler, dev);\n</span><span style=\"color: #008080;\">108</span> <span style=\"color: #008000;\">        if (!id)\n</span><span style=\"color: #008080;\">109</span> <span style=\"color: #008000;\">            return -ENODEV;\n</span><span style=\"color: #008080;\">110</span> \n<span style=\"color: #008080;\">111</span> <span style=\"color: #008000;\">        error = handler-&gt;connect(handler, dev, id);\n</span><span style=\"color: #008080;\">112</span> <span style=\"color: #008000;\">        if (error &amp;&amp; error != -ENODEV)\n</span><span style=\"color: #008080;\">113</span> <span style=\"color: #008000;\">            pr_err(\"failed to attach handler %s to device %s, error: %d\\n\",\n</span><span style=\"color: #008080;\">114</span> <span style=\"color: #008000;\">                   handler-&gt;name, kobject_name(&amp;dev-&gt;dev.kobj), error);\n</span><span style=\"color: #008080;\">115</span> \n<span style=\"color: #008080;\">116</span> <span style=\"color: #008000;\">        return error;\n</span><span style=\"color: #008080;\">117</span> <span style=\"color: #008000;\">    }\n</span><span style=\"color: #008080;\">118</span>     <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">119</span>     \n<span style=\"color: #008080;\">120</span> <span style=\"color: #000000;\">    input_wakeup_procfs_readers();\n</span><span style=\"color: #008080;\">121</span> \n<span style=\"color: #008080;\">122</span>     mutex_unlock(&amp;<span style=\"color: #000000;\">input_mutex);\n</span><span style=\"color: #008080;\">123</span> \n<span style=\"color: #008080;\">124</span>     <span style=\"color: #0000ff;\">if</span> (dev-&gt;<span style=\"color: #000000;\">devres_managed) {\n</span><span style=\"color: #008080;\">125</span>         dev_dbg(dev-&gt;dev.parent, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%s: registering %s with devres.\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\">126</span>             __func__, dev_name(&amp;dev-&gt;<span style=\"color: #000000;\">dev));\n</span><span style=\"color: #008080;\">127</span>         devres_add(dev-&gt;<span style=\"color: #000000;\">dev.parent, devres);\n</span><span style=\"color: #008080;\">128</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">129</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">130</span> \n<span style=\"color: #008080;\">131</span> <span style=\"color: #000000;\">err_device_del:\n</span><span style=\"color: #008080;\">132</span>     device_del(&amp;dev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">133</span> <span style=\"color: #000000;\">err_free_vals:\n</span><span style=\"color: #008080;\">134</span>     kfree(dev-&gt;<span style=\"color: #000000;\">vals);\n</span><span style=\"color: #008080;\">135</span>     dev-&gt;vals =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">136</span> <span style=\"color: #000000;\">err_devres_free:\n</span><span style=\"color: #008080;\">137</span> <span style=\"color: #000000;\">    devres_free(devres);\n</span><span style=\"color: #008080;\">138</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">139</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">140</span> EXPORT_SYMBOL(input_register_device);</pre>\n</div>\n<h2>3.2注册handler</h2>\n<p>一般handler不需要我们自己写 内核里面已经有了很多的hanlder基本够用</p>\n下面以Evdev为例，来分析事件处理层。<br>\nvim drivers/input/evdev.c</div>\n<div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">struct</span> input_device_id evdev_ids[] =<span style=\"color: #000000;\"> {\n</span><span style=\"color: #008080;\"> 2</span>     { .driver_info = <span style=\"color: #800080;\">1</span> },    <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Matches all devices </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 3</span>     { },            <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Terminating zero entry </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 4</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 5</span> \n<span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">MODULE_DEVICE_TABLE(input, evdev_ids);\n</span><span style=\"color: #008080;\"> 7</span> \n<span style=\"color: #008080;\"> 8</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">struct</span> input_handler evdev_handler =<span style=\"color: #000000;\"> {\n</span><span style=\"color: #008080;\"> 9</span>     .<span style=\"color: #0000ff;\">event</span>        =<span style=\"color: #000000;\"> evdev_event,\n</span><span style=\"color: #008080;\">10</span>     .events        =<span style=\"color: #000000;\"> evdev_events,\n</span><span style=\"color: #008080;\">11</span>     .connect    =<span style=\"color: #000000;\"> evdev_connect,\n</span><span style=\"color: #008080;\">12</span>     .disconnect    =<span style=\"color: #000000;\"> evdev_disconnect,\n</span><span style=\"color: #008080;\">13</span>     .legacy_minors    = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\">14</span>     .minor        =<span style=\"color: #000000;\"> EVDEV_MINOR_BASE,\n</span><span style=\"color: #008080;\">15</span>     .name        = <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">evdev</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\">16</span>     .id_table    =<span style=\"color: #000000;\"> evdev_ids,\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">18</span> \n<span style=\"color: #008080;\">19</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">int</span> __init evdev_init(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">21</span>     <span style=\"color: #0000ff;\">return</span> input_register_handler(&amp;<span style=\"color: #000000;\">evdev_handler);\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">23</span> \n<span style=\"color: #008080;\">24</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span> __exit evdev_exit(<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">26</span>     input_unregister_handler(&amp;<span style=\"color: #000000;\">evdev_handler);\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">28</span> \n<span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">module_init(evdev_init);\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">module_exit(evdev_exit);\n</span><span style=\"color: #008080;\">31</span> \n<span style=\"color: #008080;\">32</span> MODULE_AUTHOR(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Vojtech Pavlik &lt;vojtech@ucw.cz&gt;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">33</span> MODULE_DESCRIPTION(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Input driver event char devices</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">34</span> MODULE_LICENSE(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">GPL</span><span style=\"color: #800000;\">\"</span>);</pre>\n</div>\n<p>注册的handler可以在proc/bus/input/danlder中查看到</p>\n</div>\n<p><img src=\"/.com//2909691-20220819102740731-2036281828.png\" alt></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * input_register_handler - register a new input handler\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * @handler: handler to be registered\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> * This function registers a new input handler (interface) for input\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> * devices in the system and attaches it to all input devices that\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * are compatible with the handler.\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">int</span> input_register_handler(<span style=\"color: #0000ff;\">struct</span> input_handler *<span style=\"color: #000000;\">handler)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">11</span>     <span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev;\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">13</span> \n<span style=\"color: #008080;\">14</span>     error = mutex_lock_interruptible(&amp;<span style=\"color: #000000;\">input_mutex);\n</span><span style=\"color: #008080;\">15</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">17</span> \n<span style=\"color: #008080;\">18</span>     INIT_LIST_HEAD(&amp;handler-&gt;<span style=\"color: #000000;\">h_list);\n</span><span style=\"color: #008080;\">19</span> 　　<code class=\"  language-rust\"><span class=\"token comment\">/* `重要`:把设备处理器挂到全局的input子系统设备链表input_handler_list上 */ </span></code>\n<span style=\"color: #008080;\">20</span>     list_add_tail(&amp;handler-&gt;node, &amp;<span style=\"color: #000000;\">input_handler_list);\n</span><span style=\"color: #008080;\">21</span> 　　<code class=\"  language-rust\"><span class=\"token comment\">/*遍历input_dev_list，试图与每一个input_dev进行匹配*/</span></code>\n<span style=\"color: #008080;\">22</span>     list_for_each_entry(dev, &amp;<span style=\"color: #000000;\">input_dev_list, node)\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">        input_attach_handler(dev, handler);<br>　　　　/*<br></span><code class=\"  language-objectivec\"><span class=\"token keyword\">static <span class=\"token keyword\">int <span class=\"token function\">input_attach_handler<span class=\"token punctuation\">(<span class=\"token keyword\">struct input_dev <span class=\"token operator\">*dev<span class=\"token punctuation\">, <span class=\"token keyword\">struct input_handler <span class=\"token operator\">*handler<span class=\"token punctuation\">)\n<span class=\"token punctuation\">{\n    <span class=\"token keyword\">const <span class=\"token keyword\">struct input_device_id <span class=\"token operator\">*id<span class=\"token punctuation\">;\n    <span class=\"token keyword\">int error<span class=\"token punctuation\">;\n\n<pre><code>&lt;span class=&quot;token comment&quot;&gt;/* 利用handler-&amp;gt;id_table和dev进行匹配*/\nid &lt;span class=&quot;token operator&quot;&gt;= &lt;span class=&quot;token function&quot;&gt;input_match_device&lt;span class=&quot;token punctuation&quot;&gt;(handler&lt;span class=&quot;token punctuation&quot;&gt;, dev&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;;\n&lt;span class=&quot;token keyword&quot;&gt;if &lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token operator&quot;&gt;!id&lt;span class=&quot;token punctuation&quot;&gt;)\n    &lt;span class=&quot;token keyword&quot;&gt;return &lt;span class=&quot;token operator&quot;&gt;-ENODEV&lt;span class=&quot;token punctuation&quot;&gt;;\n  &lt;span class=&quot;token comment&quot;&gt;/*匹配成功，则调用handler-&amp;gt;connect函数进行连接*/\nerror &lt;span class=&quot;token operator&quot;&gt;= handler&lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;span class=&quot;token function&quot;&gt;connect&lt;span class=&quot;token punctuation&quot;&gt;(handler&lt;span class=&quot;token punctuation&quot;&gt;, dev&lt;span class=&quot;token punctuation&quot;&gt;, id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;;\n&lt;span class=&quot;token keyword&quot;&gt;if &lt;span class=&quot;token punctuation&quot;&gt;(error &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp; error &lt;span class=&quot;token operator&quot;&gt;!= &lt;span class=&quot;token operator&quot;&gt;-ENODEV&lt;span class=&quot;token punctuation&quot;&gt;)\n    &lt;span class=&quot;token function&quot;&gt;pr_err&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token string&quot;&gt;&quot;failed to attach handler %s to device %s, error: %d\\n&quot;&lt;span class=&quot;token punctuation&quot;&gt;,\n           handler&lt;span class=&quot;token operator&quot;&gt;-&amp;gt;name&lt;span class=&quot;token punctuation&quot;&gt;, &lt;span class=&quot;token function&quot;&gt;kobject_name&lt;span class=&quot;token punctuation&quot;&gt;(&lt;span class=&quot;token operator&quot;&gt;&amp;amp;dev&lt;span class=&quot;token operator&quot;&gt;-&amp;gt;dev&lt;span class=&quot;token punctuation&quot;&gt;.kobj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;, error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;span class=&quot;token punctuation&quot;&gt;;\n\n&lt;span class=&quot;token keyword&quot;&gt;return error&lt;span class=&quot;token punctuation&quot;&gt;;</code></pre><p><span class=\"token punctuation\">}</span></p></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code><span style=\"color: #000000;\"><br>　　　　　　*/<br></span><span style=\"color: #008080;\">24</span><br><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    input_wakeup_procfs_readers();<br></span><span style=\"color: #008080;\">26</span><br><span style=\"color: #008080;\">27</span>     mutex_unlock(&amp;<span style=\"color: #000000;\">input_mutex);<br></span><span style=\"color: #008080;\">28</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;<br></span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">}<br></span><span style=\"color: #008080;\">30</span> EXPORT_SYMBOL(input_register_handler);</pre><p></p>\n</div>\n<p>这个过程和注册dev及其相似</p>\n<h2>3.3 handler的connect函数</h2>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">int</span> evdev_connect(<span style=\"color: #0000ff;\">struct</span> input_handler *handler, <span style=\"color: #0000ff;\">struct</span> input_dev *<span style=\"color: #000000;\">dev,\n</span><span style=\"color: #008080;\"> 2</span>              <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">struct</span> input_device_id *<span style=\"color: #000000;\">id)\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">struct</span> evdev *<span style=\"color: #000000;\">evdev;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> minor;\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> dev_no;\n</span><span style=\"color: #008080;\"> 7</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\"> 8</span>     \n<span style=\"color: #008080;\"> 9</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">申请一个新的次设备号</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span>     minor = input_get_new_minor(EVDEV_MINOR_BASE, EVDEV_MINORS, <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">11</span> \n<span style=\"color: #008080;\">12</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 这说明内核已经没办法再分配这种类型的设备了 </span><span style=\"color: #008000;\">*/</span> \n<span style=\"color: #008080;\">13</span>     <span style=\"color: #0000ff;\">if</span> (minor &lt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">) {\n</span><span style=\"color: #008080;\">14</span>         error =<span style=\"color: #000000;\"> minor;\n</span><span style=\"color: #008080;\">15</span>         pr_err(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">failed to reserve new minor: %d\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, error);\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">18</span> \n<span style=\"color: #008080;\">19</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 开始给evdev事件层驱动分配空间了 </span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\">20</span>     evdev = kzalloc(<span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> evdev), GFP_KERNEL);\n</span><span style=\"color: #008080;\">21</span>     <span style=\"color: #0000ff;\">if</span> (!<span style=\"color: #000000;\">evdev) {\n</span><span style=\"color: #008080;\">22</span>         error = -<span style=\"color: #000000;\">ENOMEM;\n</span><span style=\"color: #008080;\">23</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_free_minor;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">25</span> \n<span style=\"color: #008080;\">26</span>         <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 初始化client_list列表和evdev_wait队列 </span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\">27</span>     INIT_LIST_HEAD(&amp;evdev-&gt;<span style=\"color: #000000;\">client_list);\n</span><span style=\"color: #008080;\">28</span>     spin_lock_init(&amp;evdev-&gt;<span style=\"color: #000000;\">client_lock);\n</span><span style=\"color: #008080;\">29</span>     mutex_init(&amp;evdev-&gt;<span style=\"color: #000000;\">mutex);\n</span><span style=\"color: #008080;\">30</span>     init_waitqueue_head(&amp;evdev-&gt;<span style=\"color: #000000;\">wait);\n</span><span style=\"color: #008080;\">31</span>     evdev-&gt;exist = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">32</span> \n<span style=\"color: #008080;\">33</span>     dev_no =<span style=\"color: #000000;\"> minor;\n</span><span style=\"color: #008080;\">34</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> Normalize device number if it falls into legacy range </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">35</span>     <span style=\"color: #0000ff;\">if</span> (dev_no &lt; EVDEV_MINOR_BASE +<span style=\"color: #000000;\"> EVDEV_MINORS)\n</span><span style=\"color: #008080;\">36</span>         dev_no -=<span style=\"color: #000000;\"> EVDEV_MINOR_BASE;\n</span><span style=\"color: #008080;\">37</span>     \n<span style=\"color: #008080;\">38</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">设置设备节点名称，/dev/eventX 就是在此时设置</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">39</span>     dev_set_name(&amp;evdev-&gt;dev, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">event%d</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, dev_no);\n</span><span style=\"color: #008080;\">40</span> \n<span style=\"color: #008080;\">41</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> 初始化evdev结构体，其中handle为输入设备和事件处理的关联接口 </span><span style=\"color: #008000;\">*/</span>  \n<span style=\"color: #008080;\">42</span>     evdev-&gt;handle.dev =<span style=\"color: #000000;\"> input_get_device(dev);\n</span><span style=\"color: #008080;\">43</span>     evdev-&gt;handle.name = dev_name(&amp;evdev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">44</span>     evdev-&gt;handle.handler =<span style=\"color: #000000;\"> handler;\n</span><span style=\"color: #008080;\">45</span>     evdev-&gt;handle.<span style=\"color: #0000ff;\">private</span> =<span style=\"color: #000000;\"> evdev;\n</span><span style=\"color: #008080;\">46</span> \n<span style=\"color: #008080;\">47</span>       <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">设置设备号，应用层就是通过设备号，找到该设备的</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">48</span>     evdev-&gt;dev.devt =<span style=\"color: #000000;\"> MKDEV(INPUT_MAJOR, minor);\n</span><span style=\"color: #008080;\">49</span>     evdev-&gt;dev.<span style=\"color: #0000ff;\">class</span> = &amp;<span style=\"color: #000000;\">input_class;\n</span><span style=\"color: #008080;\">50</span>     evdev-&gt;dev.parent = &amp;dev-&gt;<span style=\"color: #000000;\">dev;\n</span><span style=\"color: #008080;\">51</span>     evdev-&gt;dev.release =<span style=\"color: #000000;\"> evdev_free;\n</span><span style=\"color: #008080;\">52</span>     device_initialize(&amp;evdev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">53</span> \n<span style=\"color: #008080;\">54</span>      <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\"> input_dev设备驱动和handler事件处理层的关联，就在这时由handle完成 </span><span style=\"color: #008000;\">*/</span> \n<span style=\"color: #008080;\">55</span>     error = input_register_handle(&amp;evdev-&gt;<span style=\"color: #000000;\">handle);\n</span><span style=\"color: #008080;\">56</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\">57</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_free_evdev;\n</span><span style=\"color: #008080;\">58</span> \n<span style=\"color: #008080;\">59</span>     cdev_init(&amp;evdev-&gt;cdev, &amp;<span style=\"color: #000000;\">evdev_fops);\n</span><span style=\"color: #008080;\">60</span>     evdev-&gt;cdev.kobj.parent = &amp;evdev-&gt;<span style=\"color: #000000;\">dev.kobj;\n</span><span style=\"color: #008080;\">61</span>     error = cdev_add(&amp;evdev-&gt;cdev, evdev-&gt;dev.devt, <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">62</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\">63</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_unregister_handle;\n</span><span style=\"color: #008080;\">64</span> \n<span style=\"color: #008080;\">65</span>     <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">将设备加入到Linux设备模型，它的内部将找到它的bus，然后让它的bus\n</span><span style=\"color: #008080;\">66</span> <span style=\"color: #008000;\">    给它找到它的driver，在驱动或者总线的probe函数中，一般会在/dev/目录\n</span><span style=\"color: #008080;\">67</span> <span style=\"color: #008000;\">    先创建相应的设备节点，这样应用程序就可以通过该设备节点来使用设备了\n</span><span style=\"color: #008080;\">68</span> <span style=\"color: #008000;\">    ，/dev/eventX 设备节点就是在此时生成\n</span><span style=\"color: #008080;\">69</span>     <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">70</span>     error = device_add(&amp;evdev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">71</span>     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (error)\n</span><span style=\"color: #008080;\">72</span>         <span style=\"color: #0000ff;\">goto</span><span style=\"color: #000000;\"> err_cleanup_evdev;\n</span><span style=\"color: #008080;\">73</span> \n<span style=\"color: #008080;\">74</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">75</span> \n<span style=\"color: #008080;\">76</span> <span style=\"color: #000000;\"> err_cleanup_evdev:\n</span><span style=\"color: #008080;\">77</span> <span style=\"color: #000000;\">    evdev_cleanup(evdev);\n</span><span style=\"color: #008080;\">78</span> <span style=\"color: #000000;\"> err_unregister_handle:\n</span><span style=\"color: #008080;\">79</span>     input_unregister_handle(&amp;evdev-&gt;<span style=\"color: #000000;\">handle);\n</span><span style=\"color: #008080;\">80</span> <span style=\"color: #000000;\"> err_free_evdev:\n</span><span style=\"color: #008080;\">81</span>     put_device(&amp;evdev-&gt;<span style=\"color: #000000;\">dev);\n</span><span style=\"color: #008080;\">82</span> <span style=\"color: #000000;\"> err_free_minor:\n</span><span style=\"color: #008080;\">83</span> <span style=\"color: #000000;\">    input_free_minor(minor);\n</span><span style=\"color: #008080;\">84</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> error;\n</span><span style=\"color: #008080;\">85</span> }</pre>\n</div>\n<p>over</p>\n<h1>4.应用层的角度分析到底层</h1>\n<p>evdev_read（）---------------------------》wait_event_interruptible(evdev-&gt;wait,client-&gt;packet_head != client-&gt;tail || !evdev-&gt;exist || client-&gt;revoked);等待evdev-&gt;wait唤醒</p>\n<p>　　evdev_pass_values-----------------------》wake_up_interruptible(&amp;evdev-&gt;wait);</p>\n<p>　　　　evdev_events---------------------------》evdev_pass_values(client, vals, count, ev_time);<br>　　　　　　evdev_event----------------------------》evdev_events(handle, vals, 1);</p>\n<p>　　　　　　　　static struct input_handler evdev_handler = {<br>&nbsp;&nbsp; 　　　　　　　　&nbsp;.event&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;= evdev_event,<br>&nbsp;&nbsp; &nbsp;　　　　　　　　.events&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;= evdev_events,<br>&nbsp;&nbsp; 　　　　　　　　&nbsp;.connect&nbsp;&nbsp; &nbsp;= evdev_connect,<br>&nbsp;&nbsp; &nbsp;　　　　　　　　.disconnect&nbsp;&nbsp; &nbsp;= evdev_disconnect,<br>&nbsp;&nbsp; 　　　　　　　　&nbsp;.legacy_minors&nbsp;&nbsp; &nbsp;= true,<br>&nbsp;&nbsp; &nbsp;　　　　　　　　.minor&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;= EVDEV_MINOR_BASE,<br>&nbsp;&nbsp; &nbsp;　　　　　　　　.name&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;= \"evdev\",<br>&nbsp;&nbsp; &nbsp;　　　　　　　　.id_table&nbsp;&nbsp; &nbsp;= evdev_ids,<br>　　　　　　　　};</p>\n<p>　　　　　　　　input_to_handler-----------------------------》　　 if (handler-&gt;events)<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　handler-&gt;events(handle, vals, count);<br>&nbsp;&nbsp; &nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　else if (handler-&gt;event)<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　for (v = vals; v != vals + count; v++)<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　&nbsp;handler-&gt;event(handle, v-&gt;type, v-&gt;code, v-&gt;value);</p>\n<p>　　　　　　input_pass_values--------------------------------》count = input_to_handler(handle, vals, count);</p>\n<p>　　input_handle_event----------------------------》input_pass_values(dev, dev-&gt;vals, dev-&gt;num_vals);</p>\n</div>\n<p>input_event----------------------------------------》input_handle_event(dev, type, code, value);</p>\n<p>显然，就是input_dev通过输入核心为驱动层提供统一的接口，<code>input_event</code>，来向事件处理层上报数据并唤醒。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n</div>\n</div>\n"}],"PostAsset":[{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结/2909691-20220928152209724-1097250473.png","slug":"2909691-20220928152209724-1097250473.png","post":"clfzm4l9q0007zkvq2z0tpc4d","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结/2909691-20220928152945955-899676295.png","slug":"2909691-20220928152945955-899676295.png","post":"clfzm4l9q0007zkvq2z0tpc4d","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/python使用百度翻译的API/20200302113313981.png","slug":"20200302113313981.png","post":"clfzm4laf000czkvq71lfi0ex","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/中华通史-上古史-夏/20210703105815619.png","slug":"20210703105815619.png","post":"clfzm4la7000bzkvqtatcht3f","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/Linux-input子系统/2909691-20220819093409715-1604400596.png","slug":"2909691-20220819093409715-1604400596.png","post":"clfzm4lbw0017zkvqk8a5gldv","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/中华通史-上古史-夏/20210703111602157.png","slug":"20210703111602157.png","post":"clfzm4la7000bzkvqtatcht3f","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结/2909691-20220928153305849-1048335725.png","slug":"2909691-20220928153305849-1048335725.png","post":"clfzm4l9q0007zkvq2z0tpc4d","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/超详细解析python爬取外网图片/20200302110709393.png","slug":"20200302110709393.png","post":"clfzm4lam000dzkvq4u7ogmt6","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/超详细解析python爬取外网图片/20200302111109517.png","slug":"20200302111109517.png","post":"clfzm4lam000dzkvq4u7ogmt6","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/linux线程/2909691-20221018201940242-320806714.png","slug":"2909691-20221018201940242-320806714.png","post":"clfzm4l9y0008zkvqg5j13gw1","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/linux线程/2909691-20221018202536805-171723429.png","slug":"2909691-20221018202536805-171723429.png","post":"clfzm4l9y0008zkvqg5j13gw1","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/linux线程/2909691-20221018204634847-2097816257.png","slug":"2909691-20221018204634847-2097816257.png","post":"clfzm4l9y0008zkvqg5j13gw1","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/中华通史-上古史-夏/20210703105831609.png","slug":"20210703105831609.png","post":"clfzm4la7000bzkvqtatcht3f","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/中华通史-上古史-夏/20210703105920999.png","slug":"20210703105920999.png","post":"clfzm4la7000bzkvqtatcht3f","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/python使用百度翻译的API/20200302112753932.png","slug":"20200302112753932.png","post":"clfzm4laf000czkvq71lfi0ex","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/python使用百度翻译的API/20200302112847600.png","slug":"20200302112847600.png","post":"clfzm4laf000czkvq71lfi0ex","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/python使用百度翻译的API/20200302113654396.png","slug":"20200302113654396.png","post":"clfzm4laf000czkvq71lfi0ex","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/python使用百度翻译的API/20200302115943813.png","slug":"20200302115943813.png","post":"clfzm4laf000czkvq71lfi0ex","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/python使用百度翻译的API/20200302120105912.png","slug":"20200302120105912.png","post":"clfzm4laf000czkvq71lfi0ex","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结/2909691-20220928151916481-1456634923.png","slug":"2909691-20220928151916481-1456634923.png","post":"clfzm4l9q0007zkvq2z0tpc4d","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结/2909691-20220928152922659-1842915282.png","slug":"2909691-20220928152922659-1842915282.png","post":"clfzm4l9q0007zkvq2z0tpc4d","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结/2909691-20220928152957065-501054685.png","slug":"2909691-20220928152957065-501054685.png","post":"clfzm4l9q0007zkvq2z0tpc4d","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结/2909691-20220928153140065-1807119912.png","slug":"2909691-20220928153140065-1807119912.png","post":"clfzm4l9q0007zkvq2z0tpc4d","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/IMX6ull-移植-lVGL总结/2909691-20220928153451220-1274979267.png","slug":"2909691-20220928153451220-1274979267.png","post":"clfzm4l9q0007zkvq2z0tpc4d","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329193127889.jpg","slug":"20210329193127889.jpg","post":"clfzm4lav000gzkvqaxq6ee78","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329195920218.jpg","slug":"20210329195920218.jpg","post":"clfzm4lav000gzkvqaxq6ee78","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329200632579.png","slug":"20210329200632579.png","post":"clfzm4lav000gzkvqaxq6ee78","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329201443609.png","slug":"20210329201443609.png","post":"clfzm4lav000gzkvqaxq6ee78","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329201646615.png","slug":"20210329201646615.png","post":"clfzm4lav000gzkvqaxq6ee78","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329202358795.png","slug":"20210329202358795.png","post":"clfzm4lav000gzkvqaxq6ee78","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329202548677.png","slug":"20210329202548677.png","post":"clfzm4lav000gzkvqaxq6ee78","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329203021908.png","slug":"20210329203021908.png","post":"clfzm4lav000gzkvqaxq6ee78","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329203335481.png","slug":"20210329203335481.png","post":"clfzm4lav000gzkvqaxq6ee78","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/菜鸟应该如何开始设计一个项目的嵌入式软件架构/20210329203626594.png","slug":"20210329203626594.png","post":"clfzm4lav000gzkvqaxq6ee78","modified":0,"renderable":0},{"_id":"source/_posts/2023/04/新疆/ANKG1449.JPG","slug":"ANKG1449.JPG","post":"clfzm4lb7000lzkvq9nrjsptj","modified":0,"renderable":0},{"_id":"source/_posts/2023/04/新疆/AQSR2937.JPG","slug":"AQSR2937.JPG","post":"clfzm4lb7000lzkvq9nrjsptj","modified":0,"renderable":0},{"_id":"source/_posts/2023/04/新疆/AZQE3071.JPG","slug":"AZQE3071.JPG","post":"clfzm4lb7000lzkvq9nrjsptj","modified":0,"renderable":0},{"_id":"source/_posts/2023/04/新疆/BBND3773.PNG","slug":"BBND3773.PNG","post":"clfzm4lb7000lzkvq9nrjsptj","modified":0,"renderable":0},{"_id":"source/_posts/2023/04/新疆/BBOD4958.JPG","slug":"BBOD4958.JPG","post":"clfzm4lb7000lzkvq9nrjsptj","modified":0,"renderable":0},{"_id":"source/_posts/2023/04/新疆/IGAX1811.JPG","slug":"IGAX1811.JPG","post":"clfzm4lb7000lzkvq9nrjsptj","modified":0,"renderable":0},{"_id":"source/_posts/2023/04/新疆/KNLN1045.PNG","slug":"KNLN1045.PNG","post":"clfzm4lb7000lzkvq9nrjsptj","modified":0,"renderable":0},{"_id":"source/_posts/2023/04/新疆/MLZW8415.JPG","slug":"MLZW8415.JPG","post":"clfzm4lb7000lzkvq9nrjsptj","modified":0,"renderable":0},{"_id":"source/_posts/2023/04/新疆/MOVG5083.JPG","slug":"MOVG5083.JPG","post":"clfzm4lb7000lzkvq9nrjsptj","modified":0,"renderable":0},{"_id":"source/_posts/2023/04/新疆/MXAF0695.JPG","slug":"MXAF0695.JPG","post":"clfzm4lb7000lzkvq9nrjsptj","modified":0,"renderable":0},{"_id":"source/_posts/2023/04/新疆/OOGA8835.JPG","slug":"OOGA8835.JPG","post":"clfzm4lb7000lzkvq9nrjsptj","modified":0,"renderable":0},{"_id":"source/_posts/2023/04/新疆/XRBQ0574.JPG","slug":"XRBQ0574.JPG","post":"clfzm4lb7000lzkvq9nrjsptj","modified":0,"renderable":0},{"_id":"source/_posts/2023/04/新疆/YJUM1401.JPG","slug":"YJUM1401.JPG","post":"clfzm4lb7000lzkvq9nrjsptj","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/Linux-input子系统/2909691-20220819094250974-180404869.webp","slug":"2909691-20220819094250974-180404869.webp","post":"clfzm4lbw0017zkvqk8a5gldv","modified":0,"renderable":0},{"_id":"source/_posts/2022/01/Linux-input子系统/2909691-20220819102740731-2036281828.png","slug":"2909691-20220819102740731-2036281828.png","post":"clfzm4lbw0017zkvqk8a5gldv","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clfzm4l9q0007zkvq2z0tpc4d","category_id":"clfzm4la20009zkvq5g3zd4ts","_id":"clfzm4lb5000jzkvqmy6hv7ff"},{"post_id":"clfzm4l9y0008zkvqg5j13gw1","category_id":"clfzm4la20009zkvq5g3zd4ts","_id":"clfzm4lba000nzkvq6pv04rbw"},{"post_id":"clfzm4la7000bzkvqtatcht3f","category_id":"clfzm4lb4000izkvqh49ayymz","_id":"clfzm4lbd000rzkvqtc1r8o6q"},{"post_id":"clfzm4laf000czkvq71lfi0ex","category_id":"clfzm4lbb000pzkvq4aa49fd0","_id":"clfzm4lbh000xzkvqsdznbvyf"},{"post_id":"clfzm4lam000dzkvq4u7ogmt6","category_id":"clfzm4lbb000pzkvq4aa49fd0","_id":"clfzm4lbi0010zkvqq92ym3vl"},{"post_id":"clfzm4lav000gzkvqaxq6ee78","category_id":"clfzm4lbh000wzkvqwrigp807","_id":"clfzm4lbk0013zkvqar8rj03x"},{"post_id":"clfzm4lbw0017zkvqk8a5gldv","category_id":"clfzm4la20009zkvq5g3zd4ts","_id":"clfzm4lc70019zkvqdtdbzf4d"}],"PostTag":[{"post_id":"clfzm4l9q0007zkvq2z0tpc4d","tag_id":"clfzm4la6000azkvquya9l5j4","_id":"clfzm4lb9000mzkvq629vfk3y"},{"post_id":"clfzm4l9q0007zkvq2z0tpc4d","tag_id":"clfzm4laq000fzkvqklzi22zs","_id":"clfzm4lbb000ozkvqkm8ywvmz"},{"post_id":"clfzm4l9y0008zkvqg5j13gw1","tag_id":"clfzm4la6000azkvquya9l5j4","_id":"clfzm4lbf000uzkvqp0ut2uro"},{"post_id":"clfzm4l9y0008zkvqg5j13gw1","tag_id":"clfzm4lbc000qzkvq1dk7em32","_id":"clfzm4lbg000vzkvq6exa6p57"},{"post_id":"clfzm4la7000bzkvqtatcht3f","tag_id":"clfzm4lbe000tzkvqhf8ny47o","_id":"clfzm4lbi000zzkvqn6ff1ga8"},{"post_id":"clfzm4laf000czkvq71lfi0ex","tag_id":"clfzm4lbh000yzkvq7gerosn9","_id":"clfzm4lbk0012zkvqks2xcr77"},{"post_id":"clfzm4lam000dzkvq4u7ogmt6","tag_id":"clfzm4lbh000yzkvq7gerosn9","_id":"clfzm4lbm0015zkvq9u8s7opo"},{"post_id":"clfzm4lav000gzkvqaxq6ee78","tag_id":"clfzm4lbl0014zkvql8h46x53","_id":"clfzm4lbm0016zkvqi3ydrs6a"},{"post_id":"clfzm4lbw0017zkvqk8a5gldv","tag_id":"clfzm4la6000azkvquya9l5j4","_id":"clfzm4lcd001azkvq80ssham8"},{"post_id":"clfzm4lbw0017zkvqk8a5gldv","tag_id":"clfzm4lby0018zkvqwbyqo89r","_id":"clfzm4lcf001bzkvq5bdjb341"}],"Tag":[{"name":"linux","_id":"clfzm4la6000azkvquya9l5j4"},{"name":"imx6ull","_id":"clfzm4laq000fzkvqklzi22zs"},{"name":"thread","_id":"clfzm4lbc000qzkvq1dk7em32"},{"name":"history","_id":"clfzm4lbe000tzkvqhf8ny47o"},{"name":"python","_id":"clfzm4lbh000yzkvq7gerosn9"},{"name":"Embedded system","_id":"clfzm4lbl0014zkvql8h46x53"},{"name":"input","_id":"clfzm4lby0018zkvqwbyqo89r"}]}}